{"version":3,"sources":["../../core/js/models/lockingModel.js","../../core/js/wait.js","../../core/js/adapt.js","../../core/js/adaptCollection.js","../../core/js/startController.js","../../core/js/enums/logLevelEnum.js","../../core/js/logging.js","../../core/js/models/buildModel.js","../../core/js/models/adaptModel.js","../../core/js/models/articleModel.js","../../core/js/models/blockModel.js","../../core/js/models/configModel.js","../../core/js/models/contentObjectModel.js","../../core/js/models/componentModel.js","../../core/js/models/courseModel.js","../../core/js/enums/buttonStateEnum.js","../../core/js/models/questionModel.js","../../core/js/views/navigationView.js","../../core/js/accessibility.js","../../core/js/offlineStorage.js","../../core/js/enums/completionStateEnum.js","../../core/js/tracking.js","../../core/js/device.js","../../core/js/views/drawerView.js","../../core/js/drawer.js","../../core/js/views/notifyView.js","../../core/js/views/notifyPushView.js","../../core/js/models/notifyModel.js","../../core/js/notify.js","../../core/js/popupManager.js","../../core/js/models/routerModel.js","../../core/js/views/adaptView.js","../../core/js/views/blockView.js","../../core/js/views/articleView.js","../../core/js/views/pageView.js","../../core/js/router.js","../../core/js/helpers.js","../../core/js/scrolling.js","../../core/js/views/headingView.js","../../core/js/headings.js","../../core/js/models/itemModel.js","../../core/js/models/itemsComponentModel.js","../../components/adapt-contrib-accordion/js/accordionModel.js","../../core/js/views/componentView.js","../../components/adapt-contrib-accordion/js/accordionView.js","../../components/adapt-contrib-accordion/js/adapt-contrib-accordion.js","../../components/adapt-contrib-assessmentResults/js/assessmentResultsModel.js","../../components/adapt-contrib-assessmentResults/js/assessmentResultsView.js","../../components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults.js","../../components/adapt-contrib-blank/js/adapt-contrib-blank.js","../../core/js/views/buttonsView.js","../../core/js/views/questionView.js","../../components/adapt-contrib-mcq/js/mcqView.js","../../core/js/models/itemsQuestionModel.js","../../components/adapt-contrib-mcq/js/adapt-contrib-mcq.js","../../components/adapt-contrib-gmcq/js/adapt-contrib-gmcq.js","../../components/adapt-contrib-graphic/js/adapt-contrib-graphic.js","../../components/adapt-contrib-hotgraphic/js/hotgraphicPopupView.js","../../components/adapt-contrib-hotgraphic/js/hotgraphicView.js","../../components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic.js","../../components/adapt-contrib-matching/js/dropdownAdapter.js","../../components/adapt-contrib-matching/js/matchingView.js","../../components/adapt-contrib-matching/js/matchingModel.js","../../components/adapt-contrib-matching/js/adapt-contrib-matching.js","../../components/adapt-contrib-media/js/adapt-contrib-media.js","../../components/adapt-contrib-narrative/js/modeEnum.js","../../components/adapt-contrib-narrative/js/narrativeView.js","../../components/adapt-contrib-narrative/js/adapt-contrib-narrative.js","../../components/adapt-contrib-slider/js/sliderView.js","../../components/adapt-contrib-slider/js/sliderModel.js","../../components/adapt-contrib-slider/js/adapt-contrib-slider.js","../../components/adapt-contrib-text/js/adapt-contrib-text.js","../../components/adapt-contrib-textInput/js/textInputView.js","../../components/adapt-contrib-textInput/js/textInputModel.js","../../components/adapt-contrib-textInput/js/adapt-contrib-textInput.js","../../extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView.js","../../extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank.js","../../extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel.js","../../extensions/adapt-contrib-assessment/js/assessment.js","../../extensions/adapt-contrib-assessment/js/adapt-assessmentArticleExtension.js","../../extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking.js","../../extensions/adapt-contrib-languagePicker/js/languagePickerNavigationView.js","../../extensions/adapt-contrib-languagePicker/js/languagePickerView.js","../../extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView.js","../../extensions/adapt-contrib-languagePicker/js/languagePickerNavView.js","../../extensions/adapt-contrib-languagePicker/js/languagePickerModel.js","../../extensions/adapt-contrib-languagePicker/js/adapt-languagePicker.js","../../extensions/adapt-contrib-pageLevelProgress/js/completionCalculations.js","../../extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView.js","../../extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView.js","../../extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView.js","../../extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView.js","../../extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection.js","../../extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress.js","../../extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView.js","../../extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers.js","../../extensions/adapt-contrib-resources/js/adapt-contrib-resources.js","../../extensions/adapt-contrib-trickle/js/trickleView.js","../../extensions/adapt-contrib-trickle/js/pageView.js","../../extensions/adapt-contrib-trickle/js/handlers/buttonView.js","../../extensions/adapt-contrib-trickle/js/handlers/button.js","../../extensions/adapt-contrib-trickle/js/handlers/completion.js","../../extensions/adapt-contrib-trickle/js/handlers/notify.js","../../extensions/adapt-contrib-trickle/js/handlers/resize.js","../../extensions/adapt-contrib-trickle/js/handlers/tutor.js","../../extensions/adapt-contrib-trickle/js/handlers/visibility.js","../../extensions/adapt-contrib-trickle/js/handlers/done.js","../../extensions/adapt-contrib-trickle/js/adapt-contrib-trickle.js","../../extensions/adapt-contrib-tutor/js/adapt-contrib-tutor.js","../../core/js/views/menuView.js","../../menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu.js","../../theme/adapt-contrib-vanilla/js/theme-block.js","../../theme/adapt-contrib-vanilla/js/vanilla.js","../../plugins.js","../../core/js/app.js"],"names":[],"mappingshhdhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACftrhtTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtjtprJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACntLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1ihpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChhlzpgbxZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbzhvytnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACllxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChxrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvxVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClhhjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvfile":"adapt.min.js","sourcesContent":["define('core/js/models/lockingModel',[],function() {\r\n\r\n\tvar set = Backbone.Model.prototype.set;\r\n\r\n\t_.extend(Backbone.Model.prototype, {\r\n\r\n\t\tset: function(attrName, attrVal, options) {\r\n\t\t\tvar stopProcessing = !this.lockedAttributes || typeof attrName === \"object\" || typeof attrVal !== \"boolean\" || !this.isLocking(attrName);\r\n\t\t\tif (stopProcessing) return set.apply(this, arguments);\r\n\t\t\t\r\n\t\t\toptions = options || {};\r\n\r\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\r\n\t\t\tif (!isSettingValueForSpecificPlugin) {\r\n\t\t\t\tconsole.error(\"Must supply a pluginName to change a locked attribute\");\r\n\t\t\t\toptions.pluginName = \"compatibility\";\r\n\t\t\t}\r\n\r\n\t\t\tvar pluginName  = options.pluginName;\r\n\t\t\tif (this.defaults[attrName] !== undefined) {\r\n\t\t\t\tthis.lockedAttributes[attrName] = !this.defaults[attrName];\r\n\t\t\t}\r\n\t\t\tvar lockingValue = this.lockedAttributes[attrName];\r\n\t\t\tvar isAttemptingToLock = (lockingValue === attrVal);\r\n\r\n\t\t\tif (isAttemptingToLock) {\r\n\r\n\t\t\t\tthis.setLockState(attrName, true, {pluginName:pluginName, skipcheck: true});\r\n\r\n\t\t\t\t//console.log(options.pluginName, \"locking\", attrName, \"on\", this.get(\"_id\"));\r\n\t\t\t\treturn set.call(this, attrName, lockingValue);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setLockState(attrName, false, {pluginName:pluginName, skipcheck: true});\r\n\r\n\t\t\tvar totalLockValue = this.getLockCount(attrName, {skipcheck: true});\r\n\t\t\t//console.log(options.pluginName, \"attempting to unlock\", attrName, \"on\", this.get(\"_id\"), \"lockValue\", totalLockValue, this._lockedAttributesValues[attrName]);\r\n\t\t\tif (totalLockValue === 0) {\r\n\t\t\t\t//console.log(options.pluginName, \"unlocking\", attrName, \"on\", this.get(\"_id\"));\r\n\t\t\t\treturn set.call(this, attrName, !lockingValue);\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLocking: function(attrName, defaultLockValue) {\r\n\t\t\tif (this.isLocking(attrName)) return;\r\n\t\t\tif (!this.lockedAttributes) this.lockedAttributes = {};\r\n\t\t\tthis.lockedAttributes[attrName] = defaultLockValue;\r\n\t\t},\r\n\r\n\t\tunsetLocking: function(attrName) {\r\n\t\t\tif (!this.isLocking(attrName)) return;\r\n\t\t\tif (!this.lockedAttributes) return;\r\n\t\t\tdelete this.lockedAttributes[attrName];\r\n\t\t\tdelete this._lockedAttributesValues[attrName];\r\n\t\t\tif (_.keys(this.lockedAttributes).length === 0) {\r\n\t\t\t\tdelete this.lockedAttributes;\r\n\t\t\t\tdelete this._lockedAttributesValues;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tisLocking: function(attrName) {\r\n\t\t\tvar isCheckingGeneralLockingState = (attrName === undefined);\r\n\t\t\tvar isUsingLockedAttributes = (this.lockedAttributes !== undefined);\r\n\r\n\t\t\tif (isCheckingGeneralLockingState) {\r\n\t\t\t\treturn isUsingLockedAttributes;\r\n\t\t\t}\r\n\r\n\t\t\tif (!isUsingLockedAttributes) return false;\r\n\r\n\t\t\tvar isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;\r\n\t\t\tif (!isAttributeALockingAttribute) return false;\r\n\r\n\t\t\tif (this._lockedAttributesValues === undefined) {\r\n\t\t\t\tthis._lockedAttributesValues = {};\r\n\t\t\t}\r\n\r\n\t\t\tif (this._lockedAttributesValues[attrName] === undefined) {\r\n\t\t\t\tthis._lockedAttributesValues[attrName] = {};\t\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tisLocked: function(attrName, options) {\r\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\r\n\t\t\tif (!shouldSkipCheck) { \r\n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\r\n\t\t\t\tif (stopProcessing) return;\r\n\t\t\t}\r\n\r\n\t\t\treturn this.getLockCount(attrName) > 0;\r\n\t\t},\r\n\r\n\t\tgetLockCount: function(attrName, options) {\r\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\r\n\t\t\tif (!shouldSkipCheck) { \r\n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\r\n\t\t\t\tif (stopProcessing) return;\r\n\t\t\t}\r\n\r\n\t\t\tvar isGettingValueForSpecificPlugin = options && options.pluginName;\r\n\t\t\tif (isGettingValueForSpecificPlugin) {\r\n\r\n\t\t\t\treturn this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\tvar lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);\r\n\t\t\tvar lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value){ return sum + (value ? 1 : 0); }, 0);\r\n\t\t\t\r\n\t\t\treturn lockingAttributeValuesSum;\r\n\t\t},\r\n\r\n\t\tsetLockState: function(attrName, value, options) {\r\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\r\n\t\t\tif (!shouldSkipCheck) { \r\n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\r\n\t\t\t\tif (stopProcessing) return this;\r\n\t\t\t}\r\n\r\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\r\n\t\t\tif (!isSettingValueForSpecificPlugin) {\r\n\t\t\t\tconsole.error(\"Must supply a pluginName to set a locked attribute lock value\");\r\n\t\t\t\toptions.pluginName = \"compatibility\";\r\n\t\t\t}\r\n\r\n\t\t\tif (value) {\r\n\t\t\t\tthis._lockedAttributesValues[attrName][options.pluginName] = value;\r\n\t\t\t} else {\r\n\t\t\t\tdelete this._lockedAttributesValues[attrName][options.pluginName];\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n});\r\n\n","define('core/js/wait',[],function() {\r\n\r\n     var Wait = Backbone.Controller.extend({\r\n\r\n        initialize: function() {\r\n            _.bindAll(this, \"begin\", \"end\");\r\n        },\r\n\r\n        _waitCount: 0,\r\n        _callbackHandle: null,\r\n\r\n        /**\r\n         * Returns true if there are items in the waiting count.\r\n         * \r\n         * @return {Boolean}\r\n         */\r\n        isWaiting: function() {\r\n            return (this._waitCount !== 0);\r\n        },\r\n\r\n        /**\r\n         * Add one item to the waiting count.\r\n         * \r\n         * @return {Object}\r\n         */\r\n        begin: function() {\r\n\r\n            if (!this.isWaiting()) {\r\n                this.trigger(\"wait\");\r\n            }\r\n\r\n            this._waitCount++;\r\n\r\n            if (this._callbackHandle) {\r\n                clearTimeout(this._callbackHandle);\r\n                this._callbackHandle = null;\r\n            }\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        /**\r\n         * Remove an item from the waiting count and trigger ready asynchronously if no more items are waiting.\r\n         * \r\n         * @return {Object}\r\n         */\r\n        end: function() {\r\n\r\n            if (!this.isWaiting()) {\r\n                return this;\r\n            }\r\n\r\n            this._waitCount--;\r\n\r\n            if (this.isWaiting()) {\r\n                return this;\r\n            }\r\n            \r\n            if (this._callbackHandle) {\r\n                return this;\r\n            }\r\n\r\n            this._callbackHandle = setTimeout(function() {\r\n\r\n                this._callbackHandle = null;\r\n                this.trigger(\"ready\");\r\n\r\n            }.bind(this), 0);\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        /**\r\n         * Queue this function until all open waits have been ended.\r\n         * \r\n         * @param  {Function} callback\r\n         * @return {Object}\r\n         */\r\n        queue: function(callback) {\r\n\r\n            this.begin();\r\n            this.once(\"ready\", callback);\r\n            this.end();\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        /**\r\n         * Wait for this asynchonous function to execute before triggering ready event.\r\n         * \r\n         * @param  {Function} callback   [ Function to execute whilst holding queued callback. Once complete run first argiument, done(). ]\r\n         * @return {Object}\r\n         */\r\n        for: function(callback) {\r\n\r\n            this.begin();\r\n            _.defer(function() {\r\n                callback(this.end);\r\n            }.bind(this));\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return Wait;\r\n\r\n});\n","define('core/js/adapt',[\r\n    'core/js/models/lockingModel',\r\n    'core/js/wait'\r\n], function(lockingModel, Wait) {\r\n\r\n    var AdaptModel = Backbone.Model.extend({\r\n\r\n        defaults: {\r\n            _canScroll: true, //to stop scrollTo behaviour,\r\n            _outstandingCompletionChecks: 0,\r\n            _pluginWaitCount:0,\r\n            _isStarted: false\r\n        },\r\n\r\n        lockedAttributes: {\r\n            _canScroll: false\r\n        },\r\n\r\n        initialize: function () {\r\n            this.setupWait();\r\n        },\r\n\r\n        //call when entering an asynchronous completion check\r\n        checkingCompletion: function() {\r\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\r\n            this.set(\"_outstandingCompletionChecks\", ++outstandingChecks);\r\n        },\r\n\r\n        //call when exiting an asynchronous completion check\r\n        checkedCompletion: function() {\r\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\r\n            this.set(\"_outstandingCompletionChecks\", --outstandingChecks);\r\n        },\r\n\r\n        //wait until there are no outstanding completion checks\r\n        deferUntilCompletionChecked: function(callback) {\r\n\r\n            if (this.get(\"_outstandingCompletionChecks\") === 0) return callback();\r\n\r\n            var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {\r\n                if (outstandingChecks !== 0) return;\r\n\r\n                Adapt.off(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\r\n\r\n                callback();\r\n            };\r\n\r\n            Adapt.on(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\r\n\r\n        },\r\n\r\n        setupWait: function() {\r\n\r\n            this.wait = new Wait();\r\n\r\n            // Setup legcay events and handlers\r\n            var beginWait = function () {\r\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future\");\r\n                this.wait.begin();\r\n            }.bind(this);\r\n\r\n            var endWait = function() {\r\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future\");\r\n                this.wait.end();\r\n            }.bind(this);\r\n\r\n            var ready = function() {\r\n\r\n                if (this.wait.isWaiting()) {\r\n                    return;\r\n                }\r\n\r\n                var isEventListening = (this._events['plugins:ready']);\r\n                if (!isEventListening) {\r\n                    return;\r\n                }\r\n\r\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future\");\r\n                this.trigger('plugins:ready');\r\n\r\n            }.bind(this);\r\n\r\n            this.listenTo(this.wait, \"ready\", ready);\r\n            this.listenTo(this, {\r\n                'plugin:beginWait': beginWait,\r\n                'plugin:endWait': endWait\r\n            });\r\n\r\n        },\r\n\r\n        isWaitingForPlugins:function() {\r\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future\");\r\n            return this.wait.isWaiting();\r\n        },\r\n\r\n        checkPluginsReady:function() {\r\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future\");\r\n            if (this.isWaitingForPlugins()) {\r\n                return;\r\n            }\r\n            this.trigger('plugins:ready');\r\n        }\r\n\r\n    });\r\n\r\n    var Adapt = new AdaptModel();\r\n\r\n    Adapt.location = {};\r\n    Adapt.componentStore = {};\r\n    Adapt.mappedIds = {};\r\n\r\n    Adapt.loadScript = window.__loadScript;\r\n\r\n    Adapt.initialize = function() {\r\n\r\n        //wait until no more completion checking\r\n        Adapt.deferUntilCompletionChecked(function() {\r\n\r\n            //start adapt in a full restored state\r\n            Adapt.trigger('adapt:start');\r\n\r\n            if (!Backbone.History.started) {\r\n                Backbone.history.start();\r\n            }\r\n\r\n            Adapt.set(\"_isStarted\", true);\r\n\r\n            Adapt.trigger('adapt:initialize');\r\n\r\n        });\r\n\r\n    };\r\n\r\n    Adapt.navigateToElement = function(selector, settings) {\r\n        // Allows a selector to be passed in and Adapt will navigate to this element\r\n\r\n        // Setup settings object\r\n        var settings = (settings || {});\r\n\r\n        // Removes . symbol from the selector to find the model\r\n        var currentModelId = selector.replace(/\\./g, '');\r\n        var currentModel = Adapt.findById(currentModelId);\r\n        // Get current page to check whether this is the current page\r\n        var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');\r\n\r\n        // If current page - scrollTo element\r\n        if (currentPage.get('_id') === Adapt.location._currentId) {\r\n           return Adapt.scrollTo(selector, settings);\r\n        }\r\n\r\n        // If the element is on another page navigate and wait until pageView:ready is fired\r\n        // Then scrollTo element\r\n        Adapt.once('pageView:ready', function() {\r\n            _.defer(function() {\r\n                Adapt.router.set(\"_shouldNavigateFocus\", true);\r\n                Adapt.scrollTo(selector, settings);\r\n            });\r\n        });\r\n\r\n        var shouldReplaceRoute = settings.replace || false;\r\n        \r\n        Adapt.router.set(\"_shouldNavigateFocus\", false);\r\n        Backbone.history.navigate('#/id/' + currentPage.get('_id'), {trigger: true, replace: shouldReplaceRoute});\r\n    };\r\n\r\n    Adapt.register = function(name, object) {\r\n        // Used to register components\r\n        // Store the component view\r\n        if (Adapt.componentStore[name]) {\r\n            throw Error('The component \"' + name + '\" already exists in your project');\r\n        }\r\n        \r\n        if (object.view) {\r\n            //use view+model object\r\n            if(!object.view.template) object.view.template = name;\r\n        } else {\r\n            //use view object\r\n            if(!object.template) object.template = name;\r\n        }\r\n\r\n        Adapt.componentStore[name] = object;\r\n\r\n        return object;\r\n    };\r\n\r\n    Adapt.getViewClass = function(name) {\r\n        var object = Adapt.componentStore[name];\r\n        if (!object) {\r\n            throw Error('The component \"' + name + '\" doesn\\'t exist in your project');\r\n        }\r\n        return object.view || object;\r\n    };\r\n\r\n    // Used to map ids to collections\r\n    Adapt.setupMapping = function() {\r\n        // Clear any existing mappings.\r\n        Adapt.mappedIds = {};\r\n\r\n        // Setup course Id\r\n        Adapt.mappedIds[Adapt.course.get('_id')] = \"course\";\r\n\r\n        // Setup each collection\r\n        var collections = [\"contentObjects\", \"articles\", \"blocks\", \"components\"];\r\n\r\n        for (var i = 0, len = collections.length; i < len; i++) {\r\n            var collection = collections[i];\r\n            var models = Adapt[collection].models;\r\n            for (var j = 0, lenj = models.length; j < lenj; j++) {\r\n                var model = models[j];\r\n                Adapt.mappedIds[model.get('_id')] = collection;\r\n\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    Adapt.mapById = function(id) {\r\n        // Returns collection name that contains this models Id\r\n        return Adapt.mappedIds[id];\r\n    };\r\n\r\n    Adapt.findById = function(id) {\r\n\r\n        // Return a model\r\n        // Checks if the Id passed in is the course Id\r\n        if (id === Adapt.course.get('_id')) {\r\n            return Adapt.course;\r\n        }\r\n\r\n        var collectionType = Adapt.mapById(id);\r\n\r\n        if (!collectionType) {\r\n            console.warn('Adapt.findById() unable to find collection type for id: ' + id);\r\n            return;\r\n        }\r\n\r\n        return Adapt[collectionType]._byAdaptID[id][0];\r\n\r\n    };\r\n\r\n    // Relative strings describe the number and type of hops in the model hierarchy\r\n    //\r\n    // \"@component +1\" means to move one component forward from the current model\r\n    // This function would return the following:\r\n    // {\r\n    //       type: \"component\",\r\n    //       offset: 1\r\n    // }\r\n    // Trickle uses this function to determine where it should scrollTo after it unlocks\r\n    Adapt.parseRelativeString = function(relativeString) {\r\n\r\n        if (relativeString[0] === \"@\") {\r\n            relativeString = relativeString.substr(1);\r\n        }\r\n\r\n        var type = relativeString.match(/(component|block|article|page|menu)/);\r\n        if (!type) {\r\n            Adapt.log.error(\"Adapt.parseRelativeString() could not match relative type\", relativeString);\r\n            return;\r\n        }\r\n        type = type[0];\r\n\r\n        var offset = parseInt(relativeString.substr(type.length).trim()||0);\r\n        if (isNaN(offset)) {\r\n            Adapt.log.error(\"Adapt.parseRelativeString() could not parse relative offset\", relativeString);\r\n            return;\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            offset: offset\r\n        };\r\n\r\n    };\r\n\r\n    Adapt.remove = function() {\r\n        Adapt.trigger('preRemove');\r\n        Adapt.trigger('remove');\r\n        _.defer(function() {\r\n            Adapt.trigger('postRemove');\r\n        });\r\n    };\r\n\r\n    return Adapt;\r\n\r\n});\r\n\n","define('core/js/adaptCollection',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var AdaptCollection = Backbone.Collection.extend({\r\n        initialize : function(models, options){\r\n            this.url = options.url;\r\n\r\n            this.once('reset', this.loadedData, this);\r\n            if (this.url) {\r\n                this.fetch({\r\n                    reset:true,\r\n                    error: _.bind(function(model, xhr, options) {\r\n                        console.error(\"ERROR: unable to load file \" + this.url);\r\n                    }, this)\r\n                });\r\n            }\r\n        },\r\n\r\n        loadedData: function() {\r\n            Adapt.trigger('adaptCollection:dataLoaded');\r\n        }\r\n\r\n    });\r\n\r\n    return AdaptCollection;\r\n\r\n});\r\n\n","define('core/js/startController',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n    \r\n    var StartController = Backbone.Controller.extend({\r\n\r\n        model: null,\r\n\r\n        initialize: function() {\r\n            this.model = new Backbone.Model(Adapt.course.get(\"_start\"));\r\n        },\r\n\r\n        setStartLocation: function() {\r\n            if (!this.isEnabled()) return;\r\n            window.history.replaceState('', '', this.getStartHash());\r\n        },\r\n\r\n        getStartHash: function(alwaysForce) {\r\n            var startId = this.getStartId();\r\n\r\n            var hasStartId = (startId)\r\n                ? true\r\n                : false;\r\n\r\n            var isRouteSpecified = (_.indexOf(window.location.href,\"#\") > -1);\r\n            var shouldForceStartId = alwaysForce || this.model.get(\"_force\");\r\n            var shouldNavigateToStartId = hasStartId && (!isRouteSpecified || shouldForceStartId);\r\n\r\n            var startHash = \"#/\";\r\n            if (shouldNavigateToStartId) {\r\n                if (startId !== Adapt.course.get(\"_id\")) {\r\n                    startHash = \"#/id/\"+startId;\r\n                }\r\n            } else {\r\n                //go to specified route or course main menu\r\n                var hasLocationHash = (window.location.hash)\r\n                    ? true\r\n                    : false;\r\n\r\n                startHash = hasLocationHash ? window.location.hash : startHash;\r\n            }\r\n\r\n            return startHash;\r\n        },\r\n\r\n        isEnabled: function() {\r\n            if (!this.model || !this.model.get(\"_isEnabled\")) return false;\r\n            return true;\r\n        },\r\n\r\n        getStartId: function() {\r\n            var startId = this.model.get(\"_id\");\r\n            var startIds = this.model.get(\"_startIds\");\r\n            var $html = $(\"html\");\r\n            \r\n            var hasStartIdsConfiguration = (startIds && startIds.length > 0);\r\n            if (hasStartIdsConfiguration) {\r\n                for (var i = 0, l =  startIds.length; i < l; i++) {\r\n                    var item = startIds[i];\r\n                    var className =  item._className;\r\n                    var skipIfComplete = item._skipIfComplete;\r\n                    \r\n                    var model = Adapt.findById(item._id);\r\n                    \r\n                    if (!model) {\r\n                        console.log(\"startController: cannot find id\", item._id);\r\n                        continue;\r\n                    }\r\n                    \r\n                    if (skipIfComplete) {\r\n                        if (model.get(\"_isComplete\")) continue;\r\n                    }\r\n\r\n                    if (!className || $html.is(className) || $html.hasClass(className)) {\r\n                        startId = item._id;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return startId;\r\n        }\r\n\r\n    });\r\n\r\n    Adapt.once(\"adapt:start\", function() {\r\n        var startController = new StartController();\r\n        startController.setStartLocation();\r\n    });\r\n\r\n    return StartController;\r\n\r\n});\r\n\n","define('core/js/enums/logLevelEnum',[],function() {\r\n\r\n    // Used to determine if log call should be printed based on log level\r\n    var LOG_LEVEL = ENUM([\r\n        \"DEBUG\",\r\n        \"INFO\",\r\n        \"WARN\",\r\n        \"ERROR\",\r\n        \"FATAL\"\r\n    ]);\r\n\r\n    return LOG_LEVEL;\r\n\r\n});\n","define('core/js/logging',[\r\n    'core/js/adapt',\r\n    'core/js/enums/logLevelEnum'\r\n], function(Adapt, LOG_LEVEL) {\r\n\r\n    var Logging = Backbone.Controller.extend({\r\n\r\n        _config: {\r\n            _isEnabled: true,\r\n            _level: LOG_LEVEL.INFO.asLowerCase, // Default log level\r\n            _console: true // Log to console\r\n        },      \r\n        \r\n        initialize: function() {\r\n\r\n            Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));\r\n\r\n        },\r\n        \r\n        onLoadCourseData: function() {\r\n\r\n            this.loadConfig();\r\n\r\n            this.debug('Logging config loaded');\r\n\r\n            this.trigger('log:ready');\r\n\r\n        },\r\n\r\n        loadConfig: function() {\r\n\r\n            if (Adapt.config.has('_logging')) {\r\n                this._config = Adapt.config.get('_logging');\r\n            }\r\n\r\n            this.checkQueryStringOverride();\r\n\r\n        },\r\n\r\n        checkQueryStringOverride: function() {\r\n\r\n            // Override default log level with level present in query string\r\n            var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);\r\n            if (!matches || matches.length < 2) return;\r\n\r\n            var override = LOG_LEVEL(matches[1].toUpperCase());\r\n            if (!override) return;\r\n\r\n            this._config._level = override.asLowerCase;\r\n            this.debug('Loglevel override in query string:', this._config._level);\r\n            \r\n        },\r\n        \r\n        debug: function() {            \r\n            this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));\r\n        },\r\n        \r\n        info: function() {\r\n            this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));\r\n        },\r\n        \r\n        warn: function() {\r\n            this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));\r\n        },\r\n        \r\n        error: function() {\r\n            this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));\r\n        },\r\n        \r\n        fatal: function() {\r\n            this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));\r\n        },\r\n        \r\n        _log: function(level, data) {\r\n\r\n            var isEnabled = (this._config._isEnabled);\r\n            if (!isEnabled) return;\r\n\r\n            var configLevel = LOG_LEVEL(this._config._level.toUpperCase());\r\n\r\n            var isLogLevelAllowed = (level >= configLevel);\r\n            if (!isLogLevelAllowed) return;\r\n\r\n            this._logToConsole(level, data);\r\n\r\n            // Allow error reporting plugins to hook and report to logging systems\r\n            this.trigger('log', level, data);\r\n            this.trigger('log:' + level.asLowerCase, level, data);\r\n\r\n        },\r\n\r\n        _logToConsole: function(level, data) {\r\n\r\n            var shouldLogToConsole = (this._config._console);\r\n            if (!shouldLogToConsole) return;\r\n\r\n            var log = [level.asUpperCase + ':'];\r\n            data && log.push.apply(log, data);\r\n\r\n            // is there a matching console method we can use e.g. console.error()?\r\n            if(console[level.asLowerCase]) {\r\n                console[level.asLowerCase].apply(console, log);\r\n            } else {\r\n                console.log.apply(console, log);\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    Adapt.log = new Logging();\r\n});\r\n\n","define('core/js/models/buildModel',[\r\n    'core/js/adapt',\r\n    'core/js/logging'\r\n], function (Adapt) {\r\n\r\n    var BuildModel = Backbone.Model.extend({\r\n\r\n        defaults: {\r\n            jsonext: 'json'\r\n        },\r\n\r\n        initialize: function(attrs, options) {\r\n            this.url = options.url;\r\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\r\n            // Then check if course files can load\r\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\r\n            this.fetch({\r\n                success: _.bind(function() {\r\n                    this.isLoaded = true;\r\n                    Adapt.trigger('buildModel:dataLoaded');\r\n                }, this),\r\n                error: function() {\r\n                    console.log('Unable to load adapt/js/build.js');\r\n                    Adapt.trigger('buildModel:dataLoaded');\r\n                }\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    return BuildModel;\r\n\r\n});\n","define('core/js/models/adaptModel',[\r\n    'core/js/adapt',\r\n    'core/js/logging'\r\n], function (Adapt) {\r\n\r\n    var AdaptModel = Backbone.Model.extend({\r\n\r\n        defaults: {\r\n            _canShowFeedback: true,\r\n            _classes: \"\",\r\n            _canReset: false,\r\n            _isComplete: false,\r\n            _isInteractionComplete: false,\r\n            _isA11yRegionEnabled: false,\r\n            _isA11yCompletionDescriptionEnabled: true,\r\n            _requireCompletionOf: -1,\r\n            _isEnabled: true,\r\n            _isResetOnRevisit: false,\r\n            _isAvailable: true,\r\n            _isOptional: false,\r\n            _isReady: false,\r\n            _isVisible: true,\r\n            _isLocked: false,\r\n            _isHidden: false\r\n        },\r\n\r\n        trackable: [\r\n            '_id',\r\n            '_isComplete',\r\n            '_isInteractionComplete'\r\n        ],\r\n\r\n        initialize: function () {\r\n            // Wait until data is loaded before setting up model\r\n            this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);\r\n\r\n        },\r\n\r\n        setupModel: function() {\r\n            if (this.get('_type') === 'page') {\r\n                this._children = 'articles';\r\n            }\r\n            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {\r\n                this._parent = 'contentObjects';\r\n            }\r\n            if (this._children) {\r\n                this.setupChildListeners();\r\n            }\r\n\r\n            this.init();\r\n\r\n            _.defer(function() {\r\n                if (this._children) {\r\n                    this.checkCompletionStatus();\r\n\r\n                    this.checkInteractionCompletionStatus();\r\n\r\n                    this.checkLocking();\r\n                }\r\n\r\n                this.setupTrackables();\r\n\r\n            }.bind(this));\r\n\r\n        },\r\n\r\n        setupTrackables: function() {\r\n\r\n            // Limit state trigger calls and make state change callbacks batched-asynchronous\r\n            var originalTrackableStateFunction = this.triggerTrackableState;\r\n            this.triggerTrackableState = _.compose(\r\n                function() {\r\n\r\n                    // Flag that the function is awaiting trigger\r\n                    this.triggerTrackableState.isQueued = true;\r\n\r\n                }.bind(this),\r\n                _.debounce(function() {\r\n\r\n                    // Trigger original function\r\n                    originalTrackableStateFunction.apply(this);\r\n\r\n                    // Unset waiting flag\r\n                    this.triggerTrackableState.isQueued = false;\r\n\r\n                }.bind(this), 17)\r\n            );\r\n\r\n            // Listen to model changes, trigger trackable state change when appropriate\r\n            this.listenTo(this, \"change\", function(model, value) {\r\n\r\n                // Skip if trigger queued or adapt hasn't started yet\r\n                if (this.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {\r\n                    return;\r\n                }\r\n\r\n                // Check that property is trackable\r\n                var trackablePropertyNames = _.result(this, 'trackable', []);\r\n                var changedPropertyNames = _.keys(model.changed);\r\n                var isTrackable = _.find(changedPropertyNames, function(item, index) {\r\n                    return _.contains(trackablePropertyNames, item);\r\n                }.bind(this));\r\n\r\n                if (isTrackable) {\r\n                    // Trigger trackable state change\r\n                    this.triggerTrackableState();\r\n                }\r\n            });\r\n        },\r\n\r\n        setupChildListeners: function() {\r\n            var children = this.getChildren();\r\n            if (!children.length) {\r\n                return;\r\n            }\r\n\r\n            this.listenTo(children, {\r\n                \"change:_isReady\": this.checkReadyStatus,\r\n                \"change:_isComplete\": this.onIsComplete,\r\n                \"change:_isInteractionComplete\": this.checkInteractionCompletionStatus\r\n            });\r\n        },\r\n\r\n        init: function() {},\r\n\r\n        getTrackableState: function() {\r\n\r\n            var trackable = this.resultExtend(\"trackable\", []);\r\n            var json = this.toJSON();\r\n\r\n            var args = trackable;\r\n            args.unshift(json);\r\n\r\n            return _.pick.apply(_, args);\r\n\r\n        },\r\n\r\n        setTrackableState: function(state) {\r\n\r\n            var trackable = this.resultExtend(\"trackable\", []);\r\n\r\n            var args = trackable;\r\n            args.unshift(state);\r\n\r\n            state = _.pick.apply(_, args);\r\n\r\n            this.set(state);\r\n\r\n            return this;\r\n\r\n        },\r\n\r\n        triggerTrackableState: function() {\r\n\r\n            Adapt.trigger(\"state:change\", this, this.getTrackableState());\r\n\r\n        },\r\n\r\n        reset: function(type, force) {\r\n            if (!this.get(\"_canReset\") && !force) return;\r\n\r\n            type = type || true;\r\n\r\n            switch (type) {\r\n            case \"hard\": case true:\r\n                this.set({\r\n                    _isEnabled: true,\r\n                    _isComplete: false,\r\n                    _isInteractionComplete: false\r\n                });\r\n                break;\r\n            case \"soft\":\r\n                this.set({\r\n                    _isEnabled: true,\r\n                    _isInteractionComplete: false\r\n                });\r\n                break;\r\n            }\r\n        },\r\n\r\n        checkReadyStatus: function () {\r\n            // Filter children based upon whether they are available\r\n            // Check if any return _isReady:false\r\n            // If not - set this model to _isReady: true\r\n            var children = this.getAvailableChildModels();\r\n            if (_.find(children, function(child) { return child.get('_isReady') === false; })) {\r\n                return;\r\n            }\r\n\r\n            this.set('_isReady', true);\r\n        },\r\n\r\n        setCompletionStatus: function() {\r\n            if (!this.get('_isVisible')) return;\r\n\r\n            this.set({\r\n                _isComplete: true,\r\n                _isInteractionComplete: true\r\n            });\r\n        },\r\n\r\n        checkCompletionStatus: function () {\r\n            //defer to allow other change:_isComplete handlers to fire before cascading to parent\r\n            Adapt.checkingCompletion();\r\n            _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');\r\n        },\r\n\r\n        checkInteractionCompletionStatus: function () {\r\n            //defer to allow other change:_isInteractionComplete handlers to fire before cascading to parent\r\n            Adapt.checkingCompletion();\r\n            _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');\r\n        },\r\n\r\n        /**\r\n         * Function for checking whether the supplied completion attribute should be set to true or false.\r\n         * It iterates over our immediate children, checking the same completion attribute on any mandatory child\r\n         * to see if enough/all of them them have been completed. If enough/all have, we set our attribute to true;\r\n         * if not, we set it to false.\r\n         * @param {string} [completionAttribute] Either \"_isComplete\" or \"_isInteractionComplete\". Defaults to \"_isComplete\" if not supplied.\r\n         */\r\n        checkCompletionStatusFor: function(completionAttribute) {\r\n            if (!completionAttribute) completionAttribute = \"_isComplete\";\r\n\r\n            var completed = false;\r\n            var children = this.getAvailableChildModels();\r\n            var requireCompletionOf = this.get(\"_requireCompletionOf\");\r\n\r\n            if (requireCompletionOf === -1) { // a value of -1 indicates that ALL mandatory children must be completed\r\n                completed = (_.find(children, function(child) {\r\n                    return !child.get(completionAttribute) && !child.get('_isOptional');\r\n                }) === undefined);\r\n            } else {\r\n                completed = (_.filter(children, function(child) {\r\n                    return child.get(completionAttribute) && !child.get('_isOptional');\r\n                }).length >= requireCompletionOf);\r\n            }\r\n\r\n            this.set(completionAttribute, completed);\r\n\r\n            Adapt.checkedCompletion();\r\n        },\r\n\r\n        /**\r\n         * Searches the model's ancestors to find the first instance of the specified ancestor type\r\n         * @param {string} [ancestorType] Valid values are 'course', 'pages', 'contentObjects', 'articles' or 'blocks'.\r\n         * If left blank, the immediate ancestor (if there is one) is returned\r\n         * @return {object} Reference to the model of the first ancestor of the specified type that's found - or `undefined` if none found\r\n         */\r\n        findAncestor: function (ancestorType) {\r\n            var parent = this.getParent();\r\n            if (!parent) return;\r\n\r\n            if (ancestorType === 'pages') {\r\n                ancestorType = 'contentObjects';\r\n            }\r\n\r\n            if (!ancestorType || this._parent === ancestorType) {\r\n                return parent;\r\n            }\r\n\r\n            return parent.findAncestor(ancestorType);\r\n        },\r\n\r\n        /**\r\n         * Returns all the descendant models of a specific type\r\n         * @param {string} descendants Valid values are 'contentObjects', 'pages', 'menus', 'articles', 'blocks' or 'components'\r\n         * @param {object} options an object that defines the search type and the properties/values to search on. Currently only the `where` search type (equivalent to `Backbone.Collection.where()`) is supported.\r\n         * @param {object} options.where\r\n         * @return {array}\r\n         * @example\r\n         * //find all available, non-optional components\r\n         * this.findDescendantModels('components', { where: { _isAvailable: true, _isOptional: false }});\r\n         */\r\n        findDescendantModels: function(descendants, options) {\r\n\r\n            var types = [\r\n                descendants.slice(0, -1)\r\n            ];\r\n            if (descendants === 'contentObjects') {\r\n                types.push.apply(types, ['page', 'menu']);\r\n            }\r\n\r\n            var allDescendantsModels = this.getAllDescendantModels();\r\n            var returnedDescendants = allDescendantsModels.filter(function(model) {\r\n                return _.contains(types, model.get(\"_type\"));\r\n            });\r\n\r\n            if (!options) {\r\n                return returnedDescendants;\r\n            }\r\n\r\n            if (options.where) {\r\n                return returnedDescendants.filter(function(descendant) {\r\n                    for (var property in options.where) {\r\n                        var value = options.where[property];\r\n                        if (descendant.get(property) !== value) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Fetches the sub structure of a model as a flattened array\r\n         *\r\n         * Such that the tree:\r\n         *  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\r\n         *\r\n         * will become the array (parent first = false):\r\n         *  [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]\r\n         *\r\n         * or (parent first = true):\r\n         *  [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]\r\n         *\r\n         * This is useful when sequential operations are performed on the menu/page/article/block/component hierarchy.\r\n         * @param {boolean} [isParentFirst]\r\n         * @return {array}\r\n         */\r\n        getAllDescendantModels: function(isParentFirst) {\r\n\r\n            var descendants = [];\r\n\r\n            if (this.get(\"_type\") === \"component\") {\r\n                descendants.push(this);\r\n                return descendants;\r\n            }\r\n\r\n            var children = this.getChildren();\r\n\r\n            for (var i = 0, l = children.models.length; i < l; i++) {\r\n\r\n                var child = children.models[i];\r\n                if (child.get(\"_type\") === \"component\") {\r\n\r\n                    descendants.push(child);\r\n                    continue;\r\n\r\n                }\r\n\r\n                var subDescendants = child.getAllDescendantModels(isParentFirst);\r\n                if (isParentFirst === true) {\r\n                    descendants.push(child);\r\n                }\r\n\r\n                descendants = descendants.concat(subDescendants);\r\n\r\n                if (isParentFirst !== true) {\r\n                    descendants.push(child);\r\n                }\r\n\r\n            }\r\n\r\n            return descendants;\r\n\r\n        },\r\n\r\n        /**\r\n         * @deprecated Since v2.2.0 - please use findDescendantModels instead\r\n         */\r\n        findDescendants: function (descendants) {\r\n            Adapt.log.warn(\"DEPRECATED - Use findDescendantModels() as findDescendants() may be removed in the future\");\r\n\r\n            // first check if descendant is child and return child\r\n            if (this._children === descendants) {\r\n                return this.getChildren();\r\n            }\r\n\r\n            var allDescendants = [];\r\n            var flattenedDescendants;\r\n            var children = this.getChildren();\r\n            var returnedDescendants;\r\n\r\n            function searchChildren(children) {\r\n                var models = children.models;\r\n                for (var i = 0, len = models.length; i < len; i++) {\r\n                    var model = models[i];\r\n                    var childrensModels = model.getChildren().models;\r\n                    allDescendants.push(childrensModels);\r\n                    flattenedDescendants = _.flatten(allDescendants);\r\n                }\r\n\r\n                returnedDescendants = new Backbone.Collection(flattenedDescendants);\r\n\r\n                if (children.models.length === 0 || children.models[0]._children === descendants) {\r\n                    return;\r\n                } else {\r\n                    allDescendants = [];\r\n                    searchChildren(returnedDescendants);\r\n                }\r\n            }\r\n\r\n            searchChildren(children);\r\n\r\n            // returns a collection of children\r\n            return returnedDescendants;\r\n        },\r\n\r\n        /**\r\n         * Returns a relative model from the Adapt hierarchy\r\n         *\r\n         * Such that in the tree:\r\n         *  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\r\n         *\r\n         *  c1.findRelativeModel(\"@block +1\") = b2;\r\n         *  c1.findRelativeModel(\"@component +4\") = c5;\r\n         *\r\n         * @see Adapt.parseRelativeString for a description of relativeStrings\r\n         * @param {string} relativeString\r\n         * @param {object} options Search configuration settings\r\n         * @param {boolean} options.limitParentId\r\n         * @param {function} options.filter\r\n         * @param {boolean} options.loop\r\n         * @return {array}\r\n         */\r\n        findRelativeModel: function(relativeString, options) {\r\n\r\n            var types = [ \"menu\", \"page\", \"article\", \"block\", \"component\" ];\r\n\r\n            options = options || {};\r\n\r\n            var modelId = this.get(\"_id\");\r\n            var modelType = this.get(\"_type\");\r\n\r\n            // return a model relative to the specified one if opinionated\r\n            var rootModel = Adapt.course;\r\n            if (options.limitParentId) {\r\n                rootModel = Adapt.findById(options.limitParentId);\r\n            }\r\n\r\n            var relativeDescriptor = Adapt.parseRelativeString(relativeString);\r\n\r\n            var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));\r\n            var findSiblingType = (modelType === relativeDescriptor.type);\r\n\r\n            var searchBackwards = (relativeDescriptor.offset < 0);\r\n            var moveBy = Math.abs(relativeDescriptor.offset);\r\n            var movementCount = 0;\r\n\r\n            var findDescendantType = (!findSiblingType && !findAncestorType);\r\n\r\n            var pageDescendants;\r\n            if (searchBackwards) {\r\n                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]\r\n                pageDescendants = rootModel.getAllDescendantModels(true);\r\n\r\n                // reverse so that we don't need a forward and a backward iterating loop\r\n                // reversed [c9,c8,b4,a4,c7,c6,b3,a3,p2,c4,c3,b2,a2,c2,c1,b1,a1,p1]\r\n                pageDescendants.reverse();\r\n\r\n                if (findDescendantType) {\r\n                    // move by one less as ordering allows\r\n                    moveBy-=1;\r\n                }\r\n\r\n            } else if (findDescendantType) {\r\n                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]\r\n                pageDescendants = rootModel.getAllDescendantModels(true);\r\n            } else if (findSiblingType || findAncestorType) {\r\n                // children first [c1,c2,b1,a1,c3,c4,b2,a2,p1,c6,c7,b3,a3,c8,c9,b4,a4,p2]\r\n                pageDescendants = rootModel.getAllDescendantModels(false);\r\n            }\r\n\r\n            // filter if opinionated\r\n            if (typeof options.filter === \"function\") {\r\n                pageDescendants = _.filter(pageDescendants, options.filter);\r\n            }\r\n\r\n            // find current index in array\r\n            var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {\r\n                if (pageDescendant.get(\"_id\") === modelId) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n\r\n            if (options.loop) {\r\n\r\n                // normalize offset position to allow for overflow looping\r\n                var typeCounts = {};\r\n                pageDescendants.forEach(function(model) {\r\n                    var type = model.get(\"_type\");\r\n                    typeCounts[type] = typeCounts[type] || 0;\r\n                    typeCounts[type]++;\r\n                });\r\n                moveBy = moveBy % typeCounts[relativeDescriptor.type];\r\n\r\n                // double up entries to allow for overflow looping\r\n                pageDescendants = pageDescendants.concat(pageDescendants.slice(0));\r\n\r\n            }\r\n\r\n            for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {\r\n                var descendant = pageDescendants[i];\r\n                if (descendant.get(\"_type\") === relativeDescriptor.type) {\r\n                    if (movementCount === moveBy) {\r\n                        return Adapt.findById(descendant.get(\"_id\"));\r\n                    }\r\n                    movementCount++;\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        },\r\n\r\n        getChildren: function () {\r\n            if (this.get(\"_children\")) return this.get(\"_children\");\r\n\r\n            var childrenCollection;\r\n\r\n            if (!this._children) {\r\n                childrenCollection = new Backbone.Collection();\r\n            } else {\r\n                var children = Adapt[this._children].where({_parentId: this.get(\"_id\")});\r\n                childrenCollection = new Backbone.Collection(children);\r\n            }\r\n\r\n            if (this.get('_type') == 'block' &&\r\n                childrenCollection.length == 2 &&\r\n                childrenCollection.models[0].get('_layout') !== 'left' &&\r\n                this.get('_sortComponents') !== false) {\r\n                // Components may have a 'left' or 'right' _layout,\r\n                // so ensure they appear in the correct order\r\n                // Re-order component models to correct it\r\n                childrenCollection.comparator = '_layout';\r\n                childrenCollection.sort();\r\n            }\r\n\r\n            this.set(\"_children\", childrenCollection);\r\n\r\n            return childrenCollection;\r\n        },\r\n\r\n        getAvailableChildModels: function() {\r\n            return this.getChildren().where({\r\n                _isAvailable: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @deprecated since v2.2.0 please use getAvailableChildModels instead\r\n         */\r\n        getAvailableChildren: function() {\r\n            Adapt.log.warn(\"DEPRECATED - Use getAvailableChildModels() as getAvailableChildren() may be removed in the future\");\r\n\r\n            return new Backbone.Collection(this.getChildren().where({\r\n                _isAvailable: true\r\n            }));\r\n        },\r\n\r\n        getParent: function () {\r\n            if (this.get(\"_parent\")) return this.get(\"_parent\");\r\n            if (this._parent === \"course\") {\r\n                return Adapt.course;\r\n            }\r\n            var parent = Adapt.findById(this.get(\"_parentId\"));\r\n            this.set(\"_parent\", parent);\r\n\r\n            // returns a parent model\r\n            return parent;\r\n        },\r\n\r\n        getAncestorModels: function(shouldIncludeChild) {\r\n            var parents = [];\r\n            var context = this;\r\n\r\n            if (shouldIncludeChild) parents.push(context);\r\n\r\n            while (context.has(\"_parentId\")) {\r\n                context = context.getParent();\r\n                parents.push(context);\r\n            }\r\n\r\n            return parents.length ? parents : null;\r\n        },\r\n\r\n        /**\r\n         * @deprecated since v2.2.0 please use getAncestorModels instead\r\n         */\r\n        getParents: function(shouldIncludeChild) {\r\n            Adapt.log.warn(\"DEPRECATED - Use getAncestorModels() as getParents() may be removed in the future\");\r\n\r\n            var parents = [];\r\n            var context = this;\r\n\r\n            if (shouldIncludeChild) parents.push(context);\r\n\r\n            while (context.has(\"_parentId\")) {\r\n                context = context.getParent();\r\n                parents.push(context);\r\n            }\r\n\r\n            return parents.length ? new Backbone.Collection(parents) : null;\r\n        },\r\n\r\n        getSiblings: function (passSiblingsAndIncludeSelf) {\r\n            var siblings;\r\n            if (!passSiblingsAndIncludeSelf) {\r\n                // returns a collection of siblings excluding self\r\n                if (this._hasSiblingsAndSelf === false) {\r\n                    return this.get(\"_siblings\");\r\n                }\r\n                siblings = _.reject(Adapt[this._siblings].where({\r\n                    _parentId: this.get('_parentId')\r\n                }), function (model) {\r\n                    return model.get('_id') == this.get('_id');\r\n                }.bind(this));\r\n\r\n                this._hasSiblingsAndSelf = false;\r\n\r\n            } else {\r\n                // returns a collection of siblings including self\r\n                if (this._hasSiblingsAndSelf) {\r\n                    return this.get(\"_siblings\");\r\n                }\r\n\r\n                siblings = Adapt[this._siblings].where({\r\n                    _parentId: this.get(\"_parentId\")\r\n                });\r\n                this._hasSiblingsAndSelf = true;\r\n            }\r\n\r\n            var siblingsCollection = new Backbone.Collection(siblings);\r\n            this.set(\"_siblings\", siblingsCollection);\r\n            return siblingsCollection;\r\n        },\r\n\r\n        setOnChildren: function (key, value, options) {\r\n\r\n            var args = arguments;\r\n\r\n            this.set.apply(this, args);\r\n\r\n            if (!this._children) return;\r\n\r\n            var children = this.getChildren();\r\n            var models = children.models;\r\n            for (var i = 0, len = models.length; i < len; i++) {\r\n                var child = models[i];\r\n                child.setOnChildren.apply(child, args);\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @deprecated since v3.2.3 - please use `model.set('_isOptional', value)` instead\r\n         */\r\n        setOptional: function(value) {\r\n            this.set({_isOptional: value});\r\n        },\r\n\r\n        checkLocking: function() {\r\n            var lockType = this.get(\"_lockType\");\r\n\r\n            if (!lockType) return;\r\n\r\n            switch (lockType) {\r\n                case \"sequential\":\r\n                    this.setSequentialLocking();\r\n                    break;\r\n                case \"unlockFirst\":\r\n                    this.setUnlockFirstLocking();\r\n                    break;\r\n                case \"lockLast\":\r\n                    this.setLockLastLocking();\r\n                    break;\r\n                case \"custom\":\r\n                    this.setCustomLocking();\r\n                    break;\r\n                default:\r\n                    console.warn(\"AdaptModel.checkLocking: unknown _lockType \\\"\" +\r\n                        lockType + \"\\\" found on \" + this.get(\"_id\"));\r\n            }\r\n        },\r\n\r\n        setSequentialLocking: function() {\r\n            var children = this.getAvailableChildModels();\r\n\r\n            for (var i = 1, j = children.length; i < j; i++) {\r\n                children[i].set(\"_isLocked\", !children[i - 1].get(\"_isComplete\"));\r\n            }\r\n        },\r\n\r\n        setUnlockFirstLocking: function() {\r\n            var children = this.getAvailableChildModels();\r\n            var isFirstChildComplete = children[0].get(\"_isComplete\");\r\n\r\n            for (var i = 1, j = children.length; i < j; i++) {\r\n                children[i].set(\"_isLocked\", !isFirstChildComplete);\r\n            }\r\n        },\r\n\r\n        setLockLastLocking: function() {\r\n            var children = this.getAvailableChildModels();\r\n            var lastIndex = children.length - 1;\r\n\r\n            for (var i = lastIndex - 1; i >= 0; i--) {\r\n                if (!children[i].get(\"_isComplete\")) {\r\n                    return children[lastIndex].set(\"_isLocked\", true);\r\n                }\r\n            }\r\n\r\n            children[lastIndex].set(\"_isLocked\", false);\r\n        },\r\n\r\n        setCustomLocking: function() {\r\n            var children = this.getAvailableChildModels();\r\n\r\n            for (var i = 0, j = children.length; i < j; i++) {\r\n                var child = children[i];\r\n\r\n                child.set(\"_isLocked\", this.shouldLock(child));\r\n            }\r\n        },\r\n\r\n        shouldLock: function(child) {\r\n            var lockedBy = child.get(\"_lockedBy\");\r\n\r\n            if (!lockedBy) return false;\r\n\r\n            for (var i = lockedBy.length - 1; i >= 0; i--) {\r\n                var id = lockedBy[i];\r\n\r\n                try {\r\n                    var model = Adapt.findById(id);\r\n\r\n                    if (!model.get(\"_isAvailable\")) continue;\r\n                    if (!model.get(\"_isComplete\")) return true;\r\n                }\r\n                catch (e) {\r\n                    console.warn(\"AdaptModel.shouldLock: unknown _lockedBy ID \\\"\" + id +\r\n                        \"\\\" found on \" + child.get(\"_id\"));\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        onIsComplete: function() {\r\n            this.checkCompletionStatus();\r\n\r\n            this.checkLocking();\r\n        }\r\n\r\n    });\r\n\r\n    return AdaptModel;\r\n\r\n});\r\n\n","define('core/js/models/articleModel',[\r\n    'core/js/models/adaptModel'\r\n], function (AdaptModel) {\r\n\r\n    var ArticleModel = AdaptModel.extend({\r\n        _parent:'contentObjects',\r\n    \t_siblings:'articles',\r\n        _children: 'blocks'\r\n    });\r\n\r\n    return ArticleModel;\r\n\r\n});\r\n\n","define('core/js/models/blockModel',[\r\n    'core/js/models/adaptModel'\r\n], function (AdaptModel) {\r\n\r\n    var BlockModel = AdaptModel.extend({\r\n        _parent:'articles',\r\n    \t_siblings:'blocks',\r\n        _children: 'components',\r\n\r\n        defaults: function() {\r\n            return _.extend({\r\n                _sortComponents: true\r\n            }, AdaptModel.prototype.defaults);\r\n        }\r\n    });\r\n\r\n    return BlockModel;\r\n\r\n});\r\n\n","define('core/js/models/configModel',[\r\n    'core/js/adapt'\r\n], function (Adapt) {\r\n\r\n    var ConfigModel = Backbone.Model.extend({\r\n\r\n        defaults: {\r\n            screenSize: {\r\n                small: 520,\r\n                medium: 760,\r\n                large: 1024\r\n            },\r\n            _forceRouteLocking: false,\r\n            _canLoadData: true,\r\n            _disableAnimation: false\r\n        },\r\n\r\n        initialize: function(attrs, options) {\r\n            this.url = options.url;\r\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\r\n            // Then check if course files can load\r\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\r\n            this.fetch({\r\n                success: function() {\r\n                    Adapt.trigger('offlineStorage:prepare');\r\n\r\n                    Adapt.wait.queue(function() {\r\n\r\n                        Adapt.trigger('configModel:dataLoaded');\r\n\r\n                        if (this.get('_canLoadData')) {\r\n                            Adapt.trigger('configModel:loadCourseData');\r\n                        }\r\n\r\n                        if (this.get('_defaultDirection') === 'rtl'){\r\n                            // We're going to use rtl style\r\n                            $('html').addClass('dir-rtl');\r\n                        }\r\n\r\n                        // Check if animations should be disabled\r\n                        var disableAnimationArray = this.get('_disableAnimationFor');\r\n                        if (disableAnimationArray && disableAnimationArray.length > 0) {\r\n                            for (var i = 0; i < disableAnimationArray.length; i++) {\r\n                                if ($(\"html\").is(disableAnimationArray[i])) {\r\n                                    this.set('_disableAnimation', true);\r\n                                    console.log('Animation disabled.');\r\n                                }\r\n                            }\r\n                        }\r\n                    }.bind(this));\r\n                }.bind(this),\r\n                error: function() {\r\n                    console.log('Unable to load course/config.json');\r\n                }\r\n            });\r\n        },\r\n\r\n        loadData: function() {\r\n\r\n        }\r\n\r\n    });\r\n\r\n   return ConfigModel;\r\n\r\n});\r\n\n","define('core/js/models/contentObjectModel',[\r\n    'core/js/models/adaptModel'\r\n], function (AdaptModel) {\r\n\r\n    var ContentObjectModel = AdaptModel.extend({\r\n    \t_parent:'course',\r\n    \t_siblings:'contentObjects',\r\n        _children: 'contentObjects'\r\n    });\r\n\r\n    return ContentObjectModel;\r\n});\r\n\n","define('core/js/models/componentModel',[\r\n    'core/js/models/adaptModel'\r\n], function (AdaptModel) {\r\n\r\n    var ComponentModel = AdaptModel.extend({\r\n        _parent:'blocks',\r\n        _siblings:'components',\r\n\r\n        defaults: AdaptModel.resultExtend('defaults', {\r\n            _isA11yComponentDescriptionEnabled: true\r\n        }),\r\n\r\n        trackable: AdaptModel.resultExtend(\"trackable\", [\r\n            '_userAnswer'\r\n        ])\r\n\r\n    });\r\n\r\n    return ComponentModel;\r\n\r\n});\r\n\n","define('core/js/models/courseModel',[\r\n    'core/js/adapt',\r\n    'core/js/models/adaptModel'\r\n], function (Adapt, AdaptModel) {\r\n\r\n    var CourseModel = AdaptModel.extend({\r\n\r\n        initialize: function(attrs, options) {\r\n            AdaptModel.prototype.initialize.apply(this, arguments);\r\n            Adapt.trigger('courseModel:dataLoading');\r\n\r\n            this.url = options.url;\r\n\r\n            this.on('sync', this.loadedData, this);\r\n            if (this.url) {\r\n                this.fetch({\r\n                    error: _.bind(function(model, xhr, options) {\r\n                        console.error(\"ERROR: unable to load file \" + this.url);\r\n                    }, this)\r\n                });\r\n            }\r\n        },\r\n\r\n        loadedData: function() {\r\n            Adapt.trigger('courseModel:dataLoaded');\r\n        },\r\n\r\n        _children: \"contentObjects\"\r\n\r\n    });\r\n\r\n    return CourseModel;\r\n\r\n});\r\n\n","define('core/js/enums/buttonStateEnum',[],function() {\r\n\r\n    var BUTTON_STATE = ENUM([\r\n        'SUBMIT',\r\n        'CORRECT',\r\n        'INCORRECT',\r\n        'SHOW_CORRECT_ANSWER',\r\n        'HIDE_CORRECT_ANSWER',\r\n        'SHOW_FEEDBACK',\r\n        'RESET'\r\n    ]);\r\n\r\n    return BUTTON_STATE;\r\n\r\n});\n","define('core/js/models/questionModel',[\r\n    'core/js/adapt',\r\n    'core/js/models/componentModel',\r\n    'core/js/enums/buttonStateEnum'\r\n], function(Adapt, ComponentModel, BUTTON_STATE) {\r\n\r\n    var QuestionModel = ComponentModel.extend({\r\n\r\n        //////\r\n        // Setup question types\r\n        ////\r\n\r\n        // Used to set model defaults\r\n        defaults: function() {\r\n            // Extend from the ComponentModel defaults\r\n            return ComponentModel.resultExtend(\"defaults\", {\r\n                _isQuestionType: true,\r\n                _shouldDisplayAttempts: false,\r\n                _canShowModelAnswer: true,\r\n                _canShowFeedback: true,\r\n                _canShowMarking: true,\r\n                _isSubmitted: false,\r\n                _questionWeight: Adapt.config.get(\"_questionWeight\"),\r\n            });\r\n        },\r\n\r\n        // Extend from the ComponentModel trackable\r\n        trackable: ComponentModel.resultExtend(\"trackable\", [\r\n            '_isSubmitted',\r\n            '_score',\r\n            '_isCorrect',\r\n            '_attemptsLeft'\r\n        ]),\r\n\r\n        init: function() {\r\n            this.setupDefaultSettings();\r\n            this.listenToOnce(Adapt, \"adapt:initialize\", this.onAdaptInitialize);\r\n        },\r\n\r\n        // Calls default methods to setup on questions\r\n        setupDefaultSettings: function() {\r\n            // Not sure this is needed anymore, keeping to maintain API\r\n            this.setupWeightSettings();\r\n            this.setupButtonSettings();\r\n        },\r\n\r\n        // Used to setup either global or local button text\r\n        setupButtonSettings: function() {\r\n            var globalButtons = Adapt.course.get(\"_buttons\");\r\n\r\n            // Check if  '_buttons' attribute exists and if not use the globally defined buttons.\r\n            if (!this.has(\"_buttons\")) {\r\n                this.set(\"_buttons\", globalButtons);\r\n            } else {\r\n                // Check all the components buttons.\r\n                // If they are empty use the global defaults.\r\n                var componentButtons = this.get(\"_buttons\");\r\n\r\n                for (var key in componentButtons) {\r\n                    if (typeof componentButtons[key] === 'object') {\r\n                        // Button text.\r\n                        if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {\r\n                            componentButtons[key].buttonText = globalButtons[key].buttonText;\r\n                        }\r\n\r\n                        // ARIA labels.\r\n                        if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {\r\n                            componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;\r\n                        }\r\n                    }\r\n\r\n                    if (!componentButtons[key] && globalButtons[key]) {\r\n                        componentButtons[key] = globalButtons[key];\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // Used to setup either global or local question weight/score\r\n        setupWeightSettings: function() {\r\n            // Not needed as handled by model defaults, keeping to maintain API\r\n        },\r\n\r\n        //////\r\n        // Selection restoration process\r\n        ////\r\n\r\n\r\n        // Used to add post-load changes to the model\r\n        onAdaptInitialize: function() {\r\n            this.restoreUserAnswers();\r\n        },\r\n\r\n        // Used to restore the user answers\r\n        restoreUserAnswers: function() {},\r\n\r\n\r\n        //////\r\n        // Submit process\r\n        ////\r\n\r\n        // Use to check if the user is allowed to submit the question\r\n        // Maybe the user has to select an item?\r\n        canSubmit: function() {},\r\n\r\n        // Used to update the amount of attempts the user has left\r\n        updateAttempts: function() {\r\n            if (!this.get('_attemptsLeft')) {\r\n                this.set(\"_attemptsLeft\", this.get('_attempts'));\r\n            }\r\n            this.set(\"_attemptsLeft\", this.get('_attemptsLeft') - 1);\r\n        },\r\n\r\n        // Used to set _isEnabled and _isSubmitted on the model\r\n        setQuestionAsSubmitted: function() {\r\n            this.set({\r\n                _isEnabled: false,\r\n                _isSubmitted: true\r\n            });\r\n        },\r\n\r\n        // This is important for returning or showing the users answer\r\n        // This should preserve the state of the users answers\r\n        storeUserAnswer: function() {},\r\n\r\n        // Sets _isCorrect:true/false based upon isCorrect method below\r\n        markQuestion: function() {\r\n\r\n            if (this.isCorrect()) {\r\n                this.set('_isCorrect', true);\r\n            } else {\r\n                this.set('_isCorrect', false);\r\n            }\r\n\r\n        },\r\n\r\n         // Should return a boolean based upon whether to question is correct or not\r\n        isCorrect: function() {},\r\n\r\n        // Used to set the score based upon the _questionWeight\r\n        setScore: function() {},\r\n\r\n        // Checks if the question should be set to complete\r\n        // Calls setCompletionStatus and adds complete classes\r\n        checkQuestionCompletion: function() {\r\n\r\n            var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);\r\n\r\n            if (isComplete) {\r\n                this.setCompletionStatus();\r\n            }\r\n\r\n            return isComplete;\r\n\r\n        },\r\n\r\n        // Updates buttons based upon question state by setting\r\n        // _buttonState on the model which buttonsView listens to\r\n        updateButtons: function() {\r\n\r\n            var isInteractionComplete = this.get('_isInteractionComplete');\r\n            var isCorrect = this.get('_isCorrect');\r\n            var isEnabled = this.get('_isEnabled');\r\n            var buttonState = this.get('_buttonState');\r\n            var canShowModelAnswer = this.get('_canShowModelAnswer');\r\n\r\n            if (isInteractionComplete) {\r\n\r\n                if (isCorrect || !canShowModelAnswer) {\r\n                    // Use correct instead of complete to signify button state\r\n                    this.set('_buttonState', BUTTON_STATE.CORRECT);\r\n\r\n                } else {\r\n\r\n                    switch (buttonState) {\r\n                        case BUTTON_STATE.SUBMIT:\r\n                        case BUTTON_STATE.HIDE_CORRECT_ANSWER:\r\n                            this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);\r\n                            break;\r\n                        default:\r\n                            this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (isEnabled) {\r\n                    this.set('_buttonState', BUTTON_STATE.SUBMIT);\r\n                } else {\r\n                    this.set('_buttonState', BUTTON_STATE.RESET);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        // Used to setup the correct, incorrect and partly correct feedback\r\n        setupFeedback: function() {\r\n            if (!this.has('_feedback')) return;\r\n\r\n            if (this.get('_isCorrect')) {\r\n                this.setupCorrectFeedback();\r\n            } else if (this.isPartlyCorrect()) {\r\n                this.setupPartlyCorrectFeedback();\r\n            } else {\r\n                this.setupIncorrectFeedback();\r\n            }\r\n        },\r\n\r\n        // Used by the question to determine if the question is incorrect or partly correct\r\n        // Should return a boolean\r\n        isPartlyCorrect: function() {},\r\n\r\n        setupCorrectFeedback: function() {\r\n            this.set({\r\n                feedbackTitle: this.getFeedbackTitle(),\r\n                feedbackMessage: this.get('_feedback').correct\r\n            });\r\n        },\r\n\r\n        setupPartlyCorrectFeedback: function() {\r\n            var feedback = this.get('_feedback')._partlyCorrect;\r\n\r\n            if (feedback && feedback.final) {\r\n                this.setAttemptSpecificFeedback(feedback);\r\n            } else {\r\n                this.setupIncorrectFeedback();\r\n            }\r\n        },\r\n\r\n        setupIncorrectFeedback: function() {\r\n            this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);\r\n        },\r\n\r\n        setAttemptSpecificFeedback: function(feedback) {\r\n            var body = this.get('_attemptsLeft') && feedback.notFinal || feedback.final;\r\n\r\n            this.set({\r\n                feedbackTitle: this.getFeedbackTitle(),\r\n                feedbackMessage: body\r\n            });\r\n        },\r\n\r\n        getFeedbackTitle: function() {\r\n            return this.get('_feedback').title || this.get('displayTitle') ||  this.get('title') || \"\";\r\n        },\r\n\r\n        /**\r\n         * Used to determine whether the learner is allowed to interact with the question component or not.\r\n         * @return {Boolean}\r\n         */\r\n        isInteractive: function() {\r\n            return !this.get('_isComplete') || (this.get('_isEnabled') && !this.get('_isSubmitted'));\r\n        },\r\n\r\n        // Reset the model to let the user have another go (not the same as attempts)\r\n        reset: function(type, force) {\r\n            if (!this.get(\"_canReset\") && !force) return;\r\n\r\n            type = type || true; //hard reset by default, can be \"soft\", \"hard\"/true\r\n\r\n            ComponentModel.prototype.reset.call(this, type, force);\r\n\r\n            var attempts = this.get('_attempts');\r\n            this.set({\r\n                _attemptsLeft: attempts,\r\n                _isCorrect: undefined,\r\n                _isSubmitted: false,\r\n                _buttonState: BUTTON_STATE.SUBMIT\r\n            });\r\n        },\r\n\r\n        // Reset question for subsequent attempts\r\n        setQuestionAsReset: function() {\r\n            this.set({\r\n                _isEnabled: true,\r\n                _isSubmitted: false\r\n            });\r\n        },\r\n\r\n        // Used by the question view to reset the stored user answer\r\n        resetUserAnswer: function() {},\r\n\r\n        refresh: function() {\r\n            this.trigger('question:refresh');\r\n        },\r\n\r\n        getButtonState: function() {\r\n            if (this.get('_isCorrect')) {\r\n                return BUTTON_STATE.CORRECT;\r\n            }\r\n\r\n            if (this.get('_attemptsLeft') === 0) {\r\n                 return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;\r\n            }\r\n\r\n            return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;\r\n        },\r\n\r\n        // Returns an object specific to the question type, e.g. if the question\r\n        // is a 'choice' this should contain an object with:\r\n        // - correctResponsesPattern[]\r\n        // - choices[]\r\n        getInteractionObject: function() {\r\n            return {};\r\n        },\r\n\r\n        // Returns a string detailing how the user answered the question.\r\n        getResponse: function() {},\r\n\r\n        // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\r\n        getResponseType: function() {}\r\n\r\n    });\r\n\r\n    return QuestionModel;\r\n\r\n});\r\n\n","define('core/js/views/navigationView',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var NavigationView = Backbone.View.extend({\r\n\r\n        className: \"navigation\",\r\n\r\n        initialize: function() {\r\n            this.listenToOnce(Adapt, {\r\n                'courseModel:dataLoading': this.remove\r\n            });\r\n            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);\r\n            this.template = \"navigation\";\r\n            this.preRender();\r\n        },\r\n\r\n        events: {\r\n            'click [data-event]':'triggerEvent'\r\n        },\r\n\r\n        attributes: {\r\n            'role': 'navigation'\r\n        },\r\n\r\n        preRender: function() {\r\n            Adapt.trigger('navigationView:preRender', this);\r\n            this.render();\r\n        },\r\n\r\n        render: function() {\r\n            var template = Handlebars.templates[this.template];\r\n            this.$el.html(template(\r\n                {\r\n                    _globals: Adapt.course.get(\"_globals\"),\r\n                    _accessibility: Adapt.config.get(\"_accessibility\")\r\n                }\r\n            )).insertBefore('#app');\r\n\r\n            _.defer(_.bind(function() {\r\n                Adapt.trigger('navigationView:postRender', this);\r\n            }, this));\r\n\r\n            return this;\r\n        },\r\n\r\n        triggerEvent: function(event) {\r\n            event.preventDefault();\r\n            var currentEvent = $(event.currentTarget).attr('data-event');\r\n            Adapt.trigger('navigation:' + currentEvent);\r\n        },\r\n\r\n        hideNavigationButton: function(model) {\r\n            if (model.get('_type') === \"course\") {\r\n                $('.navigation-back-button, .navigation-home-button').addClass('display-none');\r\n            } else {\r\n                this.showNavigationButton();\r\n            }\r\n        },\r\n\r\n        showNavigationButton: function() {\r\n            $('.navigation-back-button, .navigation-home-button').removeClass('display-none');\r\n        }\r\n\r\n    });\r\n\r\n    return NavigationView;\r\n\r\n});\r\n\n","define('core/js/accessibility',[\r\n    'core/js/adapt',\r\n    'a11y'\r\n], function(Adapt) {\r\n\r\n    var defaultAriaLevels = {\r\n        \"_menu\": 1,\r\n        \"_menuItem\": 2,\r\n        \"_page\": 1,\r\n        \"_article\": 2,\r\n        \"_block\": 3,\r\n        \"_component\": 4,\r\n        \"_componentItem\": 5\r\n    };\r\n\r\n    var Accessibility = Backbone.Controller.extend({\r\n\r\n        $html: $('html'),\r\n\r\n        initialize: function() {\r\n\r\n            this.removeLegacyElements();\r\n\r\n            this.listenToOnce(Adapt, {\r\n                //TRIGGER SETUP ON DATA LOADED\r\n                'app:dataLoaded': this.initialSetup,\r\n                //Configure the accessibility library\r\n                'app:dataReady': this.configureA11yLibrary,\r\n                'navigationView:postRender': this.removeLegacyElements\r\n            }, this);\r\n\r\n            //SETUP NO SELECT PARAMETERS ON DEVICE CHANGE\r\n            Adapt.on(\"device:changed\", this.setupNoSelect);\r\n\r\n            //CAPTURE ROUTING/NEW DOCUMENT LOADING START AND END\r\n            this.listenTo(Adapt, {\r\n                'router:location': this.onNavigationStart,\r\n                'pageView:ready menuView:ready router:plugin': this.onNavigationEnd\r\n            });\r\n        },\r\n\r\n        initialSetup: function() {\r\n\r\n            Adapt.config.get(\"_accessibility\")._isActive = false;\r\n            this.setupAccessibility();\r\n\r\n            //SETUP RENDERING HELPERS\r\n            this.setupHelpers();\r\n\r\n        },\r\n\r\n        removeLegacyElements: function() {\r\n            var $legacyElements = $(\"body\").children(\"#accessibility-toggle, #accessibility-instructions\");\r\n            var $navigationElements = $(\".navigation\").find(\"#accessibility-toggle, #accessibility-instructions\");\r\n\r\n            if (!$legacyElements.length && !$navigationElements.length) return\r\n\r\n            Adapt.log.warn(\"REMOVED - #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.\");\r\n            $legacyElements.remove();\r\n            $navigationElements.remove();\r\n        },\r\n\r\n        setupAccessibility: function() {\r\n            //CALLED ON DATA LOAD\r\n            if (!this.isEnabled()) return;\r\n\r\n            //save accessibility state\r\n            Adapt.offlineStorage.set(\"a11y\", false);\r\n\r\n            this.configureA11yLibrary();\r\n            this.setupDocument();\r\n            this.setupPopupListeners();\r\n            this.setupLogging();\r\n\r\n        },\r\n\r\n        setupHelpers: function() {\r\n\r\n            //MAKE $.a11y_text and $.a11y_normalize IN GLOBAL HANDLEBARS HELPERS a11y_text and a11y_normalize\r\n            var config = Adapt.config.has('_accessibility')\r\n                ? Adapt.config.get(\"_accessibility\")\r\n                : false;\r\n\r\n            var helpers = {\r\n\r\n                a11y_text: function(text) {\r\n                    Adapt.log.warn(\"DEPRECATED: a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/\");\r\n                    return text;\r\n                },\r\n\r\n                a11y_normalize: function(texts) {\r\n                    var values = Array.prototype.slice.call(arguments, 0,-1);\r\n                    values = values.filter(Boolean);\r\n                    return $.a11y_normalize(values.join(\" \"));\r\n                },\r\n\r\n                a11y_remove_breaks: function(texts) {\r\n                    var values = Array.prototype.slice.call(arguments, 0,-1);\r\n                    values = values.filter(Boolean);\r\n                    return $.a11y_remove_breaks(values.join(\" \"));\r\n                },\r\n\r\n                a11y_aria_label: function(texts) {\r\n                    var values = Array.prototype.slice.call(arguments, 0,-1);\r\n                    values = values.filter(Boolean);\r\n                    return new Handlebars.SafeString('<div class=\"aria-label\">'+values.join(\" \")+'</div>');\r\n                },\r\n\r\n                a11y_aria_label_relative: function(texts) {\r\n                    var values = Array.prototype.slice.call(arguments, 0,-1);\r\n                    values = values.filter(Boolean);\r\n                    return new Handlebars.SafeString('<div class=\"aria-label relative\">'+values.join(\" \")+'</div>');\r\n                },\r\n\r\n                a11y_aria_image: function(texts) {\r\n                    var values = Array.prototype.slice.call(arguments, 0,-1);\r\n                    values = values.filter(Boolean);\r\n                    return new Handlebars.SafeString('<div class=\"aria-label\" role=\"img\" aria-label=\"'+values.join(\" \")+'\"></div>');\r\n                },\r\n\r\n                a11y_wrap_focus: function(text) {\r\n                    return new Handlebars.SafeString('<a class=\"a11y-focusguard a11y-ignore a11y-ignore-focus\" role=\"presentation\">&nbsp;</a>');\r\n                },\r\n\r\n                a11y_attrs_heading: function(levelOrType) {\r\n                    // get the global configuration from config.json\r\n                    var cfg = Adapt.config.get('_accessibility');\r\n                    // default level to use if nothing overrides it\r\n                    var level = 1;\r\n\r\n                    // first check to see if the Handlebars context has an override\r\n                    if (this._ariaLevel) {\r\n                        levelOrType = this._ariaLevel;\r\n                    }\r\n\r\n                    if (isNaN(levelOrType) === false) {\r\n                        // if a number is passed just use this\r\n                        level = levelOrType;\r\n                    }\r\n                    else if (_.isString(levelOrType)) {\r\n                        // if a string is passed check if it is defined in global configuration\r\n                        cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;\r\n                        if (cfg._ariaLevels && cfg._ariaLevels[\"_\"+levelOrType] !== undefined) {\r\n                            level = cfg._ariaLevels[\"_\"+levelOrType];\r\n                        }\r\n                    }\r\n\r\n                    return new Handlebars.SafeString(' role=\"heading\" aria-level=\"'+level+'\" ');\r\n                },\r\n\r\n                a11y_attrs_tabbable: function() {\r\n                    return new Handlebars.SafeString(' role=\"region\" tabindex=\"0\" ');\r\n                }\r\n\r\n            };\r\n\r\n            for (var name in helpers) {\r\n                if (helpers.hasOwnProperty(name)) {\r\n                     Handlebars.registerHelper(name, helpers[name]);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        setupNoSelect: function() {\r\n            if (!Adapt.config.get('_accessibility') || !Adapt.config.get('_accessibility')._disableTextSelectOnClasses) return;\r\n\r\n            var classes = Adapt.config.get('_accessibility')._disableTextSelectOnClasses.split(\" \");\r\n\r\n            var isMatch = false;\r\n            for (var i = 0, item; item = classes[i++];) {\r\n                if ($('html').is(item)) {\r\n                    isMatch = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isMatch) {\r\n                $('html').addClass(\"no-select\");\r\n            } else  {\r\n                $('html').removeClass(\"no-select\");\r\n            }\r\n\r\n        },\r\n\r\n        configureA11yLibrary: function() {\r\n\r\n            $.a11y.options.OS = Adapt.device.OS.toLowerCase();\r\n            $.a11y.options.isTouchDevice = Adapt.device.touch;\r\n\r\n            _.extend($.a11y.options, {\r\n                isUserInputControlEnabled: true,\r\n                isFocusControlEnabled: true,\r\n                isRemoveNotAccessiblesEnabled: true,\r\n                isScrollDisableEnabled: true,\r\n                isScrollDisabledOnPopupEnabled: false\r\n            });\r\n\r\n            this.setupNoSelect();\r\n\r\n            $.a11y.ready();\r\n        },\r\n\r\n        onNavigationStart: function() {\r\n            //STOP DOCUMENT READING, MOVE FOCUS TO APPROPRIATE LOCATION\r\n            _.defer(function() {\r\n                $.a11y_on(false, '.page');\r\n                $.a11y_on(false, '.menu');\r\n            });\r\n        },\r\n\r\n        onNavigationEnd: function(view) {\r\n            //prevent sub-menu items provoking behaviour\r\n            if (view && view.model) {\r\n                if (view.model.get(\"_id\") != Adapt.location._currentId) return;\r\n            }\r\n\r\n            $.a11y_on(true, '.page');\r\n            $.a11y_on(true, '.menu');\r\n\r\n            this.configureA11yLibrary();\r\n            $.a11y_update();\r\n\r\n        },\r\n\r\n        isActive: function() {\r\n            Adapt.log.warn(\"REMOVED - accessibility is now always active when enabled. Please unify your user experiences.\")\r\n            return false;\r\n        },\r\n\r\n        isEnabled: function() {\r\n            return Adapt.config.has('_accessibility')\r\n                && Adapt.config.get('_accessibility')._isEnabled;\r\n        },\r\n\r\n        setupDocument: function() {\r\n            this.$html.addClass('accessibility');\r\n            $.a11y(true)\r\n        },\r\n\r\n        setupPopupListeners: function() {\r\n            this.listenTo(Adapt, 'popup:opened popup:closed', this.onPop);\r\n        },\r\n\r\n        setupLogging: function() {\r\n            if (!Adapt.config.get(\"_accessibility\") || !Adapt.config.get(\"_accessibility\")._logReading) return;\r\n            $(document).on(\"reading\", this.onRead);\r\n        },\r\n\r\n        onRead: function(event, text) {\r\n            //OUTPUT READ TEXT TO CONSOLE\r\n            console.log(\"READING: \" + text);\r\n        },\r\n\r\n        onPop: function() {\r\n            //MAKE SURE POPUP IS CONFIGURED CORRECTLY WITH ARIA LABELS, TABINDEXES ETC\r\n            $.a11y_update();\r\n        }\r\n\r\n    });\r\n\r\n    Adapt.accessibility = new Accessibility();\r\n\r\n    return Adapt.accessibility;\r\n\r\n});\r\n\n","define('core/js/offlineStorage',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    //Basic API for setting and getting name+value pairs\r\n    //Allows registration of a single handler.\r\n\r\n    var OfflineStorage = Backbone.Controller.extend({\r\n\r\n        /**\r\n         * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)\r\n         * this can still be accessed OK\r\n         */\r\n        ready: true,\r\n        _handler: undefined,\r\n\r\n        /**\r\n         * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know\r\n         * it's ready before we can safely use offlineStorage\r\n         */\r\n        initialize: function(handler) {\r\n            if (!handler) {\r\n                return;\r\n            }\r\n\r\n            this.ready = false;\r\n            this._handler = handler;\r\n        },\r\n\r\n        /**\r\n         * Flag to indicate if an offlineStorage handler has been defined.\r\n         * @returns {boolean} true if an offlineStorage handler has been defined, false otherwise\r\n         */\r\n        hasHandler: function() {\r\n            return this._handler !== undefined;\r\n        },\r\n\r\n        set: function(name, value) {\r\n            if (this._handler && this._handler.set) {\r\n                return this._handler.set.apply(this._handler, arguments);\r\n            }\r\n            // if no handler has been defined, just store the data locally\r\n            this[name] = value;\r\n        },\r\n\r\n        get: function(name) {\r\n            if (this._handler && this._handler.get) {\r\n                return this._handler.get.apply(this._handler, arguments);\r\n            }\r\n            // if no handler has been defined, check local data store\r\n            return this[name];\r\n        },\r\n\r\n        /**\r\n         * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used\r\n         */\r\n        setReadyStatus: function() {\r\n            this.ready = true;\r\n            Adapt.trigger(\"offlineStorage:ready\");\r\n        }\r\n\r\n    });\r\n\r\n    Adapt.offlineStorage = new OfflineStorage();\r\n\r\n    return Adapt.offlineStorage;\r\n\r\n});\r\n\n","define('core/js/enums/completionStateEnum',[],function() {\r\n  \r\n      var COMPLETION_STATE = ENUM([\r\n          'INCOMPLETE',\r\n          'COMPLETED',\r\n          'PASSED',\r\n          'FAILED'\r\n      ]);\r\n  \r\n      return COMPLETION_STATE;\r\n  \r\n  });\n","define('core/js/tracking',[\r\n    'core/js/adapt',\r\n    'core/js/enums/completionStateEnum'\r\n], function(Adapt, COMPLETION_STATE) {\r\n\r\n    var Tracking = Backbone.Controller.extend({\r\n\r\n        _config: {\r\n            _requireContentCompleted: true,\r\n            _requireAssessmentCompleted: false\r\n        },\r\n\r\n        _assessmentState: null,\r\n\r\n        initialize: function() {\r\n            Adapt.once('configModel:loadCourseData', this.loadConfig.bind(this));\r\n            Adapt.on('app:dataReady', this.setupEventListeners.bind(this));\r\n        },\r\n\r\n        setupEventListeners: function() {\r\n            // Check if completion requires passing an assessment. \r\n            if (this._config._requireAssessmentCompleted) {\r\n                this.listenTo(Adapt, 'assessment:complete', this.onAssessmentComplete);\r\n            }\r\n\r\n            // Check if completion requires completing all content.\r\n            if (this._config._requireContentCompleted) {\r\n                this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Store the assessment state.\r\n         * @param {object} assessmentState - The object returned by Adapt.assessment.getState()\r\n         */\r\n        onAssessmentComplete: function(assessmentState) {\r\n            this._assessmentState = assessmentState;\r\n\r\n            this.checkCompletion();\r\n        },\r\n\r\n        /**\r\n         * Evaluate the course and assessment completion.\r\n         */\r\n        checkCompletion: function() {\r\n            var completionData = this.getCompletionData();\r\n\r\n            if (completionData.status === COMPLETION_STATE.INCOMPLETE) {\r\n                return;\r\n            }\r\n\r\n            Adapt.trigger('tracking:complete', completionData);\r\n            Adapt.log.debug('tracking:complete', completionData);\r\n        },\r\n\r\n        /**\r\n         * The return value of this function should be passed to the trigger of 'tracking:complete'.\r\n         * @returns An object representing the user's course completion.\r\n         */\r\n        getCompletionData: function() {\r\n            var completionData = {\r\n                status: COMPLETION_STATE.INCOMPLETE,\r\n                assessment: null\r\n            };\r\n\r\n            // Course complete is required.\r\n            if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {\r\n                // INCOMPLETE: course not complete.\r\n                return completionData;\r\n            }\r\n\r\n            // Assessment completed required.\r\n            if (this._config._requireAssessmentCompleted) {\r\n                if (!this._assessmentState) {\r\n                    // INCOMPLETE: assessment is not complete.\r\n                    return completionData;\r\n                }\r\n\r\n                // PASSED/FAILED: assessment completed.\r\n                completionData.status = this._assessmentState.isPass ? COMPLETION_STATE.PASSED : COMPLETION_STATE.FAILED;\r\n                completionData.assessment = this._assessmentState;\r\n\r\n                return completionData;\r\n            }\r\n\r\n            // COMPLETED: criteria met, no assessment requirements.\r\n            completionData.status = COMPLETION_STATE.COMPLETED;\r\n\r\n            return completionData;\r\n        },\r\n\r\n        /**\r\n         * Set the _config object to the values retrieved from config.json.\r\n         */\r\n        loadConfig: function() {\r\n            if (Adapt.config.has('_completionCriteria')) {\r\n                this._config = Adapt.config.get('_completionCriteria');\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    Adapt.tracking = new Tracking();\r\n\r\n    return Adapt.tracking;\r\n});\r\n\n","define('core/js/device',[\r\n    'core/js/adapt',\r\n    'bowser'\r\n], function(Adapt, Bowser) {\r\n\r\n    var $html = $('html');\r\n    var $window = $(window);\r\n\r\n    Adapt.device = {\r\n        touch: Modernizr.touchevents,\r\n        screenWidth: getScreenWidth(),\r\n        screenHeight: getScreenHeight(),\r\n        browser: (Bowser.name || '').toLowerCase(),\r\n        version: (Bowser.version || '').toLowerCase(),\r\n        OS: getOperatingSystem().toLowerCase(),\r\n        osVersion: Bowser.osversion || '',\r\n        renderingEngine: getRenderingEngine()\r\n    };\r\n\r\n    // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,\r\n    // as both these functions are getters, essentially.\r\n    Object.defineProperties(Adapt.device, {\r\n        \"orientation\": {\r\n            get: function () {\r\n                return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';\r\n            }\r\n        },\r\n        \"aspectRatio\": {\r\n            get: function () {\r\n                return this.screenWidth / this.screenHeight;\r\n            }\r\n        }\r\n    });\r\n\r\n    Adapt.once('app:dataReady', function() {\r\n        Adapt.device.screenSize = checkScreenSize();\r\n\r\n        $html.addClass('size-' + Adapt.device.screenSize);\r\n        \r\n        if (Adapt.device.orientation) {\r\n            $html.addClass('orientation-' + Adapt.device.orientation);\r\n        }\r\n\r\n        // As Adapt.config is available it's ok to bind the 'resize'.\r\n        $window.on('resize orientationchange', onWindowResize);\r\n    });\r\n\r\n    /**\r\n     * Compares the calculated screen width to the breakpoints defined in config.json.\r\n     * \r\n     * @returns {string} 'large', 'medium' or 'small'\r\n     */\r\n    function checkScreenSize() {\r\n        var screenSizeConfig = Adapt.config.get('screenSize');\r\n        var screenSize;\r\n\r\n        if (Adapt.device.screenWidth > screenSizeConfig.medium) {\r\n            screenSize = 'large';\r\n        } else if (Adapt.device.screenWidth > screenSizeConfig.small) {\r\n            screenSize = 'medium';\r\n        } else {\r\n            screenSize = 'small';\r\n        }\r\n\r\n        return screenSize;\r\n    }\r\n\r\n    function getScreenWidth() {\r\n        return isAppleDevice()\r\n            ? getAppleScreenWidth()\r\n            : window.innerWidth || $window.width();\r\n    }\r\n\r\n    function getScreenHeight() {\r\n        return isAppleDevice()\r\n            ? getAppleScreenHeight()\r\n            : window.innerHeight || $window.height();\r\n    }\r\n\r\n    function getOperatingSystem() {\r\n        var os = '';\r\n        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',\r\n            'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];\r\n\r\n        for (var i = 0; i < flags.length; i++) {\r\n            if (Bowser[flags[i]]) {\r\n                os = flags[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (os === '') {\r\n            // Fall back to using navigator.platform in case Bowser can't detect the OS.\r\n            var platform = navigator.platform;\r\n            var platforms = ['Win', 'Mac', 'Linux'];\r\n            os = 'PlatformUnknown';\r\n\r\n            for (var i = 0; i < platforms.length; i++) {\r\n                if (platform.indexOf(platforms[i]) != -1) {\r\n                    os = platforms[i].toLowerCase();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Set consistency with the Bowser flags.\r\n            if (os == 'win') {\r\n                os = 'windows';\r\n            }\r\n        }\r\n\r\n        return os;\r\n    }\r\n\r\n    function getRenderingEngine() {\r\n        var engine = '';\r\n        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];\r\n\r\n        for (var i = 0; i < flags.length; i++) {\r\n            if (Bowser[flags[i]]) {\r\n                engine = flags[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return engine;\r\n    }\r\n\r\n    var onWindowResize = _.debounce(function onScreenSizeChanged() {\r\n        // Calculate the screen properties.\r\n        var previousWidth = Adapt.device.screenWidth;\r\n        var previousHeight = Adapt.device.screenHeight;\r\n\r\n        Adapt.device.screenWidth = getScreenWidth();\r\n        Adapt.device.screenHeight = getScreenHeight();\r\n\r\n        if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {\r\n            // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.\r\n            return;\r\n        }\r\n\r\n        var newScreenSize = checkScreenSize();\r\n\r\n        if (newScreenSize !== Adapt.device.screenSize) {\r\n            Adapt.device.screenSize = newScreenSize;\r\n\r\n            $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);\r\n\r\n            if (Adapt.device.orientation) {\r\n                $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);\r\n            }\r\n\r\n            Adapt.trigger('device:changed', Adapt.device.screenSize);\r\n        }\r\n\r\n        Adapt.trigger('device:preResize device:resize device:postResize', Adapt.device.screenWidth);\r\n\r\n    }, 100);\r\n\r\n    function isAppleDevice() {\r\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n    }\r\n\r\n    function getAppleScreenWidth() {\r\n        return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;\r\n    }\r\n\r\n    function getAppleScreenHeight() {\r\n        return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;\r\n    }\r\n\r\n    function getAppleDeviceType() {\r\n        var type = '';\r\n\r\n        var flags = ['iphone', 'ipad', 'ipod'];\r\n\r\n        for (var i = 0; i < flags.length; i++) {\r\n            if (Bowser[flags[i]]) {\r\n                type = flags[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    function pixelDensity() {\r\n        var pixelDensity = (window.devicePixelRatio || 1);\r\n\r\n        if (pixelDensity >= 3) {\r\n            return 'ultra-high';\r\n        } else if (pixelDensity >= 2) {\r\n            return 'high';\r\n        } else if (pixelDensity >= 1.5) {\r\n            return 'medium';\r\n        } else {\r\n            return 'low';\r\n        }\r\n    }\r\n\r\n    var browser = Adapt.device.browser.toLowerCase();\r\n    // Convert 'msie' and 'internet explorer' to 'ie'.\r\n    var browserString = browser.replace(/msie|internet explorer/, 'ie');\r\n    browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();\r\n    browserString += browserString.replace('.', '-').toLowerCase();\r\n\r\n    $html.addClass(browserString + ' pixel-density-' + pixelDensity());\r\n});\r\n\n","define('core/js/views/drawerView',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var DrawerView = Backbone.View.extend({\r\n\r\n        className: 'drawer display-none',\r\n        disableAnimation: false,\r\n\r\n        attributes: {\r\n            'role': 'dialog',\r\n            'aria-modal': 'true',\r\n            'aria-labelledby': 'drawer-heading',\r\n            'aria-hidden': 'true'\r\n        },\r\n\r\n        initialize: function() {\r\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\r\n            this._isVisible = false;\r\n            this.drawerDir = 'right';\r\n            if(Adapt.config.get('_defaultDirection')=='rtl'){//on RTL drawer on the left\r\n                this.drawerDir = 'left';\r\n            }\r\n            this.setupEventListeners();\r\n            this.render();\r\n            this.drawerDuration = Adapt.config.get('_drawer')._duration;\r\n            this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;\r\n            // Setup cached selectors\r\n            this.$wrapper = $('#wrapper');\r\n        },\r\n\r\n        setupEventListeners: function() {\r\n            this.listenTo(Adapt, {\r\n                'navigation:toggleDrawer': this.toggleDrawer,\r\n                'drawer:triggerCustomView': this.openCustomView,\r\n                'drawer:closeDrawer': this.onCloseDrawer,\r\n                'remove': this.onCloseDrawer,\r\n                'drawer:remove': this.remove\r\n            });\r\n\r\n            this._onKeyUp = _.bind(this.onKeyUp, this);\r\n            this.setupEscapeKey();\r\n        },\r\n\r\n        setupEscapeKey: function() {\r\n            $(window).on(\"keyup\", this._onKeyUp);\r\n        },\r\n\r\n        onKeyUp: function(event) {\r\n            if (event.which != 27) return;\r\n            event.preventDefault();\r\n\r\n            this.onCloseDrawer();\r\n        },\r\n\r\n        events: {\r\n            'click .drawer-back': 'onBackButtonClicked',\r\n            'click .drawer-close':'onCloseClicked'\r\n        },\r\n\r\n        render: function() {\r\n            var template = Handlebars.templates['drawer']\r\n            $(this.el).html(template({_globals: Adapt.course.get(\"_globals\")})).prependTo('body');\r\n            var shadowTemplate = Handlebars.templates['shadow'];\r\n            $(shadowTemplate()).prependTo('body');\r\n            // Set defer on post render\r\n            _.defer(_.bind(function() {\r\n                this.postRender();\r\n            }, this));\r\n            return this;\r\n        },\r\n\r\n        // Set tabindex for select elements\r\n        postRender: function() {\r\n            this.$('a, button, input, select, textarea').attr('tabindex', -1);\r\n\r\n            this.checkIfDrawerIsAvailable();\r\n        },\r\n\r\n        openCustomView: function(view, hasBackButton) {\r\n            // Set whether back button should display\r\n            this._hasBackButton = hasBackButton;\r\n            this._isCustomViewVisible = true;\r\n            Adapt.trigger('drawer:empty');\r\n            this.showDrawer();\r\n            this.$('.drawer-holder').html(view);\r\n        },\r\n\r\n        checkIfDrawerIsAvailable: function() {\r\n            if (this.collection.length == 0) {\r\n                $('.navigation-drawer-toggle-button').addClass('display-none');\r\n                Adapt.trigger('drawer:noItems');\r\n            } else {\r\n                $('.navigation-drawer-toggle-button').removeClass('display-none');\r\n            }\r\n        },\r\n\r\n        onBackButtonClicked: function(event) {\r\n            event.preventDefault();\r\n            this.showDrawer(true);\r\n        },\r\n\r\n        onCloseClicked: function(event) {\r\n            event.preventDefault();\r\n            this.hideDrawer();\r\n        },\r\n\r\n        onCloseDrawer: function($toElement) {\r\n            this.hideDrawer($toElement);\r\n        },\r\n\r\n        toggleDrawer: function() {\r\n            if (this._isVisible && this._isCustomViewVisible === false) {\r\n                this.hideDrawer();\r\n            } else {\r\n                this.showDrawer(true);\r\n            }\r\n        },\r\n\r\n        showDrawer: function(emptyDrawer) {\r\n            this.$el.removeClass('display-none').removeAttr('aria-hidden');\r\n            //only trigger popup:opened if drawer is visible, pass popup manager drawer element\r\n            if (!this._isVisible) {\r\n                Adapt.trigger('popup:opened', this.$el);\r\n                $('body').scrollDisable();\r\n                this._isVisible = true;\r\n            }\r\n\r\n            var drawerWidth = this.$el.width();\r\n            // Sets tab index to 0 for all tabbable elements in Drawer\r\n            this.$('a, button, input, select, textarea').attr('tabindex', 0);\r\n\r\n            if (emptyDrawer) {\r\n                this.$('.drawer-back').addClass('display-none');\r\n                this._isCustomViewVisible = false;\r\n                this.emptyDrawer();\r\n                if (this.collection.models.length === 1) {\r\n                    // This callback triggers openCustomView() and sets\r\n                    // _isCustomViewVisible to true, causing toggleDrawer()\r\n                    // to re-render the drawer on every toggle button press\r\n                    Adapt.trigger(this.collection.models[0].get('eventCallback'));\r\n                    // Set _isCustomViewVisible to false to prevent re-rendering\r\n                    // the drawer and fix the toggle functionality on toggle button press\r\n                    this._isCustomViewVisible = false;\r\n                } else {\r\n                    this.renderItems();\r\n                    Adapt.trigger('drawer:openedItemView');\r\n                }\r\n            } else {\r\n                if (this._hasBackButton && this.collection.models.length > 1) {\r\n                    this.$('.drawer-back').removeClass('display-none');\r\n                } else {\r\n                    this.$('.drawer-back').addClass('display-none');\r\n                }\r\n                Adapt.trigger('drawer:openedCustomView');\r\n            }\r\n\r\n            //delay drawer animation until after background fadeout animation is complete\r\n            if (this.disableAnimation) {\r\n                $('#shadow').removeClass(\"display-none\");\r\n\r\n                var direction={};\r\n                direction[this.drawerDir]=0;\r\n                this.$el.css(direction);\r\n                complete.call(this);\r\n\r\n            } else {\r\n\r\n                $('#shadow').velocity({opacity:1},{duration:this.drawerDuration, begin: _.bind(function() {\r\n                    $(\"#shadow\").removeClass(\"display-none\");\r\n                    complete.call(this);\r\n                }, this)});\r\n\r\n                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;\r\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\r\n                var direction={};\r\n                direction[this.drawerDir]=0;\r\n                this.$el.velocity(direction, this.drawerDuration, easing);\r\n\r\n            }\r\n\r\n            function complete() {\r\n                this.addShadowEvent();\r\n                Adapt.trigger('drawer:opened');\r\n\r\n                //focus on first tabbable element in drawer\r\n                this.$el.a11y_focus();\r\n        }\r\n\r\n        },\r\n\r\n        emptyDrawer: function() {\r\n            this.$('.drawer-holder').empty();\r\n        },\r\n\r\n        renderItems: function() {\r\n            Adapt.trigger('drawer:empty');\r\n            this.emptyDrawer();\r\n            var models = this.collection.models;\r\n            for (var i = 0, len = models.length; i < len; i++) {\r\n                var item = models[i];\r\n                new DrawerItemView({model: item});\r\n            }\r\n        },\r\n\r\n        hideDrawer: function($toElement) {\r\n            //only trigger popup:closed if drawer is visible\r\n            if (this._isVisible) {\r\n                Adapt.trigger('popup:closed', $toElement);\r\n                this._isVisible = false;\r\n                $('body').scrollEnable();\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            if (this.disableAnimation) {\r\n\r\n                var direction={};\r\n                direction[this.drawerDir]=-this.$el.width();\r\n                this.$el\r\n                    .css(direction)\r\n                    .addClass('display-none')\r\n                    .attr('aria-hidden', 'true');\r\n\r\n                $('#shadow').addClass(\"display-none\");\r\n\r\n                Adapt.trigger('drawer:closed');\r\n\r\n            } else {\r\n\r\n                var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;\r\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\r\n\r\n                var direction={};\r\n                direction[this.drawerDir]=-this.$el.width();\r\n                this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {\r\n                    this.$el\r\n                        .addClass('display-none')\r\n                        .attr('aria-hidden', 'true');\r\n\r\n                    Adapt.trigger('drawer:closed');\r\n                }, this));\r\n\r\n                $('#shadow').velocity({opacity:0}, {duration:this.drawerDuration, complete:function() {\r\n                    $('#shadow').addClass(\"display-none\");\r\n                }});\r\n\r\n            }\r\n\r\n            this._isCustomViewVisible = false;\r\n            this.removeShadowEvent();\r\n\r\n\r\n        },\r\n\r\n        addShadowEvent: function() {\r\n            $('#shadow').one('click touchstart', _.bind(function() {\r\n                this.onCloseDrawer();\r\n            }, this));\r\n        },\r\n\r\n        removeShadowEvent: function() {\r\n            $('#shadow').off('click touchstart');\r\n        },\r\n\r\n        remove: function() {\r\n            Backbone.View.prototype.remove.apply(this, arguments);\r\n            $(window).off(\"keyup\", this._onKeyUp);\r\n\r\n            Adapt.trigger('drawer:empty');\r\n            this.collection.reset();\r\n            $('#shadow').remove();\r\n        }\r\n\r\n    });\r\n\r\n    var DrawerItemView = Backbone.View.extend({\r\n\r\n        className: 'drawer-item',\r\n\r\n        attributes: {\r\n            role: 'listitem'\r\n        },\r\n\r\n        initialize: function() {\r\n            this.listenTo(Adapt, 'drawer:empty', this.remove);\r\n            this.render();\r\n        },\r\n\r\n        events: {\r\n            'click .drawer-item-open': 'onDrawerItemClicked'\r\n        },\r\n\r\n        render: function() {\r\n            var data = this.model.toJSON();\r\n            var template = Handlebars.templates['drawerItem']\r\n            $(this.el).html(template(data)).appendTo('.drawer-holder');\r\n            return this;\r\n        },\r\n\r\n        onDrawerItemClicked: function(event) {\r\n            event.preventDefault();\r\n            var eventCallback = this.model.get('eventCallback');\r\n            Adapt.trigger(eventCallback);\r\n        }\r\n    });\r\n\r\n    return DrawerView;\r\n});\r\n\n","define('core/js/drawer',[\r\n    'core/js/adapt',\r\n    'core/js/views/drawerView'\r\n], function(Adapt, DrawerView) {\r\n\r\n    var DrawerCollection = new Backbone.Collection(null, { comparator: 'drawerOrder' });\r\n    var Drawer = {};\r\n\r\n    Drawer.addItem = function(drawerObject, eventCallback) {\r\n        drawerObject.eventCallback = eventCallback;\r\n        DrawerCollection.add(drawerObject);\r\n    };\r\n\r\n    Drawer.triggerCustomView = function(view, hasBackButton) {\r\n        if (hasBackButton !== false) {\r\n            hasBackButton = true;\r\n        }\r\n        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);\r\n    };\r\n\r\n    Adapt.on({\r\n        'adapt:start': function() {\r\n            new DrawerView({ collection: DrawerCollection });\r\n        },\r\n        'app:languageChanged': function() {\r\n            Adapt.trigger('drawer:remove');\r\n        }\r\n    });\r\n\r\n    Adapt.drawer = Drawer;\r\n\r\n});\r\n\n","define('core/js/views/notifyView',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var NotifyView = Backbone.View.extend({\r\n\r\n        className: function() {\r\n            var classes = 'notify ';\r\n            classes += (this.model.get('_classes') || '');\r\n            return classes;\r\n        },\r\n\r\n        attributes: {\r\n            'role': 'dialog',\r\n            'aria-labelledby': 'notify-heading',\r\n            'aria-modal': 'true'\r\n        },\r\n\r\n        disableAnimation: false,\r\n        isOpen: false,\r\n        hasOpened: false,\r\n\r\n        initialize: function() {\r\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\r\n\r\n            this.setupEventListeners();\r\n\r\n            this.render();\r\n        },\r\n\r\n        setupEventListeners: function() {\r\n            this.listenTo(Adapt, {\r\n                'remove page:scrollTo': this.closeNotify,\r\n                'notify:resize': this.resetNotifySize,\r\n                'notify:cancel': this.cancelNotify,\r\n                'notify:close': this.closeNotify,\r\n                'device:resize': this.resetNotifySize\r\n            });\r\n\r\n            this._onKeyUp = this.onKeyUp.bind(this);\r\n            this.setupEscapeKey();\r\n        },\r\n\r\n        setupEscapeKey: function() {\r\n            $(window).on('keyup', this._onKeyUp);\r\n        },\r\n\r\n        onKeyUp: function(event) {\r\n            if (event.which != 27) return;\r\n            event.preventDefault();\r\n\r\n            this.cancelNotify();\r\n        },\r\n\r\n        events: {\r\n            'click .notify-popup-alert-button':'onAlertButtonClicked',\r\n            'click .notify-popup-prompt-button': 'onPromptButtonClicked',\r\n            'click .notify-popup-done': 'onCloseButtonClicked',\r\n            'click .notify-shadow': 'onShadowClicked'\r\n        },\r\n\r\n        render: function() {\r\n            var data = this.model.toJSON();\r\n            var template = Handlebars.templates['notify'];\r\n\r\n            //hide notify container\r\n            this.$el.css('visibility', 'hidden');\r\n            //attach popup + shadow\r\n            this.$el.html(template(data)).prependTo('body');\r\n            //hide popup\r\n            this.$('.notify-popup').css('visibility', 'hidden');\r\n            //show notify container\r\n            this.$el.css('visibility', 'visible');\r\n\r\n            this.showNotify();\r\n            return this;\r\n        },\r\n\r\n        onAlertButtonClicked: function(event) {\r\n            event.preventDefault();\r\n            //tab index preservation, notify must close before subsequent callback is triggered\r\n            this.closeNotify();\r\n            Adapt.trigger(this.model.get('_callbackEvent'), this);\r\n        },\r\n\r\n        onPromptButtonClicked: function(event) {\r\n            event.preventDefault();\r\n            //tab index preservation, notify must close before subsequent callback is triggered\r\n            this.closeNotify();\r\n            Adapt.trigger($(event.currentTarget).attr('data-event'), this);\r\n        },\r\n\r\n        onCloseButtonClicked: function(event) {\r\n            event.preventDefault();\r\n            //tab index preservation, notify must close before subsequent callback is triggered\r\n            this.cancelNotify();\r\n        },\r\n\r\n        onShadowClicked: function(event) {\r\n            event.preventDefault();\r\n            if (this.model.get(\"_closeOnShadowClick\") === false) return;\r\n            this.cancelNotify();\r\n        },\r\n\r\n        cancelNotify: function() {\r\n            if (this.model.get(\"_isCancellable\") === false) return;\r\n            //tab index preservation, notify must close before subsequent callback is triggered\r\n            this.closeNotify();\r\n            Adapt.trigger('notify:cancelled', this);\r\n        },\r\n\r\n        resetNotifySize: function() {\r\n            $('.notify-popup').removeAttr('style');\r\n\r\n            this.resizeNotify();\r\n        },\r\n\r\n        resizeNotify: function() {\r\n            var windowHeight = $(window).height();\r\n            var notifyHeight = this.$('.notify-popup').outerHeight();\r\n\r\n            if (notifyHeight > windowHeight) {\r\n                this.$('.notify-popup').css({\r\n                    'height':'100%',\r\n                    'top':0,\r\n                    'overflow-y': 'scroll',\r\n                    '-webkit-overflow-scrolling': 'touch'\r\n                });\r\n            } else {\r\n                this.$('.notify-popup').css({\r\n                    'margin-top': -(notifyHeight/2)\r\n                });\r\n            }\r\n        },\r\n\r\n        showNotify: function() {\r\n            this.isOpen = true;\r\n            this.addSubView();\r\n\r\n            // Keep focus from previous action\r\n            this.$previousActiveElement = $(document.activeElement);\r\n\r\n            Adapt.trigger('notify:opened', this);\r\n\r\n            this.$el.imageready(this.onLoaded.bind(this));\r\n        },\r\n\r\n        onLoaded: function() {\r\n            if (this.disableAnimation) {\r\n                this.$('.notify-shadow').css('display', 'block');\r\n            } else {\r\n\r\n                this.$('.notify-shadow').velocity({ opacity: 0 }, { duration: 0 }).velocity({ opacity: 1 }, {duration: 400, begin: function() {\r\n                    this.$('.notify-shadow').css('display', 'block');\r\n                }.bind(this)});\r\n\r\n            }\r\n\r\n            this.resizeNotify();\r\n\r\n            if (this.disableAnimation) {\r\n\r\n                this.$('.notify-popup').css('visibility', 'visible');\r\n                this.onOpened();\r\n\r\n            } else {\r\n\r\n                this.$('.notify-popup').velocity({ opacity: 0 }, { duration: 0 }).velocity({ opacity: 1 }, { duration: 400, begin: function() {\r\n                    // Make sure to make the notify visible and then set\r\n                    // focus, disabled scroll and manage tabs\r\n                    this.$('.notify-popup').css('visibility', 'visible');\r\n                    this.onOpened();\r\n                }.bind(this)});\r\n\r\n            }\r\n        },\r\n\r\n        onOpened: function() {\r\n            this.hasOpened = true;\r\n            // Allows popup manager to control focus\r\n            Adapt.trigger('popup:opened', this.$('.notify-popup'));\r\n            $('body').scrollDisable();\r\n            $('html').addClass('notify');\r\n\r\n            // Set focus to first accessible element\r\n            this.$('.notify-popup').a11y_focus(true);\r\n        },\r\n\r\n        addSubView: function() {\r\n\r\n            this.subView = this.model.get(\"_view\");\r\n            if (!this.subView) return;\r\n\r\n            this.$(\".notify-popup-content-inner\").append(this.subView.$el);\r\n\r\n        },\r\n\r\n        closeNotify: function (event) {\r\n            // Prevent from being invoked multiple times - see https://github.com/adaptlearning/adapt_framework/issues/1659\r\n            if (!this.isOpen) return;\r\n            this.isOpen = false;\r\n\r\n            // If closeNotify is called before showNotify has finished then wait\r\n            // until it's open.\r\n            if (!this.hasOpened) {\r\n                this.listenToOnce(Adapt, 'popup:opened', function() {\r\n                    // Wait for popup:opened to finish processing\r\n                    _.defer(this.onCloseReady.bind(this));\r\n                });\r\n            } else {\r\n                this.onCloseReady();\r\n            }\r\n        },\r\n\r\n        onCloseReady: function() {\r\n            if (this.disableAnimation) {\r\n\r\n                this.$('.notify-popup').css('visibility', 'hidden');\r\n                this.$el.css('visibility', 'hidden');\r\n\r\n                this.remove();\r\n\r\n            } else {\r\n\r\n                this.$('.notify-popup').velocity({ opacity: 0 }, {duration: 400, complete: function() {\r\n                    this.$('.notify-popup').css('visibility', 'hidden');\r\n                }.bind(this)});\r\n\r\n                this.$('.notify-shadow').velocity({ opacity: 0 }, {duration: 400, complete:function() {\r\n                    this.$el.css('visibility', 'hidden');\r\n                    this.remove();\r\n                }.bind(this)});\r\n            }\r\n\r\n            $('body').scrollEnable();\r\n            $('html').removeClass('notify');\r\n\r\n            // Return focus to previous active element\r\n            Adapt.trigger('popup:closed', this.$previousActiveElement);\r\n            // Return reference to the notify view\r\n            Adapt.trigger('notify:closed', this);\r\n        },\r\n\r\n        remove: function() {\r\n            this.removeSubView();\r\n            $(window).off('keyup', this._onKeyUp);\r\n            Backbone.View.prototype.remove.apply(this, arguments);\r\n        },\r\n\r\n        removeSubView: function() {\r\n            if (!this.subView) return;\r\n            this.subView.remove();\r\n            this.subView = null;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return NotifyView;\r\n\r\n});\r\n\n","define('core/js/views/notifyPushView',[\r\n    'core/js/adapt'\r\n], function (Adapt) {\r\n\r\n    var NotifyPushView = Backbone.View.extend({\r\n\r\n        className: function () {\r\n            return 'notify-push ' + this.model.get('_classes');\r\n        },\r\n\r\n        attributes: {\r\n            'role': 'dialog',\r\n            'aria-labelledby': 'notify-push-heading',\r\n            'aria-modal': 'false'\r\n        },\r\n\r\n        initialize: function () {\r\n            this.listenTo(Adapt, {\r\n                'notify:pushShown notify:pushRemoved': this.updateIndexPosition,\r\n                'remove': this.remove\r\n            });\r\n\r\n            this.listenTo(this.model.collection, {\r\n                'remove': this.updateIndexPosition,\r\n                'change:_index': this.updatePushPosition\r\n            });\r\n\r\n            this.preRender();\r\n            this.render();\r\n        },\r\n\r\n        events: {\r\n            'click .notify-push-close': 'closePush',\r\n            'click .notify-push-inner': 'triggerEvent'\r\n        },\r\n\r\n        preRender: function () {\r\n            this.hasBeenRemoved = false;\r\n        },\r\n\r\n        render: function () {\r\n            var data = this.model.toJSON();\r\n            var template = Handlebars.templates['notifyPush'];\r\n            this.$el.html(template(data)).appendTo('#wrapper');\r\n\r\n            _.defer(this.postRender.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        postRender: function () {\r\n            this.$el.addClass('show');\r\n\r\n            _.delay(this.closePush.bind(this), this.model.get('_timeout'));\r\n\r\n            Adapt.trigger('notify:pushShown');\r\n        },\r\n\r\n        closePush: function (event) {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n\r\n            // Check whether this view has been removed as the delay can cause it to be fired twice\r\n            if (this.hasBeenRemoved === false) {\r\n\r\n                this.hasBeenRemoved = true;\r\n\r\n                this.$el.removeClass('show');\r\n\r\n                _.delay(function () {\r\n                    this.model.collection.remove(this.model);\r\n                    Adapt.trigger('notify:pushRemoved', this);\r\n                    this.remove();\r\n                }.bind(this), 600);\r\n            }\r\n        },\r\n\r\n        triggerEvent: function (event) {\r\n            Adapt.trigger(this.model.get('_callbackEvent'));\r\n            this.closePush();\r\n        },\r\n\r\n        updateIndexPosition: function () {\r\n            if (!this.hasBeenRemoved) {\r\n                var models = this.model.collection.models;\r\n                for (var i = 0, len = models.length; i < len; i++) {\r\n                    var index = i;\r\n                    var model = models[i];\r\n                    if (model.get('_isActive') === true) {\r\n                        model.set('_index', index);\r\n                        this.updatePushPosition();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        updatePushPosition: function () {\r\n            if (this.hasBeenRemoved) {\r\n                return;\r\n            }\r\n\r\n            if (this.model.get('_index') != undefined) {\r\n                var elementHeight = this.$el.height();\r\n                var offset = 20;\r\n                var navigationHeight = $('.navigation').height();\r\n                var currentIndex = this.model.get('_index');\r\n                var flippedIndex = (currentIndex == 0) ? 1 : 0;\r\n\r\n                if (this.model.collection.where({ _isActive: true }).length === 1) {\r\n                    flippedIndex = 0;\r\n                }\r\n\r\n                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;\r\n                this.$el.css('top', positionLowerPush);\r\n            }\r\n        }\r\n    });\r\n\r\n    return NotifyPushView;\r\n\r\n});\r\n\n","define('core/js/models/notifyModel',[],function() {\r\n\r\n    var NotifyModel = Backbone.Model.extend({\r\n        defaults: {\r\n        \t_isActive:false,\r\n        \t_showIcon:false,\r\n        \t_timeout:3000\r\n        }\r\n    });\r\n\r\n    return NotifyModel;\r\n\r\n});\r\n\n","define('core/js/notify',[\r\n\t'core/js/adapt',\r\n\t'core/js/views/notifyView',\r\n\t'core/js/views/notifyPushView',\r\n\t'core/js/models/notifyModel'\r\n], function(Adapt, NotifyView, NotifyPushView, NotifyModel) {\r\n\r\n\t// Build a collection to store push notifications\r\n\tvar NotifyPushCollection = Backbone.Collection.extend({\r\n\r\n\t\tmodel: NotifyModel,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo(this, 'add', this.onPushAdded);\r\n\t\t\tthis.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);\r\n\t\t},\r\n\r\n\t\tonPushAdded: function(model) {\r\n\t\t\tthis.checkPushCanShow(model);\r\n\t\t},\r\n\r\n\t\tcheckPushCanShow: function(model) {\r\n\t\t\tif (this.canShowPush()) {\r\n\t\t\t\tmodel.set('_isActive', true);\r\n\t\t\t\tthis.showPush(model);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcanShowPush: function() {\r\n\t\t\tvar availablePushNotifications = this.where({_isActive:true});\r\n\t\t\tif (availablePushNotifications.length >= 2) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tshowPush: function(model) {\r\n\t\t\tnew NotifyPushView({\r\n\t\t\t\tmodel: model\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tonRemovePush: function(view) {\r\n\t\t\tvar inactivePushNotifications = this.where({_isActive:false});\r\n\t\t\tif (inactivePushNotifications.length > 0) {\r\n\t\t\t\tthis.checkPushCanShow(inactivePushNotifications[0]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tvar NotifyPushes = new NotifyPushCollection();\r\n\r\n\tAdapt.on('notify:alert', function(notifyObject) {\r\n\t\taddNotifyView('alert', notifyObject);\r\n\t});\r\n\r\n\tAdapt.on('notify:prompt', function(notifyObject) {\r\n\t\taddNotifyView('prompt', notifyObject);\r\n\t});\r\n\r\n\tAdapt.on('notify:popup', function(notifyObject) {\r\n\t\taddNotifyView('popup', notifyObject);\r\n\t});\r\n\r\n\tAdapt.on('notify:push', function(notifyObject) {\r\n\t\taddNotifyView('push', notifyObject);\r\n\t});\r\n\r\n\tfunction addNotifyView(type, notifyObject) {\r\n\t\t// set default values \r\n\t\tnotifyObject._isCancellable = (notifyObject._isCancellable === undefined) \r\n\t\t\t? true : notifyObject._isCancellable;\r\n\t\t\r\n\t\tnotifyObject._showCloseButton = (notifyObject._showCloseButton === undefined) \r\n\t\t\t? true : notifyObject._showCloseButton;\r\n\r\n\t\tnotifyObject._closeOnShadowClick = (notifyObject._closeOnShadowClick === undefined) \r\n\t\t\t? true : notifyObject._closeOnShadowClick;\r\n\r\n\t\tnotifyObject._type = type;\r\n\r\n\t\tif (type === 'push') {\r\n\r\n\t\t\tNotifyPushes.push(notifyObject);\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar notify = new NotifyView({\r\n\t\t\tmodel: new NotifyModel(notifyObject)\r\n\t\t});\r\n\r\n\t}\r\n\r\n});\r\n\n","define('core/js/popupManager',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    Adapt.on('popup:opened', function($element) {\r\n\r\n        //capture currently active element or element specified\r\n        var $activeElement = $element || $(document.activeElement);\r\n\r\n        //save tab indexes\r\n        $activeElement.a11y_popup();\r\n    });\r\n\r\n    Adapt.on('popup:closed', function($target) {\r\n\r\n        //restore tab indexes\r\n        var $launchedElement = $.a11y_popdown();\r\n        var $activeElement = $target || $launchedElement;\r\n\r\n        if ($activeElement) {\r\n            return $activeElement.focusOrNext();\r\n        }\r\n\r\n        // focus on the first readable element\r\n        $.a11y_focus();\r\n\r\n    });\r\n\r\n});\r\n\n","define('core/js/models/routerModel',[\r\n    'core/js/adapt'\r\n], function (Adapt) {\r\n\r\n \tvar RouterModel = Backbone.Model.extend({\r\n\r\n \t\tdefaults: {\r\n \t\t\t_canNavigate: true,\r\n\t\t\t_shouldNavigateFocus: true\r\n \t\t},\r\n\r\n \t\tlockedAttributes: {\r\n \t\t\t_canNavigate: false,\r\n\t\t\t_shouldNavigateFocus: false\r\n \t\t}\r\n \t\t\r\n \t});\r\n\r\n \treturn RouterModel;\r\n\r\n });\r\n\n","define('core/js/views/adaptView',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var AdaptView = Backbone.View.extend({\r\n\r\n        attributes: function() {\r\n            return {\r\n                \"data-adapt-id\": this.model.get('_id')\r\n            };\r\n        },\r\n\r\n        initialize: function() {\r\n            this.listenTo(Adapt, 'remove', this.remove);\r\n            this.listenTo(this.model, {\r\n                'change:_isVisible': this.toggleVisibility,\r\n                'change:_isHidden': this.toggleHidden,\r\n                'change:_isComplete': this.onIsCompleteChange\r\n            });\r\n            this.model.set( {\r\n                '_globals': Adapt.course.get('_globals'),\r\n                '_isReady': false\r\n            });\r\n            this._isRemoved = false;\r\n            this.preRender();\r\n            this.render();\r\n            this.setupOnScreenHandler();\r\n        },\r\n\r\n        preRender: function() {},\r\n\r\n        postRender: function() {\r\n            this.addChildren();\r\n        },\r\n\r\n        render: function() {\r\n            Adapt.trigger(this.constructor.type + 'View:preRender', this);\r\n\r\n            var data = this.model.toJSON();\r\n            data.view = this;\r\n            var template = Handlebars.templates[this.constructor.template];\r\n            this.$el.html(template(data));\r\n\r\n            Adapt.trigger(this.constructor.type + 'View:render', this);\r\n\r\n            _.defer(function() {\r\n                // don't call postRender after remove\r\n                if(this._isRemoved) return;\r\n\r\n                this.postRender();\r\n                Adapt.trigger(this.constructor.type + 'View:postRender', this);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        setupOnScreenHandler: function() {\r\n            var onscreen = this.model.get('_onScreen');\r\n\r\n            if (!onscreen || !onscreen._isEnabled) return;\r\n\r\n            this.$el.on('onscreen.adaptView', function (e, m) {\r\n\r\n                if (!m.onscreen) return;\r\n\r\n                var minVerticalInview = onscreen._percentInviewVertical || 33;\r\n\r\n                if (m.percentInviewVertical < minVerticalInview) return;\r\n\r\n                this.$el.addClass( onscreen._classes || 'onscreen' ).off('onscreen.adaptView');\r\n\r\n            }.bind(this));\r\n        },\r\n\r\n        addChildren: function() {\r\n            var nthChild = 0;\r\n            var children = this.model.getChildren();\r\n            var models = children.models;\r\n            for (var i = 0, len = models.length; i < len; i++) {\r\n                var model = models[i];\r\n                if (model.get('_isAvailable')) {\r\n                    nthChild ++;\r\n\r\n                    var ChildView;\r\n                    var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get(\"_component\")];\r\n\r\n                    //use view+model object\r\n                    if (ViewModelObject.view) ChildView = ViewModelObject.view;\r\n                    //use view only object\r\n                    else ChildView = ViewModelObject;\r\n\r\n                    if (ChildView) {\r\n                        var $parentContainer = this.$(this.constructor.childContainer);\r\n                        model.set(\"_nthChild\", nthChild);\r\n                        if (Adapt.config.get(\"_defaultDirection\") == 'rtl' && model.get(\"_type\") == 'component') {\r\n                            $parentContainer.prepend(new ChildView({model:model}).$el);\r\n                        } else {\r\n                            $parentContainer.append(new ChildView({model:model}).$el);\r\n                        }\r\n                    } else {\r\n                        throw 'The component \\'' + models[i].attributes._id + '\\'' +\r\n                              ' (\\'' + models[i].attributes._component + '\\')' +\r\n                              ' has not been installed, and so is not available in your project.';\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        setReadyStatus: function() {\r\n            this.model.set('_isReady', true);\r\n        },\r\n\r\n        setCompletionStatus: function() {\r\n            if (this.model.get('_isVisible')) {\r\n                this.model.set({\r\n                    '_isComplete': true,\r\n                    '_isInteractionComplete': true\r\n                });\r\n            }\r\n        },\r\n\r\n        resetCompletionStatus: function(type) {\r\n            if (!this.model.get(\"_canReset\")) return;\r\n\r\n            var descendantComponents = this.model.findDescendantModels('components');\r\n            if (descendantComponents.length === 0) {\r\n                this.model.reset(type);\r\n            } else {\r\n                _.each(descendantComponents, function(model) {\r\n                    model.reset(type);\r\n                });\r\n            }\r\n        },\r\n\r\n        preRemove: function() {},\r\n\r\n        remove: function() {\r\n\r\n            this.preRemove();\r\n            this._isRemoved = true;\r\n\r\n            Adapt.wait.for(function(end) {\r\n\r\n                this.$el.off('onscreen.adaptView');\r\n                this.model.setOnChildren('_isReady', false);\r\n                this.model.set('_isReady', false);\r\n                Backbone.View.prototype.remove.call(this);\r\n\r\n                end();\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        setVisibility: function() {\r\n            var visible = \"visibility-hidden\";\r\n            if (this.model.get('_isVisible')) {\r\n                visible = \"\";\r\n            }\r\n            return visible;\r\n        },\r\n\r\n        toggleVisibility: function() {\r\n            if (this.model.get('_isVisible')) {\r\n                return this.$el.removeClass('visibility-hidden');\r\n            }\r\n            this.$el.addClass('visibility-hidden');\r\n        },\r\n\r\n        setHidden: function() {\r\n            var hidden = \"\";\r\n            if (this.model.get('_isHidden')) {\r\n                hidden = \"display-none\";\r\n            }\r\n            return hidden;\r\n        },\r\n\r\n        toggleHidden: function() {\r\n            if (!this.model.get('_isHidden')) {\r\n                return this.$el.removeClass('display-none');\r\n            }\r\n            this.$el.addClass('display-none');\r\n        },\r\n\r\n        onIsCompleteChange:function(model, isComplete){\r\n            this.$el.toggleClass('completed', isComplete);\r\n        }\r\n    });\r\n\r\n    return AdaptView;\r\n\r\n});\r\n\n","define('core/js/views/blockView',[\r\n    'core/js/views/adaptView'\r\n], function(AdaptView) {\r\n\r\n    var BlockView = AdaptView.extend({\r\n\r\n        className: function() {\r\n            return \"block \" + \r\n            this.model.get('_id') +\r\n            \" \" + this.model.get('_classes') + \r\n            \" \" + this.setVisibility() +\r\n            \" \" + this.setHidden() +\r\n            \" nth-child-\" +\r\n            this.model.get(\"_nthChild\") +\r\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\r\n        }\r\n\r\n    }, {\r\n        childContainer: '.component-container',\r\n        type: 'block',\r\n        template: 'block'\r\n    });\r\n\r\n    return BlockView;\r\n\r\n});\r\n\n","define('core/js/views/articleView',[\r\n    'core/js/views/adaptView',\r\n    'core/js/views/blockView'\r\n], function(AdaptView, BlockView) {\r\n\r\n    var ArticleView = AdaptView.extend({\r\n        \r\n        className: function() {\r\n            return \"article \" +\r\n            this.model.get('_id') +\r\n            \" \" + this.model.get('_classes') +\r\n            \" \" + this.setVisibility() +\r\n            \" \" + this.setHidden() +\r\n            \" nth-child-\" +\r\n            this.model.get(\"_nthChild\") +\r\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\r\n        }\r\n\r\n    }, {\r\n        childContainer: '.block-container',\r\n        childView: BlockView,\r\n        type: 'article',\r\n        template: 'article'\r\n    });\r\n\r\n    return ArticleView;\r\n\r\n});\r\n\n","define('core/js/views/pageView',[\r\n    'core/js/adapt',\r\n    'core/js/views/adaptView',\r\n    'core/js/views/articleView'\r\n], function(Adapt, AdaptView, ArticleView) {\r\n\r\n    var PageView = AdaptView.extend({\r\n\r\n        attributes: function() {\r\n            return AdaptView.resultExtend('attributes', {\r\n                \"aria-labelledby\": this.model.get('_id')+\"-heading\",\r\n                \"role\": \"main\"\r\n            }, this);\r\n        },\r\n       \r\n        className: function() {\r\n            return \"page \" +\r\n            this.model.get('_id') +\r\n            \" \" + this.model.get('_classes') +\r\n            \" \" + this.setVisibility() +\r\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\r\n        },\r\n\r\n        preRender: function() {\r\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\r\n            this.$el.css('opacity', 0);\r\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\r\n        },\r\n\r\n        isReady: function() {\r\n            if (this.model.get('_isReady')) {\r\n                _.defer(_.bind(function() {\r\n                    $('.loading').hide();\r\n                    $(window).scrollTop(0);\r\n                    Adapt.trigger('pageView:ready', this);\r\n                    var styleOptions = { opacity: 1 };\r\n                    if (this.disableAnimation) {\r\n                        this.$el.css(styleOptions);\r\n                        $.inview();\r\n                    } else {\r\n                        this.$el.velocity(styleOptions, {\r\n                            duration: 'fast',\r\n                            complete: function() {\r\n                                $.inview();\r\n                            }\r\n                        });\r\n                    }\r\n                    $(window).scroll();\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        remove: function() {\r\n            if (this.$pageLabel) {\r\n                this.$pageLabel.remove();\r\n            }\r\n            AdaptView.prototype.remove.call(this);\r\n        }\r\n\r\n    }, {\r\n        childContainer: '.article-container',\r\n        childView: ArticleView,\r\n        type: 'page',\r\n        template: 'page'\r\n    });\r\n\r\n    return PageView;\r\n\r\n});\r\n\n","define('core/js/router',[\r\n    'core/js/adapt',\r\n    'core/js/models/routerModel',\r\n    'core/js/views/pageView',\r\n    'core/js/startController'\r\n], function(Adapt, RouterModel, PageView) {\r\n\r\n    Adapt.router = new RouterModel(null, { reset: true });\r\n\r\n    var Router = Backbone.Router.extend({\r\n\r\n        // Flag to indicate if the router has tried to redirect to the current location.\r\n        _isCircularNavigationInProgress: false,\r\n\r\n        initialize: function() {\r\n            this.showLoading();\r\n\r\n            // Store #wrapper element and html to cache for later use.\r\n            this.$wrapper = $('#wrapper');\r\n            this.$html = $('html');\r\n\r\n            Adapt.once('app:dataReady', function() {\r\n                document.title = Adapt.course.get('title');\r\n            });\r\n\r\n            this.listenTo(Adapt, {\r\n                'navigation:backButton': this.navigateToPreviousRoute,\r\n                'navigation:homeButton': this.navigateToHomeRoute,\r\n                'navigation:skipNavigation': this.skipNavigation,\r\n                'navigation:parentButton': this.navigateToParent,\r\n                'router:navigateTo': this.navigateToArguments\r\n            });\r\n        },\r\n\r\n        routes: {\r\n            '': 'handleRoute',\r\n            'id/:id': 'handleRoute',\r\n            ':pluginName(/*location)(/*action)': 'handleRoute'\r\n        },\r\n\r\n        pruneArguments: function(args) {\r\n            var prunedArgs = _.toArray(args);\r\n\r\n            if (prunedArgs.length !== 0) {\r\n                // Remove any null arguments.\r\n                prunedArgs = _.without(args, null);\r\n            }\r\n\r\n            return prunedArgs;\r\n        },\r\n\r\n        handleRoute: function() {\r\n            var args = this.pruneArguments(arguments);\r\n            \r\n            if (Adapt.router.get('_canNavigate')) {\r\n                // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away.\r\n                this._isCircularNavigationInProgress = false;\r\n            }\r\n\r\n            // Check if the current page is in the process of navigating to itself.\r\n            // It will redirect to itself if the URL was changed and _canNavigate is false.\r\n            if (this._isCircularNavigationInProgress === false) {\r\n                // Trigger an event pre 'router:location' to allow extensions to stop routing.\r\n                Adapt.trigger('router:navigate', args);\r\n            }\r\n\r\n            // Re-check as _canNavigate can be set to false on 'router:navigate' event.\r\n            if (Adapt.router.get('_canNavigate')) {\r\n                // Disable navigation whilst rendering.\r\n                Adapt.router.set('_canNavigate', false, { pluginName: 'adapt' });\r\n\r\n                switch (args.length) {\r\n                    case 1:\r\n                        // If only one parameter assume it's the ID.\r\n                        return this.handleId.apply(this, args);\r\n                    case 2:\r\n                        // If there are two parameters assume it's a plugin.\r\n                        return this.handlePluginRouter.apply(this, args);\r\n                    default:\r\n                        // Route to course home page.\r\n                        return this.handleCourse();\r\n                }\r\n            }\r\n\r\n            if (this._isCircularNavigationInProgress) {\r\n                // Navigation correction finished.\r\n                // Router has successfully re-navigated to the current _id as the URL was changed \r\n                // while _canNavigate: false\r\n                this._isCircularNavigationInProgress = false;\r\n                return;\r\n            }\r\n\r\n            // Cancel navigation to stay at the current location.\r\n            this._isCircularNavigationInProgress = true;\r\n            Adapt.trigger('router:navigationCancelled', args);\r\n\r\n            // Reset URL to the current one.\r\n            this.navigateToCurrentRoute(true);\r\n        },\r\n\r\n        handlePluginRouter: function(pluginName, location, action) {\r\n            var pluginLocation = pluginName;\r\n\r\n            if (location) {\r\n                pluginLocation = pluginLocation + '-' +location;\r\n\r\n                if (action) {\r\n                    pluginLocation = pluginLocation + '-' + action;\r\n                }\r\n            }\r\n\r\n            this.updateLocation(pluginLocation, null, null, function() {\r\n                Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);\r\n                Adapt.trigger('router:plugin', pluginName, location, action);\r\n\r\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\r\n            });\r\n        },\r\n\r\n        handleCourse: function() {\r\n            if (Adapt.course.has('_start')) {\r\n                // Do not allow access to the menu when the start controller is enabled.\r\n                var startController = Adapt.course.get('_start');\r\n\r\n                if (startController._isEnabled == true && startController._isMenuDisabled == true) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.showLoading();\r\n\r\n            this.removeViews(_.bind(function() {\r\n                Adapt.course.set('_isReady', false);\r\n\r\n                this.setContentObjectToVisited(Adapt.course);\r\n                \r\n                this.updateLocation('course', null, null, _.bind(function() {\r\n                    Adapt.once('menuView:ready', function() {\r\n                        // Allow navigation.\r\n                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\r\n                        this.handleNavigationFocus();\r\n                    }.bind(this));\r\n\r\n                    Adapt.trigger('router:menu', Adapt.course);\r\n                }, this));\r\n            }, this));\r\n        },\r\n\r\n        handleId: function(id) {\r\n            var currentModel = Adapt.findById(id);\r\n            var type = '';\r\n\r\n            if (!currentModel) {\r\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\r\n                return;\r\n            }\r\n\r\n            type = currentModel.get('_type');\r\n\r\n            switch (type) {\r\n                case 'page':\r\n                case 'menu':\r\n                    if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {\r\n                        Adapt.log.warn('Unable to navigate to locked id: ' + id);\r\n                        Adapt.router.set('_canNavigate', true, {pluginName: 'adapt'});\r\n                        if (Adapt.location._previousId === undefined) {\r\n                            return this.navigate('#/', { trigger: true, replace: true });\r\n                        } else {\r\n                            return Backbone.history.history.back();\r\n                        }\r\n                    } else {\r\n                        this.showLoading();\r\n                        this.removeViews(_.bind(function() {\r\n\r\n                            this.setContentObjectToVisited(currentModel);\r\n\r\n                            if (type == 'page') {\r\n                                var location = 'page-' + id;\r\n                                this.updateLocation(location, 'page', id, _.bind(function() {\r\n                                    Adapt.once('pageView:ready', function() {\r\n                                        // Allow navigation.\r\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\r\n                                        this.handleNavigationFocus();\r\n                                    }.bind(this));\r\n                                    Adapt.trigger('router:page', currentModel);\r\n                                    this.$wrapper.append(new PageView({ model: currentModel }).$el);\r\n                                }, this));\r\n                            } else {\r\n                                var location = 'menu-' + id;\r\n                                this.updateLocation(location, 'menu', id, _.bind(function() {\r\n                                    Adapt.once('menuView:ready', function() {\r\n                                        // Allow navigation.\r\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\r\n                                        this.handleNavigationFocus();\r\n                                    }.bind(this));\r\n                                    Adapt.trigger('router:menu', currentModel);\r\n                                }, this));\r\n                            }\r\n                        }, this));\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Allow navigation.\r\n                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\r\n                    Adapt.navigateToElement('.' + id, { replace: true });\r\n            }\r\n        },\r\n\r\n        removeViews: function(onComplete) {\r\n            Adapt.remove();\r\n\r\n            Adapt.wait.queue(onComplete);\r\n        },\r\n\r\n        showLoading: function() {\r\n            $('.loading').show();\r\n        },\r\n\r\n        navigateToArguments: function(args) {\r\n            args = this.pruneArguments(args);\r\n\r\n            var options = { trigger: false, replace: false };\r\n\r\n            switch (args.length) {\r\n                case 0:\r\n                    this.navigate('#/', options);\r\n                    break;\r\n                case 1:\r\n                    if (Adapt.findById(args[0])) {\r\n                        this.navigate('#/id/' + args[0], options);\r\n                    } else {\r\n                        this.navigate('#/' + args[0], options);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                case 3:\r\n                    this.navigate('#/' + args.join('/'), options);\r\n                    break;\r\n                default:\r\n                    Adapt.log.warn('DEPRECATED - use Backbone.history.navigate or ' +\r\n                        'window.location.href instead of Adapt.trigger(\"router:navigateTo\")');\r\n                    this.handleRoute.apply(this, args);\r\n            }\r\n        },\r\n\r\n        skipNavigation: function() {\r\n             $('.' + Adapt.location._contentType).a11y_focus();\r\n        },\r\n\r\n        navigateToPreviousRoute: function(force) {\r\n            // Sometimes a plugin might want to stop the default navigation.\r\n            // Check whether default navigation has changed.\r\n            if (Adapt.router.get('_canNavigate') || force) {\r\n                if (!Adapt.location._currentId) {\r\n                    return Backbone.history.history.back();\r\n                }\r\n                if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {\r\n                    return this.navigateToParent();\r\n                }\r\n                if (Adapt.location._previousContentType === 'page') {\r\n                    return Backbone.history.history.back();\r\n                }\r\n                if (Adapt.location._currentLocation === 'course') {\r\n                    return;\r\n                }\r\n                this.navigateToParent();\r\n            }\r\n        },\r\n\r\n        navigateToHomeRoute: function(force) {\r\n            if (Adapt.router.get('_canNavigate') || force ) {\r\n                this.navigate('#/', { trigger: true });\r\n            }\r\n        },\r\n\r\n        navigateToCurrentRoute: function(force) {\r\n            if (Adapt.router.get('_canNavigate') || force) {\r\n                if (!Adapt.location._currentId) {\r\n                    return;\r\n                }\r\n                var currentId = Adapt.location._currentId;\r\n                var route = (currentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + currentId;\r\n                this.navigate(route, { trigger: true, replace: true });\r\n            }\r\n        },\r\n\r\n        navigateToParent: function(force) {\r\n            if (Adapt.router.get('_canNavigate') || force) {\r\n                var parentId = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId }).get('_parentId');\r\n                var route = (parentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + parentId;\r\n                this.navigate(route, { trigger: true });\r\n            }\r\n        },\r\n\r\n        setContentObjectToVisited: function(model) {\r\n            model.set('_isVisited', true);\r\n        },\r\n\r\n        updateLocation: function(currentLocation, type, id, onComplete) {\r\n            // Handles updating the location.\r\n            Adapt.location._previousId = Adapt.location._currentId;\r\n            Adapt.location._previousContentType = Adapt.location._contentType;\r\n\r\n            if (currentLocation === 'course') {\r\n                Adapt.location._currentId = Adapt.course.get('_id');\r\n                Adapt.location._contentType = 'menu';\r\n                Adapt.location._lastVisitedMenu = currentLocation;\r\n            } else if (!type) {\r\n                Adapt.location._currentId = null;\r\n                Adapt.location._contentType = null;\r\n            } else if (_.isString(id)) {\r\n                Adapt.location._currentId = id;\r\n                Adapt.location._contentType = type;\r\n\r\n                if (type === 'menu') {\r\n                    Adapt.location._lastVisitedType = 'menu';\r\n                    Adapt.location._lastVisitedMenu = id;\r\n                } else if (type === 'page') {\r\n                    Adapt.location._lastVisitedType = 'page';\r\n                    Adapt.location._lastVisitedPage = id;\r\n                }\r\n            }\r\n\r\n            Adapt.location._currentLocation = currentLocation;\r\n\r\n            var classes = (Adapt.location._currentId) ? 'location-'\r\n                    + Adapt.location._contentType\r\n                    + ' location-id-'\r\n                    + Adapt.location._currentId :\r\n                    'location-' + Adapt.location._currentLocation;\r\n\r\n            var previousClasses = Adapt.location._previousClasses;\r\n            if (previousClasses) {\r\n                this.$html.removeClass(previousClasses);\r\n            }\r\n            Adapt.location._previousClasses = classes;\r\n\r\n            this.$html\r\n                .addClass(classes)\r\n                .attr('data-location', Adapt.location._currentLocation);\r\n                \r\n            this.$wrapper\r\n                .removeClass()\r\n                .addClass(classes)\r\n                .attr('data-location', Adapt.location._currentLocation);\r\n\r\n            this.setDocumentTitle();\r\n\r\n            // Trigger event when location changes.\r\n            Adapt.trigger('router:location', Adapt.location);\r\n\r\n            Adapt.wait.queue(onComplete);\r\n        },\r\n\r\n        setDocumentTitle: function() {\r\n            if (!Adapt.location._currentId) return;\r\n\r\n            var currentModel = Adapt.findById(Adapt.location._currentId);\r\n            var pageTitle = '';\r\n\r\n            if (currentModel && currentModel.get('_type') !== 'course') {\r\n                var currentTitle = currentModel.get('title');\r\n                \r\n                if (currentTitle) {\r\n                    pageTitle = ' | ' + currentTitle;\r\n                }\r\n            }\r\n\r\n            var courseTitle = Adapt.course.get('title');\r\n            var documentTitle = $('<div>' + courseTitle + pageTitle + '</div>').text();\r\n\r\n            Adapt.once('pageView:ready menuView:ready', function() {\r\n                document.title = documentTitle;\r\n            });\r\n        },\r\n\r\n        handleNavigationFocus: function() {\r\n            if (!Adapt.router.get(\"_shouldNavigateFocus\")) return;\r\n            // Body will be forced to accept focus to start the\r\n            // screen reader reading the page.\r\n            $(\"body\").focusNoScroll();\r\n        }\r\n    });\r\n\r\n    return new Router({ model: new Backbone.Model() });\r\n\r\n});\r\n\n","define('core/js/helpers',[\r\n    'handlebars',\r\n    'core/js/adapt'\r\n], function(Handlebars, Adapt){\r\n\r\n    var helpers = {\r\n\r\n        lowercase: function(text) {\r\n            return text.toLowerCase();\r\n        },\r\n\r\n        capitalise:  function(text) {\r\n            return text.charAt(0).toUpperCase() + text.slice(1);\r\n        },\r\n\r\n        inc: function(index) {\r\n            return index+1;\r\n        },\r\n\r\n        dec: function(index) {\r\n            return index-1;\r\n        },\r\n\r\n        odd: function (index) {\r\n            return (index +1) % 2 === 0  ? 'even' : 'odd';\r\n        },\r\n\r\n        equals: function(value, text, block) {\r\n            return helpers.compare.call(this, value, \"==\", text, block);\r\n        },\r\n\r\n        compare: function(value, operator, text, block) {\r\n            // Comparison operators\r\n            switch (operator) {\r\n            case \"===\":\r\n                if (value === text) return block.fn(this);\r\n                break;\r\n            case \"=\": case \"==\":\r\n                if (value == text) return block.fn(this);\r\n                break;\r\n            case \">=\":\r\n                if (value >= text) return block.fn(this);\r\n                break;\r\n            case \"<=\":\r\n                if (value <= text) return block.fn(this);\r\n                break;\r\n            case \">\":\r\n                if (value > text) return block.fn(this);\r\n                break;\r\n            case \"<\":\r\n                if (value < text) return block.fn(this);\r\n                break;\r\n            }\r\n            return block.inverse(this);\r\n        },\r\n\r\n        math: function(lvalue, operator, rvalue, options) {\r\n            // Mathematical operators\r\n            lvalue = parseFloat(lvalue);\r\n            rvalue = parseFloat(rvalue);\r\n            switch (operator) {\r\n            case \"+\": return lvalue + rvalue;\r\n            case \"-\": return lvalue - rvalue;\r\n            case \"*\": return lvalue * rvalue;\r\n            case \"/\": return lvalue / rvalue;\r\n            case \"%\": return lvalue % rvalue;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Equivalent to:\r\n         *  if (conditionA || conditionB)\r\n         * @example\r\n         * {{#any displayTitle body instruction}}\r\n         * <div class=\"component__header {{_component}}__header\"></div>\r\n         * {{/any}}\r\n         */\r\n        any: function() {\r\n            var args = Array.prototype.slice.call(arguments, 0, -1);\r\n            var block = Array.prototype.slice.call(arguments, -1)[0];\r\n\r\n            return _.any(args) ? block.fn(this) : block.inverse(this);\r\n        },\r\n\r\n        /**\r\n         * Equivalent to:\r\n         *  if (conditionA && conditionB)\r\n         * @example\r\n         * {{#all displayTitle body instruction}}\r\n         * <div class=\"component__header {{_component}}__header\"></div>\r\n         * {{/all}}\r\n         */\r\n        all: function() {\r\n            var args = Array.prototype.slice.call(arguments, 0, -1);\r\n            var block = Array.prototype.slice.call(arguments, -1)[0];\r\n\r\n            return _.all(args) ? block.fn(this) : block.inverse(this);\r\n        },\r\n\r\n        /**\r\n         * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON\r\n         */\r\n        compile: function(template, context) {\r\n            if (!template) return \"\";\r\n            if (template instanceof Object) template = template.toString();\r\n            var data = this;\r\n            if (context) {\r\n                // choose between a passed argument context or the default handlebars helper context\r\n                data = (!context.data || !context.data.root ? context : context.data.root);\r\n            }\r\n            return Handlebars.compile(template)(data);\r\n        },\r\n\r\n        /**\r\n         * Allow JSON to be a template and accessible text\r\n         */\r\n        compile_a11y_text: function(template, context) {\r\n            Adapt.log.warn(\"DEPRECATED: a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/\");\r\n            return helpers.compile.call(this, template, context);\r\n        },\r\n\r\n        /**\r\n         * Allow JSON to be a template and normalized text\r\n         */\r\n        compile_a11y_normalize: function(template, context) {\r\n            if (!template) return \"\";\r\n            if (template instanceof Object) template = template.toString();\r\n            return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));\r\n        },\r\n\r\n        /**\r\n         * Remove all html tags except styling tags\r\n         */\r\n        compile_a11y_remove_breaks: function(template, context) {\r\n            if (!template) return \"\";\r\n            return Handlebars.helpers.a11y_remove_breaks.call(this, helpers.compile.call(this, template, context));\r\n        },\r\n\r\n        /**\r\n         * makes the _globals object in course.json available to a template\r\n         */\r\n        import_globals: function(context) {\r\n            if (context.data.root._globals) return \"\";\r\n            context.data.root._globals = Adapt.course.get('_globals');\r\n            return \"\";\r\n        },\r\n\r\n        /**\r\n         * makes the Adapt module data available to a template\r\n         */\r\n        import_adapt: function(context) {\r\n\r\n            if (context.data.root.Adapt) return;\r\n            var adapt = context.data.root.Adapt = {};\r\n\r\n            var i, l, name;\r\n\r\n            var directImport = ['config','course'];\r\n            for (i = 0, l = directImport.length; i < l; i++) {\r\n                name = directImport[i];\r\n                // convert the model to a json object and add to the current context\r\n                adapt[name] = Adapt[name].toJSON();\r\n            }\r\n\r\n            var indexedImport = ['contentObjects','articles','blocks','components'];\r\n            for (i = 0, l = indexedImport.length; i < l; i++) {\r\n                name = indexedImport[i];\r\n                // convert the collection of models to an array of json objects\r\n                var importArray = Adapt[name].toJSON();\r\n                // convert the array of json models to an object indexed by id\r\n                var importIndex = {};\r\n                for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {\r\n                    var item = importArray[i1];\r\n                    importIndex[item._id] = item;\r\n                }\r\n                // add the indexed object to the current context\r\n                adapt[name] = importIndex;\r\n            }\r\n\r\n            return \"\";\r\n\r\n        },\r\n\r\n        /**\r\n         * Allow components to fetch their component description.\r\n         */\r\n        component_description: function(override, context) {\r\n            if (!this._isA11yComponentDescriptionEnabled) return;\r\n            if (!this._globals._components || !this._globals._components['_'+this._component]) return;\r\n            var hasOverride = (arguments.length > 1);\r\n            var description;\r\n            if (hasOverride) {\r\n                description = override;\r\n                description = helpers.compile(description, context);\r\n            } else {\r\n                description = this._globals._components['_'+this._component].ariaRegion;\r\n                description = helpers.compile(description, override);\r\n            }\r\n            if (!description) return;\r\n            return new Handlebars.SafeString('<div class=\"aria-label\">'+description+'</div>');\r\n        }\r\n\r\n    };\r\n\r\n    // Compatibility references\r\n    helpers['if_value_equals'] = helpers['equals'];\r\n    helpers['numbers'] = helpers['inc'];\r\n    helpers['lowerCase'] = helpers['lowercase'];\r\n\r\n    for (var name in helpers) {\r\n        if (helpers.hasOwnProperty(name)) {\r\n             Handlebars.registerHelper(name, helpers[name]);\r\n        }\r\n    }\r\n\r\n    return helpers;\r\n\r\n});\r\n\n","define('core/js/scrolling',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var Scrolling = Backbone.Controller.extend({\r\n\r\n        $html: null,\r\n        $app: null,\r\n        isLegacyScrolling : true,\r\n\r\n        initialize: function() {\r\n            this._checkApp();\r\n            Adapt.once('configModel:loadCourseData', this._loadConfig.bind(this));\r\n        },\r\n\r\n        _checkApp: function() {\r\n            this.$html = $('html');\r\n            this.$app = $('#app');\r\n            if (this.$app.length) return;\r\n            this.$app = $('<div id=\"app\">');\r\n            $('body').append(this.$app);\r\n            this.$app.append($('#wrapper'));\r\n            Adapt.log.warn(\"UPDATE - Your html file needs to have #app adding. See https://github.com/adaptlearning/adapt_framework/issues/2168\");\r\n        },\r\n\r\n        _loadConfig: function() {\r\n            var config = Adapt.config.get(\"_scrollingContainer\");\r\n            if (!config || !config._isEnabled) return;\r\n            var limitTo = config._limitToSelector;\r\n            var isIncluded = !limitTo || (this.$html.is(limitTo) || this.$html.hasClass(limitTo));\r\n            if (!isIncluded) return;\r\n            this.isLegacyScrolling = false;\r\n            this._addStyling();\r\n            this._fixJQuery();\r\n            this._fixScrollTo();\r\n            this._fixBrowser();\r\n        },\r\n\r\n        _addStyling: function() {\r\n            this.$html.addClass(\"adapt-scrolling\");\r\n        },\r\n\r\n        _fixJQuery: function() {\r\n            var selectorScrollTop = $.fn.scrollTop;\r\n            var $app = Adapt.scrolling.$app;\r\n            $.fn.scrollTop = function() {\r\n                if (this[0] === window || this[0] === document.body) {\r\n                    return selectorScrollTop.apply($app, arguments);\r\n                }\r\n                return selectorScrollTop.apply(this, arguments);\r\n            };\r\n            var selectorOffset = $.fn.offset;\r\n            $.fn.offset = function() {\r\n                var $app = Adapt.scrolling.$app;\r\n                var $element = this;\r\n                var elementOffset = selectorOffset.call($element);\r\n                var isCorrectedContainer = $element.parents().add($element).filter('html,body,#app').length;\r\n                if (!isCorrectedContainer) {\r\n                    // Do not adjust the offset measurement as not in $app container and isn't html or body\r\n                    return elementOffset;\r\n                }\r\n                // Adjust measurement by scrolling and offset of $app container\r\n                var scrollTop = parseInt($app.scrollTop());\r\n                var scrollLeft = parseInt($app.scrollLeft());\r\n                var appOffset = selectorOffset.call($app);\r\n                elementOffset.top += (scrollTop - appOffset.top);\r\n                elementOffset.left += (scrollLeft - appOffset.left);\r\n                return elementOffset;\r\n            };\r\n        },\r\n\r\n        _fixScrollTo: function() {\r\n            var selectorScrollTo = $.fn.scrollTo;\r\n            var scrollTo = $.scrollTo;\r\n            var $app = Adapt.scrolling.$app;\r\n            $.fn.scrollTo = function(target, duration, settings) {\r\n                if (this[0] === window || this[0] === document.body) {\r\n                    return selectorScrollTo.apply($app, arguments);\r\n                }\r\n                return selectorScrollTo.apply(this, arguments);\r\n            };\r\n            $.scrollTo = function(target, duration, settings) {\r\n                return selectorScrollTo.apply($app, arguments);\r\n            };\r\n            _.extend($.scrollTo, scrollTo);\r\n        },\r\n\r\n        _fixBrowser: function() {\r\n            var app = Adapt.scrolling.$app[0];\r\n            window.scrollTo = function(x, y) {\r\n                app.scrollTop = y || 0;\r\n                app.scrollLeft = x || 0;\r\n            };\r\n            var $window = $(window);\r\n            this.$app.on(\"scroll\", function() {\r\n                $window.scroll();\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    Adapt.scrolling = new Scrolling();\r\n\r\n    Adapt.scrollTo = function(selector, settings) {\r\n        // Get the current location - this is set in the router\r\n        var location = (Adapt.location._contentType) ?\r\n            Adapt.location._contentType : Adapt.location._currentLocation;\r\n        // Trigger initial scrollTo event\r\n        Adapt.trigger(location+':scrollTo', selector);\r\n        //Setup duration variable passed upon arguments\r\n        var settings = (settings || {});\r\n        var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\r\n        if (disableScrollToAnimation) {\r\n            settings.duration = 0;\r\n        }\r\n        else if (!settings.duration) {\r\n            settings.duration = $.scrollTo.defaults.duration;\r\n        }\r\n\r\n        var offsetTop = 0;\r\n        if (Adapt.scrolling.isLegacyScrolling) {\r\n            offsetTop = -$(\".navigation\").outerHeight();\r\n            // prevent scroll issue when component description aria-label coincident with top of component\r\n            if ($(selector).hasClass('component')) {\r\n                offsetTop -= $(selector).find('.aria-label').height() || 0;\r\n            }\r\n        }\r\n\r\n        if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };\r\n        if (settings.offset.top === undefined) settings.offset.top = offsetTop;\r\n        if (settings.offset.left === undefined) settings.offset.left = 0;\r\n\r\n        if (settings.offset.left === 0) settings.axis = \"y\";\r\n\r\n        if (Adapt.get(\"_canScroll\") !== false) {\r\n            // Trigger scrollTo plugin\r\n            $.scrollTo(selector, settings);\r\n        }\r\n\r\n        // Trigger an event after animation\r\n        // 300 milliseconds added to make sure queue has finished\r\n        _.delay(function() {\r\n            $(selector).focusNext();\r\n            Adapt.trigger(location+':scrolledTo', selector);\r\n        }, settings.duration+300);\r\n    };\r\n    \r\n});\r\n\n","define('core/js/views/headingView',[\r\n    'core/js/adapt'\r\n], function(Adapt) {\r\n\r\n    var HeadingView = Backbone.View.extend({\r\n\r\n        initialize: function() {\r\n            this.listenTo(Adapt, \"remove\", this.remove);\r\n            this.listenTo(this.model, \"change:_isComplete\", this.render);\r\n            this.render();\r\n        },\r\n\r\n        render: function() {\r\n            var template = Handlebars.templates[this.constructor.template];\r\n            var data = this.model.toJSON();\r\n            var customHeadingType = this.$el.attr('data-a11y-heading-type');\r\n            if (customHeadingType) data._type = customHeadingType;\r\n            this.$el.html(template(data));\r\n            this.checkCompletion();\r\n        },\r\n\r\n        checkCompletion: function() {\r\n            var isComplete = this.model.get(\"_isComplete\");\r\n            this.$el\r\n            .toggleClass(\"complete\", isComplete)\r\n            .toggleClass(\"incomplete\", !isComplete);\r\n        }\r\n\r\n    }, {\r\n        template: 'heading'\r\n    });\r\n\r\n    return HeadingView;\r\n\r\n});\r\n\n","define('core/js/headings',[\r\n    './adapt',\r\n    './views/headingView'\r\n], function(Adapt, HeadingView) {\r\n\r\n    var Headings = Backbone.Controller.extend({\r\n\r\n        initialize: function() {\r\n            var types = [ 'menu', 'page', 'article', 'block', 'component' ];\r\n            var eventNames = types.concat(['']).join('View:render ');\r\n            this.listenTo(Adapt, eventNames, this.onViewRender);\r\n        },\r\n\r\n        onViewRender: function(view) {\r\n            var $headingSeats = view.$('.js-heading');\r\n            $headingSeats.each(function(index, el) {\r\n                new HeadingView({\r\n                    el: el,\r\n                    model: view.model\r\n                });\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    return new Headings();\r\n\r\n});\r\n\r\n\r\n\n","define('core/js/models/itemModel',[],function() {\r\n\r\n    var ItemModel = Backbone.Model.extend({\r\n\r\n        defaults: {\r\n            _isActive: false,\r\n            _isVisited: false\r\n        },\r\n\r\n        reset: function() {\r\n            this.set({ _isActive: false, _isVisited: false });\r\n        },\r\n\r\n        toggleActive: function(isActive) {\r\n            if (isActive === undefined) {\r\n                isActive = !this.get('_isActive');\r\n            }\r\n\r\n            this.set('_isActive', isActive);\r\n        },\r\n\r\n        toggleVisited: function(isVisited) {\r\n            if (isVisited === undefined) {\r\n                isVisited = !this.get('_isVisited');\r\n            }\r\n\r\n            this.set('_isVisited', isVisited);\r\n        }\r\n\r\n    });\r\n\r\n    return ItemModel;\r\n\r\n});\r\n\n","define('core/js/models/itemsComponentModel',[\r\n    'core/js/models/componentModel',\r\n    'core/js/models/itemModel'\r\n], function(ComponentModel, ItemModel) {\r\n\r\n    var ItemsComponentModel = ComponentModel.extend({\r\n\r\n        toJSON: function() {\r\n            var json = _.clone(this.attributes);\r\n            json._items = this.get('_children').toJSON();\r\n\r\n            return json;\r\n        },\r\n\r\n        init: function() {\r\n            this.setUpItems();\r\n\r\n            this.listenTo(this.get('_children'), {\r\n                'change:_isVisited': this.checkCompletionStatus\r\n            });\r\n        },\r\n\r\n        setUpItems: function() {\r\n            var items = this.get('_items');\r\n            items.forEach(function(item, index) {\r\n                item._index = index;\r\n            });\r\n\r\n            this.set('_children', new Backbone.Collection(items, { model: ItemModel }));\r\n        },\r\n\r\n        getItem: function(index) {\r\n            return this.get('_children').findWhere({ _index: index });\r\n        },\r\n\r\n        getVisitedItems: function() {\r\n            return this.get('_children').where({ _isVisited: true });\r\n        },\r\n\r\n        getActiveItems: function() {\r\n            return this.get('_children').where({ _isActive: true });\r\n        },\r\n\r\n        getActiveItem: function() {\r\n            return this.get('_children').findWhere({ _isActive: true });\r\n        },\r\n\r\n        areAllItemsCompleted: function() {\r\n            return this.getVisitedItems().length === this.get('_children').length;\r\n        },\r\n\r\n        checkCompletionStatus: function() {\r\n            if (this.areAllItemsCompleted()) {\r\n                this.setCompletionStatus();\r\n            }\r\n        },\r\n\r\n        reset: function(type, force) {\r\n            this.get('_children').each(function(item) { item.reset(); });\r\n\r\n            ComponentModel.prototype.reset.call(this, type, force);\r\n        },\r\n\r\n        resetActiveItems: function() {\r\n            this.get('_children').each(function(item) { item.toggleActive(false); });\r\n        },\r\n\r\n        setActiveItem: function(index) {\r\n            var activeItem = this.getActiveItem();\r\n            if (activeItem) activeItem.toggleActive(false);\r\n            this.getItem(index).toggleActive(true);\r\n        }\r\n\r\n    });\r\n\r\n    return ItemsComponentModel;\r\n\r\n});\r\n\n","define('components/adapt-contrib-accordion/js/accordionModel',[\n    'core/js/models/itemsComponentModel'\n], function(ItemsComponentModel) {\n\n    var AccordionModel = ItemsComponentModel.extend({\n\n        defaults: function() {\n            return _.extend({}, _.result(ItemsComponentModel.prototype, 'defaults'), {\n                _shouldCollapseItems: true,\n                _toggleSpeed: 200\n            });\n        },\n\n        toggleItemsState: function(index) {\n            var item = this.getItem(index);\n            var previousActiveItem = this.getActiveItem();\n\n            item.toggleActive();\n            item.toggleVisited(true);\n\n            if (previousActiveItem && this.get('_shouldCollapseItems')) {\n                previousActiveItem.toggleActive(false);\n            }\n        }\n\n    });\n\n    return AccordionModel;\n\n});\n\n","define('core/js/views/componentView',[\r\n    'core/js/adapt',\r\n    'core/js/views/adaptView'\r\n], function(Adapt, AdaptView) {\r\n\r\n    var ComponentView = AdaptView.extend({\r\n\r\n        attributes: function() {\r\n            if (!this.model.get(\"_isA11yRegionEnabled\")) {\r\n                return AdaptView.resultExtend('attributes', {}, this);\r\n            }\r\n            return AdaptView.resultExtend('attributes', {\r\n                \"aria-labelledby\": this.model.get('_id')+\"-heading\",\r\n                \"role\": \"region\"\r\n            }, this);\r\n        },\r\n\r\n        className: function() {\r\n            return [\r\n                'component',\r\n                this.model.get('_component') +'-component',\r\n                this.model.get('_id'),\r\n                this.model.get('_classes'),\r\n                this.setVisibility(),\r\n                this.setHidden(),\r\n                'component-' + this.model.get('_layout'),\r\n                'nth-child-' + this.model.get('_nthChild'),\r\n                (this.model.get('_isComplete') ? 'completed' : '')\r\n            ].join(' ');\r\n        },\r\n\r\n        renderState: function() {\r\n            Adapt.log.warn(\"REMOVED - renderState is removed and moved to item title\");\r\n        },\r\n\r\n        /**\r\n         * Allows components that want to use inview for completion to set that up\r\n         * @param {string} [inviewElementSelector] Allows to you to specify (via a selector) which DOM element to use for inview.\r\n         * Defaults to `'.component-inner'` if not supplied.\r\n         * @param {function} [callback] Allows you to specify what function is called when the component has been viewed, should\r\n         * you want to perform additional checks before setting the component to completed - see adapt-contrib-assessmentResults\r\n         * for an example. Defaults to `view.setCompletionStatus` if not specified.\r\n         */\r\n        setupInviewCompletion: function(inviewElementSelector, callback) {\r\n            this.$inviewElement = this.$(inviewElementSelector || '.component-inner');\r\n            this.inviewCallback = (callback || this.setCompletionStatus);\r\n\r\n            this.$inviewElement.on('inview.componentView', this.onInview.bind(this));\r\n        },\r\n\r\n        removeInviewListener: function() {\r\n            if (!this.$inviewElement) return;\r\n            this.$inviewElement.off('inview.componentView');\r\n            this.$inviewElement = null;\r\n        },\r\n\r\n        onInview: function(event, visible, visiblePartX, visiblePartY) {\r\n            if (!visible) return;\r\n\r\n            switch (visiblePartY) {\r\n                case 'top':\r\n                    this.hasSeenTop = true;\r\n                    break;\r\n                case 'bottom':\r\n                    this.hasSeenBottom = true;\r\n                    break;\r\n                case 'both':\r\n                    this.hasSeenTop = this.hasSeenBottom = true;\r\n            }\r\n\r\n            if (!this.hasSeenTop || !this.hasSeenBottom) return;\r\n\r\n            this.inviewCallback();\r\n\r\n            if (this.model.get('_isComplete')) {\r\n                this.removeInviewListener();\r\n            }\r\n        },\r\n\r\n        postRender: function() {},\r\n\r\n        remove: function() {\r\n            this.removeInviewListener();\r\n\r\n            AdaptView.prototype.remove.call(this);\r\n        }\r\n\r\n    }, {\r\n        type:'component'\r\n    });\r\n\r\n    return ComponentView;\r\n\r\n});\r\n\n","define('components/adapt-contrib-accordion/js/accordionView',[\n    'core/js/views/componentView'\n], function(ComponentView) {\n\n    var AccordionView = ComponentView.extend({\n\n        events: {\n            'click .accordion-item-title': 'onClick'\n        },\n\n        preRender: function() {\n            this.checkIfResetOnRevisit();\n\n            this.model.resetActiveItems();\n\n            this.listenTo(this.model.get('_children'), {\n                'change:_isActive': this.onItemsActiveChange,\n                'change:_isVisited': this.onItemsVisitedChange\n            });\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n\n            if (this.model.get('_setCompletionOn') === 'inview') {\n                this.setupInviewCompletion();\n            }\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        onClick: function(event) {\n            event.preventDefault();\n\n            this.model.toggleItemsState($(event.currentTarget).parent().data('index'));\n        },\n\n        onItemsActiveChange: function(item, isActive) {\n            this.toggleItem(item, isActive);\n        },\n\n        onItemsVisitedChange: function(item, isVisited) {\n            if (!isVisited) return;\n\n            var $item = this.getItemElement(item);\n\n            $item.children('.accordion-item-title').addClass('visited');\n        },\n\n        toggleItem: function(item, shouldExpand) {\n            var $item = this.getItemElement(item);\n            var $body = $item.children('.accordion-item-body').stop(true, true);\n\n            $item.children('.accordion-item-title')\n                .toggleClass('selected', shouldExpand)\n                .attr('aria-expanded', shouldExpand);\n            $item.find('.accordion-item-title-icon')\n                .toggleClass('icon-plus', !shouldExpand)\n                .toggleClass('icon-minus', shouldExpand);\n\n            if (!shouldExpand) {\n                $body.slideUp(this.model.get('_toggleSpeed'));\n                return;\n            }\n\n            $body.slideDown(this.model.get('_toggleSpeed'));\n        },\n\n        getItemElement: function(item) {\n            var index = item.get('_index');\n\n            return this.$('.accordion-item').filter('[data-index=\"' + index +'\"]');\n        }\n\n    });\n\n    return AccordionView;\n\n});\n\n","define('components/adapt-contrib-accordion/js/adapt-contrib-accordion',[\n    'core/js/adapt',\n    './accordionModel',\n    './accordionView'\n], function(Adapt, AccordionModel, AccordionView) {\n\n    return Adapt.register('accordion', {\n        model: AccordionModel,\n        view: AccordionView\n    });\n\n});\n\n","define('components/adapt-contrib-assessmentResults/js/assessmentResultsModel',[\n    'core/js/adapt',\n    'core/js/models/componentModel'\n], function(Adapt, ComponentModel) {\n\n    var AssessmentResultsModel = ComponentModel.extend({\n\n        init: function() {\n            this.set('originalBody', this.get('body'));// save the original body text so we can restore it when the assessment is reset\n\n            this.listenTo(Adapt, {\n                'assessments:complete': this.onAssessmentComplete,\n                'assessments:reset': this.onAssessmentReset\n            });\n        },\n\n        /**\n         * Checks to see if the assessment was completed in a previous session or not\n         */\n        checkIfAssessmentComplete: function() {\n            if (!Adapt.assessment || this.get('_assessmentId') === undefined) {\n                return;\n            }\n\n            var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));\n            if (!assessmentModel || assessmentModel.length === 0) return;\n\n            var state = assessmentModel.getState();\n            if (state.isComplete) {\n                this.onAssessmentComplete(state);\n                return;\n            }\n\n            this.setVisibility();\n        },\n\n        onAssessmentComplete: function(state) {\n            if (this.get('_assessmentId') === undefined ||\n                this.get('_assessmentId') != state.id) return;\n\n            /*\n            make shortcuts to some of the key properties in the state object so that\n            content developers can just use {{attemptsLeft}} in json instead of {{state.attemptsLeft}}\n            */\n            this.set( {\n                _state: state,\n                attempts: state.attempts,\n                attemptsSpent: state.attemptsSpent,\n                attemptsLeft: state.attemptsLeft,\n                score: state.score,\n                scoreAsPercent: state.scoreAsPercent,\n                maxScore: state.maxScore,\n                isPass: state.isPass\n            });\n\n            this.setFeedbackBand(state);\n\n            this.checkRetryEnabled(state);\n\n            this.setFeedbackText();\n\n            this.toggleVisibility(true);\n        },\n\n        setFeedbackBand: function(state) {\n            var scoreProp = state.isPercentageBased ? 'scoreAsPercent' : 'score';\n            var bands = _.sortBy(this.get('_bands'), '_score');\n\n            for (var i = (bands.length - 1); i >= 0; i--) {\n                var isScoreInBandRange =  (state[scoreProp] >= bands[i]._score);\n                if (!isScoreInBandRange) continue;\n\n                this.set('_feedbackBand', bands[i]);\n                break;\n            }\n        },\n\n        checkRetryEnabled: function(state) {\n            var assessmentModel = Adapt.assessment.get(state.id);\n            if (!assessmentModel.canResetInPage()) return false;\n\n            var feedbackBand = this.get('_feedbackBand');\n            var isRetryEnabled = (feedbackBand && feedbackBand._allowRetry) !== false;\n            var isAttemptsLeft = (state.attemptsLeft > 0 || state.attemptsLeft === 'infinite');\n            var showRetry = isRetryEnabled && isAttemptsLeft && (!state.isPass || state.allowResetIfPassed);\n\n            this.set({\n                _isRetryEnabled: showRetry,\n                retryFeedback: showRetry ? this.get('_retry').feedback : ''\n            });\n        },\n\n        setFeedbackText: function() {\n            var feedbackBand = this.get('_feedbackBand');\n\n            // ensure any handlebars expressions in the .feedback are handled...\n            var feedback = feedbackBand ? Handlebars.compile(feedbackBand.feedback)(this.toJSON()) : '';\n\n            this.set({\n                feedback: feedback,\n                body: this.get('_completionBody')\n            });\n        },\n\n        setVisibility: function() {\n            if (!Adapt.assessment) return;\n\n            var isVisibleBeforeCompletion = this.get('_isVisibleBeforeCompletion') || false;\n            var wasVisible = this.get('_isVisible');\n\n            var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));\n            if (!assessmentModel || assessmentModel.length === 0) return;\n\n            var state = assessmentModel.getState();\n            var isComplete = state.isComplete;\n            var isAttemptInProgress = state.attemptInProgress;\n            var attemptsSpent = state.attemptsSpent;\n            var hasHadAttempt = (!isAttemptInProgress && attemptsSpent > 0);\n\n            var isVisible = (isVisibleBeforeCompletion && !isComplete) || hasHadAttempt;\n\n            if (!wasVisible && isVisible) isVisible = false;\n\n            this.toggleVisibility(isVisible);\n        },\n\n        toggleVisibility: function (isVisible) {\n            if (isVisible === undefined) {\n                isVisible = !this.get('_isVisible');\n            }\n\n            this.set('_isVisible', isVisible, {pluginName: 'assessmentResults'});\n        },\n\n        checkCompletion: function() {\n            if (this.get('_setCompletionOn') === 'pass' && !this.get('isPass')) {\n                return;\n            }\n\n            this.setCompletionStatus();\n        },\n\n        /**\n         * Handles resetting the component whenever its corresponding assessment is reset\n         * The component can either inherit the assessment's reset type or define its own\n         */\n        onAssessmentReset: function(state) {\n            if (this.get('_assessmentId') === undefined ||\n                this.get('_assessmentId') != state.id) return;\n\n            var resetType = this.get('_resetType');\n            if (!resetType || resetType === 'inherit') {\n                resetType = state.resetType || 'hard';// backwards compatibility - state.resetType was only added in assessment v2.3.0\n            }\n            this.reset(resetType, true);\n        },\n\n        reset: function() {\n            this.set({\n                body: this.get('originalBody'),\n                state: null,\n                feedback: '',\n                _feedbackBand: null,\n                retryFeedback: '',\n                _isRetryEnabled: false\n            });\n\n            ComponentModel.prototype.reset.apply(this, arguments);\n        }\n    });\n\n    return AssessmentResultsModel;\n\n});\n\n","define('components/adapt-contrib-assessmentResults/js/assessmentResultsView',[\n    'core/js/adapt',\n    'core/js/views/componentView'\n], function(Adapt, ComponentView) {\n\n    var AssessmentResultsView = ComponentView.extend({\n\n        events: {\n            'click .results-retry-button button': 'onRetryClicked'\n        },\n\n        preRender: function () {\n            this.model.setLocking('_isVisible', false);\n\n            this.listenTo(Adapt, 'preRemove', function () {\n                this.model.unsetLocking('_isVisible');\n            });\n\n            this.listenTo(this.model, {\n                'change:_feedbackBand': this.addClassesToArticle,\n                'change:body': this.render\n            });\n\n            this.model.checkIfAssessmentComplete();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n            this.setupInviewCompletion('.component-inner', this.model.checkCompletion.bind(this.model));\n        },\n\n        /**\n         * Resets the state of the assessment and optionally redirects the user\n         * back to the assessment for another attempt.\n         */\n        onRetryClicked: function() {\n            var state = this.model.get('_state');\n\n            Adapt.assessment.get(state.id).reset();\n\n            if (this.model.get('_retry')._routeToAssessment === true) {\n                Adapt.navigateToElement('.' + state.articleId);\n            }\n        },\n\n        /**\n         * If there are classes specified for the feedback band, apply them to the containing article\n         * This allows for custom styling based on the band the user's score falls into\n         */\n        addClassesToArticle: function(model, value) {\n            if (!value || !value._classes) return;\n\n            this.$el.parents('.article').addClass(value._classes);\n        }\n\n    }, {\n        template: 'assessmentResults'\n    });\n\n    return AssessmentResultsView;\n});\n\n","define('components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults',[\n    'core/js/adapt',\n    './assessmentResultsModel',\n    './assessmentResultsView'\n], function(Adapt, AssessmentResultsModel, AssessmentResultsView) {\n\n    return Adapt.register(\"assessmentResults\", {\n        model: AssessmentResultsModel,\n        view: AssessmentResultsView\n    });\n\n});\n\n","define('components/adapt-contrib-blank/js/adapt-contrib-blank',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'core/js/models/componentModel'\n], function(Adapt, ComponentView, ComponentModel) {\n\n    var BlankView = ComponentView.extend({\n\n        preRender: function() {\n            this.$el.addClass('no-state');\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n            this.setupInviewCompletion();\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        }\n\n    });\n\n    return Adapt.register('blank', {\n        model: ComponentModel.extend({}),// create a new class in the inheritance chain so it can be extended per component type if necessary later\n        view: BlankView\n    });\n\n});\n\n","define('core/js/views/buttonsView',[\r\n    'core/js/adapt',\r\n    'core/js/enums/buttonStateEnum'\r\n], function(Adapt, BUTTON_STATE) {\r\n\r\n    //convert BUTTON_STATE to property name\r\n    var textPropertyName = {\r\n        \"SUBMIT\": \"submit\",\r\n        \"CORRECT\": \"correct\",\r\n        \"INCORRECT\": \"incorrect\",\r\n        \"SHOW_CORRECT_ANSWER\": \"showCorrectAnswer\",\r\n        \"HIDE_CORRECT_ANSWER\": \"hideCorrectAnswer\",\r\n        \"SHOW_FEEDBACK\": \"showFeedback\",\r\n        \"RESET\": \"reset\"\r\n    };\r\n\r\n    var ButtonsView = Backbone.View.extend({\r\n\r\n        initialize: function(options) {\r\n            this.parent = options.parent;\r\n\r\n            this.listenTo(Adapt, 'remove', this.remove);\r\n            this.listenTo(this.model, 'change:_buttonState', this.onButtonStateChanged);\r\n            this.listenTo(this.model, 'change:feedbackMessage', this.onFeedbackMessageChanged);\r\n            this.listenTo(this.model, 'change:_attemptsLeft', this.onAttemptsChanged);\r\n            this.render();\r\n        },\r\n\r\n        events: {\r\n            'click .buttons-action': 'onActionClicked',\r\n            'click .buttons-feedback': 'onFeedbackClicked'\r\n        },\r\n\r\n        render: function() {\r\n            var data = this.model.toJSON();\r\n            var template = Handlebars.templates['buttons'];\r\n            _.defer(_.bind(function() {\r\n                this.postRender();\r\n                Adapt.trigger('buttonsView:postRender', this);\r\n            }, this));\r\n            this.$el.html(template(data));\r\n        },\r\n\r\n        postRender: function() {\r\n            this.refresh();\r\n        },\r\n\r\n        checkResetSubmittedState: function() {\r\n            var isSubmitted = this.model.get('_isSubmitted');\r\n\r\n            if (!isSubmitted) {\r\n\r\n                var $icon = this.$('.buttons-marking-icon');\r\n                $icon.removeClass('icon-cross');\r\n                $icon.removeClass('icon-tick');\r\n                $icon.addClass('display-none');\r\n                this.$el.removeClass(\"submitted\");\r\n                this.model.set('feedbackMessage', undefined);\r\n                this.$('.buttons-feedback').a11y_cntrl_enabled(false);\r\n\r\n            } else {\r\n\r\n                this.$el.addClass(\"submitted\");\r\n\r\n            }\r\n        },\r\n\r\n        onActionClicked: function() {\r\n            var buttonState = this.model.get('_buttonState');\r\n            this.trigger('buttons:stateUpdate', BUTTON_STATE(buttonState));\r\n            this.checkResetSubmittedState();\r\n        },\r\n\r\n        onFeedbackClicked: function() {\r\n            this.trigger('buttons:stateUpdate', BUTTON_STATE.SHOW_FEEDBACK);\r\n        },\r\n\r\n        onFeedbackMessageChanged: function(model, changedAttribute) {\r\n            if (changedAttribute && this.model.get('_canShowFeedback')) {\r\n                //enable feedback button\r\n                this.$('.buttons-feedback').a11y_cntrl_enabled(true);\r\n            } else {\r\n                //disable feedback button\r\n                this.$('.buttons-feedback').a11y_cntrl_enabled(false);\r\n            }\r\n        },\r\n\r\n        onButtonStateChanged: function(model, changedAttribute) {\r\n\r\n            this.updateAttemptsCount();\r\n\r\n            // Use 'correct' instead of 'complete' to signify button state\r\n            var $buttonsAction = this.$('.buttons-action');\r\n            var buttonState = BUTTON_STATE(changedAttribute);\r\n            if (changedAttribute === BUTTON_STATE.CORRECT || changedAttribute === BUTTON_STATE.INCORRECT) {\r\n                // Both 'correct' and 'incorrect' states have no model answer, so disable the submit button\r\n\r\n                $buttonsAction.a11y_cntrl_enabled(false);\r\n\r\n            } else {\r\n\r\n                var propertyName = textPropertyName[buttonState.asString];\r\n                var ariaLabel = this.model.get('_buttons')[\"_\" + propertyName].ariaLabel;\r\n                var buttonText = this.model.get('_buttons')[\"_\" + propertyName].buttonText;\r\n\r\n                // Enable the button, make accessible and update aria labels and text\r\n                $buttonsAction.a11y_cntrl_enabled(true).html(buttonText).attr('aria-label', ariaLabel);\r\n\r\n                // Make model answer button inaccessible (but still enabled) for visual users due to\r\n                // the inability to represent selected incorrect/correct answers to a screen reader, may need revisiting\r\n                switch (changedAttribute) {\r\n                    case BUTTON_STATE.SHOW_CORRECT_ANSWER:\r\n                    case BUTTON_STATE.HIDE_CORRECT_ANSWER:\r\n\r\n                        $buttonsAction.a11y_cntrl(false);\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        checkFeedbackState: function(){\r\n            var canShowFeedback = this.model.get('_canShowFeedback');\r\n\r\n            this.$('.buttons-action').toggleClass('buttons-action-fullwidth buttons-action-enlarge', !canShowFeedback);\r\n            this.$('.buttons-feedback').toggleClass('no-feedback', !canShowFeedback);\r\n            this.$('.buttons-marking-icon').toggleClass('no-feedback', !canShowFeedback);\r\n        },\r\n\r\n        updateAttemptsCount: function(model, changedAttribute) {\r\n            var isInteractionComplete = this.model.get('_isInteractionComplete');\r\n            var attemptsLeft = (this.model.get('_attemptsLeft')) ? this.model.get('_attemptsLeft') : this.model.get('_attempts');\r\n            var isCorrect = this.model.get('_isCorrect');\r\n            var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');\r\n            var attemptsString;\r\n\r\n            this.checkResetSubmittedState();\r\n\r\n            if (!isInteractionComplete && attemptsLeft != 0) {\r\n                attemptsString = attemptsLeft + \" \";\r\n                if (attemptsLeft > 1) {\r\n                    attemptsString += this.model.get('_buttons').remainingAttemptsText;\r\n                } else if (attemptsLeft === 1){\r\n                    attemptsString += this.model.get('_buttons').remainingAttemptText;\r\n                }\r\n\r\n            } else {\r\n                this.$('.buttons-display-inner').addClass('visibility-hidden');\r\n                this.showMarking();\r\n            }\r\n\r\n            if (shouldDisplayAttempts) {\r\n                this.$('.buttons-display-inner').html(attemptsString);\r\n            }\r\n\r\n        },\r\n\r\n        showMarking: function() {\r\n            if (!this.model.get('_canShowMarking')) return;\r\n\r\n            var isCorrect = this.model.get('_isCorrect');\r\n            var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;\r\n\r\n            this.$('.buttons-marking-icon')\r\n                .removeClass('display-none')\r\n                .addClass(isCorrect ? 'icon-tick' : 'icon-cross')\r\n                .attr('aria-label', isCorrect ? ariaLabels.answeredCorrectly : ariaLabels.answeredIncorrectly);\r\n        },\r\n\r\n        refresh: function() {\r\n            this.updateAttemptsCount();\r\n            this.checkResetSubmittedState();\r\n            this.checkFeedbackState();\r\n            this.onButtonStateChanged(null, this.model.get('_buttonState'));\r\n            this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));\r\n        }\r\n\r\n    });\r\n\r\n    return ButtonsView;\r\n\r\n});\r\n\n","define('core/js/views/questionView',[\r\n    'core/js/adapt',\r\n    'core/js/views/componentView',\r\n    'core/js/views/buttonsView',\r\n    'core/js/models/questionModel',\r\n    'core/js/enums/buttonStateEnum'\r\n], function(Adapt, ComponentView, ButtonsView, QuestionModel, BUTTON_STATE) {\r\n\r\n    var useQuestionModelOnly = false;\r\n\r\n    var QuestionView = ComponentView.extend({\r\n\r\n        className: function() {\r\n            return \"component \"\r\n            + \"question-component \"\r\n            + this.model.get('_component')\r\n            + \"-component \" + this.model.get('_id')\r\n            + \" \" + this.model.get('_classes')\r\n            + \" \" + this.setVisibility()\r\n            + \" component-\" + this.model.get('_layout')\r\n            + \" nth-child-\" + this.model.get(\"_nthChild\")\r\n            + (this.model.get('_isComplete') ? ' completed' : '');\r\n        },\r\n\r\n        //////\r\n        // Setup question types\r\n        ////\r\n\r\n        preRender: function() {\r\n            // Setup listener for _isEnabled\r\n            this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);\r\n\r\n            this.listenTo(this.model, 'question:refresh', this.refresh);\r\n\r\n            // Checks to see if the question should be reset on revisit\r\n            this.checkIfResetOnRevisit();\r\n            // This method helps setup default settings on the model\r\n            this._runModelCompatibleFunction(\"setupDefaultSettings\");\r\n            // Blank method for setting up questions before rendering\r\n            this.setupQuestion();\r\n\r\n        },\r\n\r\n        // Used in the question view to disabled the question when _isEnabled has been set to false\r\n        onEnabledChanged: function(model, changedAttribute) {\r\n\r\n            // If isEnabled == false add disabled class\r\n            // else remove disabled class\r\n            if (!changedAttribute) {\r\n                this.$('.component-widget').addClass('disabled');\r\n                this.disableQuestion();\r\n            } else {\r\n                this.$('.component-widget').removeClass('disabled');\r\n                this.enableQuestion();\r\n            }\r\n\r\n        },\r\n\r\n        // Used by the question to disable the question during submit and complete stages\r\n        disableQuestion: function() {},\r\n\r\n        // Used by the question to enable the question during interactions\r\n        enableQuestion: function() {},\r\n\r\n        // Used to check if the question should reset on revisit\r\n        checkIfResetOnRevisit: function() {\r\n\r\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\r\n\r\n            // If reset is enabled set defaults\r\n            // Call blank method for question to handle\r\n            if (isResetOnRevisit) {\r\n\r\n                this.model.reset(isResetOnRevisit, true);\r\n\r\n                 // Defer is added to allow the component to render\r\n                _.defer(_.bind(function() {\r\n                   this.resetQuestionOnRevisit(isResetOnRevisit);\r\n                }, this));\r\n\r\n            } else {\r\n\r\n                // If complete - display users answer\r\n                // or reset the question if not complete\r\n                var isInteractionComplete = this.model.get('_isInteractionComplete');\r\n\r\n                if (isInteractionComplete) {\r\n                    this.model.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\r\n                    // Defer is added to allow the component to render\r\n                    _.defer(_.bind(function() {\r\n                        this.onHideCorrectAnswerClicked();\r\n                    }, this));\r\n\r\n                } else {\r\n                    this.model.set('_buttonState', BUTTON_STATE.SUBMIT);\r\n                    // Defer is added to allow the component to render\r\n                    _.defer(_.bind(function() {\r\n                        this.onResetClicked();\r\n                    }, this));\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n\r\n        // Used by the question to reset the question when revisiting the component\r\n        resetQuestionOnRevisit: function(type) {},\r\n\r\n        // Left blank for question setup - should be used instead of preRender\r\n        setupQuestion: function() {},\r\n\r\n        // Calls default methods to setup after the question is rendered\r\n        postRender: function() {\r\n            this.addButtonsView();\r\n            this.onQuestionRendered();\r\n        },\r\n\r\n        // Used to setup buttonsView and sets up the internal events for the question\r\n        addButtonsView: function() {\r\n            this.buttonsView = new ButtonsView({model: this.model, el: this.$('.buttons')});\r\n\r\n            this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);\r\n\r\n        },\r\n\r\n        onButtonStateUpdate: function(button_state) {\r\n\r\n            switch (button_state) {\r\n                case BUTTON_STATE.SUBMIT:\r\n                    this.onSubmitClicked();\r\n                    break;\r\n                case BUTTON_STATE.RESET:\r\n                    this.onResetClicked();\r\n                    break;\r\n                case BUTTON_STATE.SHOW_CORRECT_ANSWER:\r\n                    this.onShowCorrectAnswerClicked();\r\n                    break;\r\n                case BUTTON_STATE.HIDE_CORRECT_ANSWER:\r\n                    this.onHideCorrectAnswerClicked();\r\n                    break;\r\n                case BUTTON_STATE.SHOW_FEEDBACK:\r\n                    this.showFeedback();\r\n                    break;\r\n            }\r\n\r\n        },\r\n\r\n        // Blank method used just like postRender is for presentational components\r\n        onQuestionRendered: function() {},\r\n\r\n        //////\r\n        // Submit process\r\n        ////\r\n\r\n        // Triggered when the submit button is clicked\r\n        onSubmitClicked: function() {\r\n            // canSubmit is setup in questions and should return a boolean\r\n            // If the question stops the user form submitting - show instruction error\r\n            // and give a blank method, onCannotSubmit to the question\r\n            var canSubmit = this._runModelCompatibleFunction(\"canSubmit\");\r\n\r\n            if(!canSubmit) {\r\n                this.showInstructionError();\r\n                this.onCannotSubmit();\r\n                return;\r\n            }\r\n\r\n            // Used to update the amount of attempts the question has\r\n            this._runModelCompatibleFunction(\"updateAttempts\");\r\n\r\n            // Used to set attributes on the model after being submitted\r\n            // Also adds a class of submitted\r\n            this._runModelCompatibleFunction(\"setQuestionAsSubmitted\");\r\n\r\n            // Used to remove instruction error that is set when\r\n            // the user has interacted in the wrong way\r\n            this.removeInstructionError();\r\n\r\n            // Used to store the users answer for later\r\n            // This is a blank method given to the question\r\n            this._runModelCompatibleFunction(\"storeUserAnswer\");\r\n\r\n            // Used to set question as correct:true/false\r\n            // Calls isCorrect which is blank for the question\r\n            // to fill out and return a boolean\r\n            this._runModelCompatibleFunction(\"markQuestion\", \"isCorrect\");\r\n\r\n            // Used by the question to set the score on the model\r\n            this._runModelCompatibleFunction(\"setScore\");\r\n\r\n            // Used by the question to display markings on the component\r\n            this.showMarking();\r\n\r\n            // Used to check if the question is complete\r\n            // Triggers setCompletionStatus and adds class to widget\r\n            this._runModelCompatibleFunction(\"checkQuestionCompletion\");\r\n\r\n            this.recordInteraction();\r\n\r\n            // Used to setup the feedback by checking against\r\n            // question isCorrect or isPartlyCorrect\r\n            this._runModelCompatibleFunction(\"setupFeedback\");\r\n\r\n            // Used to trigger an event so plugins can display feedback\r\n            // Do this before updating the buttons so that the focus can be\r\n            // shifted immediately\r\n            this.showFeedback();\r\n\r\n            // Used to update buttonsView based upon question state\r\n            // Update buttons happens before showFeedback to preserve tabindexes and after setupFeedback to allow buttons to use feedback attribute\r\n            this._runModelCompatibleFunction(\"updateButtons\");\r\n\r\n            this.onSubmitted();\r\n        },\r\n\r\n        // Adds a validation error class when the canSubmit returns false\r\n        showInstructionError: function() {\r\n            this.$(\".component-instruction-inner\").addClass(\"validation-error\");\r\n            this.$el.a11y_focus();\r\n        },\r\n\r\n        // Blank method for question to fill out when the question cannot be submitted\r\n        onCannotSubmit: function() {},\r\n\r\n        // Blank method for question to fill out when the question was successfully submitted\r\n        onSubmitted: function() {},\r\n\r\n        // Used to set _isEnabled and _isSubmitted on the model\r\n        // Also adds a 'submitted' class to the widget\r\n        setQuestionAsSubmitted: function() {\r\n            this.model.setQuestionAsSubmitted();\r\n            this.$(\".component-widget\").addClass(\"submitted\");\r\n        },\r\n\r\n        // Removes validation error class when the user canSubmit\r\n        removeInstructionError: function() {\r\n            this.$(\".component-instruction-inner\").removeClass(\"validation-error\");\r\n        },\r\n\r\n        // This is important and should give the user feedback on how they answered the question\r\n        // Normally done through ticks and crosses by adding classes\r\n        showMarking: function() {},\r\n\r\n        // Checks if the question should be set to complete\r\n        // Calls setCompletionStatus and adds complete classes\r\n        checkQuestionCompletion: function() {\r\n\r\n            var isComplete = this.model.checkQuestionCompletion();\r\n\r\n            if (isComplete) {\r\n                this.$('.component-widget').addClass('complete show-user-answer');\r\n            }\r\n\r\n        },\r\n\r\n        recordInteraction:function() {\r\n            if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {\r\n                Adapt.trigger('questionView:recordInteraction', this);\r\n            }\r\n        },\r\n\r\n        // Used to show feedback based upon whether _canShowFeedback is true\r\n        showFeedback: function() {\r\n\r\n            if (this.model.get('_canShowFeedback')) {\r\n                Adapt.trigger('questionView:showFeedback', this);\r\n            } else {\r\n                Adapt.trigger('questionView:disabledFeedback', this);\r\n            }\r\n\r\n        },\r\n\r\n        onResetClicked: function() {\r\n            this.setQuestionAsReset();\r\n\r\n            this._runModelCompatibleFunction(\"updateButtons\");\r\n\r\n            this._runModelCompatibleFunction(\"resetUserAnswer\");\r\n\r\n            this.resetQuestion();\r\n\r\n            // onResetClicked is called as part of the checkIfResetOnRevisit\r\n            // function and as a button click. if the view is already rendered,\r\n            // then the button was clicked, focus on the first tabbable element\r\n            if (!this.model.get(\"_isReady\")) return;\r\n            // Attempt to get the current page location\r\n            var currentModel = Adapt.findById(Adapt.location._currentId);\r\n            // Make sure the page is ready\r\n            if (!currentModel || !currentModel.get(\"_isReady\")) return;\r\n            // Focus on the first readable item in this element\r\n            this.$el.focusNext();\r\n\r\n        },\r\n\r\n        setQuestionAsReset: function() {\r\n            this.model.setQuestionAsReset();\r\n            this.$(\".component-widget\").removeClass(\"submitted\");\r\n        },\r\n\r\n        // Used by the question view to reset the look and feel of the component.\r\n        // This could also include resetting item data\r\n        // This is triggered when the reset button is clicked so it shouldn't\r\n        // be a full reset\r\n        resetQuestion: function() {},\r\n\r\n        refresh: function() {\r\n            this.model.set('_buttonState', this.model.getButtonState());\r\n\r\n            if (this.model.get('_canShowMarking') && this.model.get('_isInteractionComplete') && this.model.get('_isSubmitted')) {\r\n                this.showMarking();\r\n            }\r\n\r\n            if (this.buttonsView) {\r\n                _.defer(_.bind(this.buttonsView.refresh, this.buttonsView));\r\n            }\r\n        },\r\n\r\n        onShowCorrectAnswerClicked: function() {\r\n            this.setQuestionAsShowCorrect();\r\n\r\n            this._runModelCompatibleFunction(\"updateButtons\");\r\n\r\n            this.showCorrectAnswer();\r\n        },\r\n\r\n        setQuestionAsShowCorrect: function() {\r\n            this.$(\".component-widget\")\r\n                .addClass(\"submitted show-correct-answer\")\r\n                .removeClass(\"show-user-answer\");\r\n        },\r\n\r\n        // Used by the question to display the correct answer to the user\r\n        showCorrectAnswer: function() {},\r\n\r\n        onHideCorrectAnswerClicked: function() {\r\n            this.setQuestionAsHideCorrect();\r\n\r\n            this._runModelCompatibleFunction(\"updateButtons\");\r\n\r\n            this.hideCorrectAnswer();\r\n        },\r\n\r\n        setQuestionAsHideCorrect: function() {\r\n            this.$(\".component-widget\")\r\n                .addClass(\"submitted show-user-answer\")\r\n                .removeClass(\"show-correct-answer\");\r\n        },\r\n\r\n        // Used by the question to display the users answer and\r\n        // hide the correct answer\r\n        // Should use the values stored in storeUserAnswer\r\n        hideCorrectAnswer: function() {},\r\n\r\n        // Time elapsed between the time the interaction was made available to the learner for response and the time of the first response\r\n        getLatency:function() {\r\n            return null;\r\n        },\r\n\r\n        // This function is overridden if useQuestionModeOnly: false. see below.\r\n        _runModelCompatibleFunction: function(name, lookForViewOnlyFunction) {\r\n            return this.model[name](); //questionModel Only\r\n        }\r\n\r\n    }, {\r\n        _isQuestionType: true\r\n    });\r\n\r\n\r\n    //allows us to turn on and off the questionView style and use the separated questionModel+questionView style only\r\n    if (useQuestionModelOnly) return QuestionView;\r\n\r\n    /*BACKWARDS COMPATIBILITY SECTION\r\n    * This section below is only for compatibility between the separated questionView+questionModel and the old questionView\r\n    * Remove this section in when all components use questionModel and there is no need to have model behaviour in the questionView\r\n    */\r\n\r\n    var viewOnlyCompatibleQuestionView = {\r\n\r\n        /* All of these functions have been moved to the questionModel.js file.\r\n         * On the rare occasion that they have not been overridden by the component and\r\n                that they call the view only questionView version,\r\n                these functions are included as redirects to the new Question Model.\r\n                It is very unlikely that these are needed but they are included to ensure compatibility.\r\n         * If you need to override these in your component you should now make and register a component model.\r\n         * Please remove them from your question component's view.\r\n        */\r\n\r\n            // Returns an object specific to the question type.\r\n            getInteractionObject: function() {\r\n                return this.model.getInteractionObject();\r\n            },\r\n\r\n            // Retturns a string detailing how the user answered the question.\r\n            getResponse: function() {\r\n                return this.model.getResponse();\r\n            },\r\n\r\n            // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\r\n            getResponseType: function() {\r\n                return this.model.getResponseType();\r\n            },\r\n\r\n            // Calls default methods to setup on questions\r\n            setupDefaultSettings: function() {\r\n                return this.model.setupDefaultSettings();\r\n            },\r\n\r\n            // Used to setup either global or local button text\r\n            setupButtonSettings: function() {\r\n                return this.model.setupButtonSettings();\r\n            },\r\n\r\n            // Used to setup either global or local question weight/score\r\n            setupWeightSettings: function() {\r\n                return this.model.setupWeightSettings();\r\n            },\r\n\r\n            // Use to check if the user is allowed to submit the question\r\n            // Maybe the user has to select an item?\r\n            canSubmit: function() {\r\n                return this.model.canSubmit();\r\n            },\r\n\r\n            // Used to update the amount of attempts the user has left\r\n            updateAttempts: function() {\r\n                return this.model.updateAttempts();\r\n            },\r\n\r\n            // This is important for returning or showing the users answer\r\n            // This should preserve the state of the users answers\r\n            storeUserAnswer: function() {\r\n                return this.model.storeUserAnswer();\r\n            },\r\n\r\n            // Used by the question view to reset the stored user answer\r\n            resetUserAnswer: function() {\r\n                return this.model.resetUserAnswer();\r\n            },\r\n\r\n            // Sets _isCorrect:true/false based upon isCorrect method below\r\n            markQuestion: function() {\r\n\r\n                if (this._isInViewOnlyCompatibleMode(\"isCorrect\")) {\r\n\r\n                    if (this.isCorrect()) {\r\n                        this.model.set('_isCorrect', true);\r\n                    } else {\r\n                        this.model.set('_isCorrect', false);\r\n                    }\r\n\r\n                } else {\r\n                    return this.model.markQuestion();\r\n                }\r\n            },\r\n\r\n            // Should return a boolean based upon whether to question is correct or not\r\n            isCorrect: function() {\r\n                return this.model.isCorrect();\r\n            },\r\n\r\n            // Used to set the score based upon the _questionWeight\r\n            setScore: function() {\r\n                return this.model.setScore();\r\n            },\r\n\r\n            // Updates buttons based upon question state by setting\r\n            // _buttonState on the model which buttonsView listens to\r\n            updateButtons: function() {\r\n                return this.model.updateButtons();\r\n            },\r\n\r\n            // Used to setup the correct, incorrect and partly correct feedback\r\n            setupFeedback: function() {\r\n\r\n                if (this._isInViewOnlyCompatibleMode(\"isPartlyCorrect\")) {\r\n\r\n                    // Use view based feedback where necessary\r\n                    if (this.model.get('_isCorrect')) {\r\n                        this._runModelCompatibleFunction(\"setupCorrectFeedback\");\r\n                    } else if (this.isPartlyCorrect()) {\r\n                        this._runModelCompatibleFunction(\"setupPartlyCorrectFeedback\");\r\n                    } else {\r\n                        this._runModelCompatibleFunction(\"setupIncorrectFeedback\");\r\n                    }\r\n\r\n                } else {\r\n                    // Use model based feedback\r\n                    this.model.setupFeedback();\r\n                }\r\n\r\n            },\r\n\r\n            // Used by the question to determine if the question is incorrect or partly correct\r\n            // Should return a boolean\r\n            isPartlyCorrect: function() {\r\n                return this.model.isPartlyCorrect();\r\n            },\r\n\r\n            setupCorrectFeedback: function() {\r\n                return this.model.setupCorrectFeedback();\r\n            },\r\n\r\n            setupPartlyCorrectFeedback: function() {\r\n                return this.model.setupPartlyCorrectFeedback();\r\n            },\r\n\r\n            setupIncorrectFeedback: function() {\r\n                return this.model.setupIncorrectFeedback();\r\n            },\r\n\r\n\r\n        //Helper functions for compatibility layer\r\n        _runModelCompatibleFunction: function(name, lookForViewOnlyFunction) {\r\n            if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {\r\n                return this[name](); //questionView\r\n            } else {\r\n                return this.model[name](); //questionModel\r\n            }\r\n        },\r\n\r\n        _isInViewOnlyCompatibleMode: function(name, lookForViewOnlyFunction) {\r\n            //return false uses the model function questionModel\r\n            //return true uses the view only function questionView\r\n\r\n            var checkForFunction = (lookForViewOnlyFunction || name);\r\n\r\n            //if the function does NOT exist on the view at all, use the model only\r\n            if (!this.constructor.prototype[checkForFunction]) return false; //questionModel\r\n\r\n            //if the function DOES exist on the view and MATCHES the compatibility function above, use the model only\r\n            if (this.constructor.prototype[checkForFunction] === viewOnlyCompatibleQuestionView[checkForFunction])  {\r\n                switch (checkForFunction) {\r\n                    case \"setupFeedback\":\r\n                    case \"markQuestion\":\r\n                        return true; //questionView\r\n                }\r\n                return false; //questionModel\r\n            }\r\n\r\n            //if the function DOES exist on the view and does NOT match the compatibility function above, use the view function\r\n            return true; //questionView\r\n        }\r\n\r\n    };\r\n\r\n    //return question view class extended with the compatibility layer\r\n    return QuestionView.extend(viewOnlyCompatibleQuestionView, {\r\n        _isQuestionType: true\r\n    });\r\n\r\n    /*END OF BACKWARDS COMPATIBILITY SECTION*/\r\n\r\n});\r\n\n","define('components/adapt-contrib-mcq/js/mcqView',[\n    'core/js/adapt',\n    'core/js/views/questionView'\n], function(Adapt, QuestionView) {\n\n    var McqView = QuestionView.extend({\n\n        events: {\n            'focus .component-item input':'onItemFocus',\n            'blur .component-item input':'onItemBlur',\n            'change .component-item input':'onItemSelect',\n            'keyup .component-item input':'onKeyPress'\n        },\n\n        isCorrectAnswerShown: false,\n\n        initialize: function() {\n            QuestionView.prototype.initialize.apply(this, arguments);\n            this.update = _.debounce(this.update.bind(this), 1);\n            this.listenTo(this.model, {\n                \"change:_isEnabled change:_isComplete change:_isSubmitted\": this.update\n            });\n            this.listenTo(this.model.getChildren(), {\n                \"change:_isActive\": this.update\n            });\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.model.setupRandomisation();\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n            this.update();\n        },\n\n        onKeyPress: function(event) {\n            if (event.which !== 13) return;\n            //<ENTER> keypress\n            this.onItemSelect(event);\n        },\n\n        onItemFocus: function(event) {\n            if (!this.model.isInteractive()) return;\n\n            $('label[for='+$(event.currentTarget).attr('id')+']').addClass('highlighted');\n        },\n\n        onItemBlur: function(event) {\n            $('label[for='+$(event.currentTarget).attr('id')+']').removeClass('highlighted');\n        },\n\n        onItemSelect: function(event) {\n            if (!this.model.isInteractive()) return;\n\n            var index = $(event.currentTarget).data('adapt-index');\n            var itemModel = this.model.getItem(index);\n            var shouldSelect = !itemModel.get(\"_isActive\");\n\n            if (this.model.isSingleSelect()) {\n                // Assume a click is always a selection\n                shouldSelect = true;\n                this.model.resetActiveItems();\n            } else if (shouldSelect && this.model.isAtActiveLimit()) {\n                // At the selection limit, deselect the last item\n                this.model.getLastActiveItem().toggleActive(false);\n            }\n\n            // Select or deselect accordingly\n            itemModel.toggleActive(shouldSelect);\n        },\n\n        // Blank method to add functionality for when the user cannot submit\n        // Could be used for a popup or explanation dialog/hint\n        onCannotSubmit: function() {},\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {\n            this.update();\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        resetQuestion: function() {\n            this.model.resetActiveItems();\n            this.model.resetItems();\n        },\n\n        showCorrectAnswer: function() {\n            this.isCorrectAnswerShown = true;\n            this.update();\n        },\n\n        hideCorrectAnswer: function() {\n            this.isCorrectAnswerShown = false;\n            this.update();\n        },\n\n        update: function() {\n            this.updateSelection();\n            this.updateMarking();\n        },\n\n        updateSelection: function() {\n\n            var isEnabled = this.model.get(\"_isEnabled\");\n\n            this.model.getChildren().each(function(itemModel) {\n\n                var isSelected = this.isCorrectAnswerShown ?\n                    itemModel.get(\"_shouldBeSelected\") :\n                    itemModel.get(\"_isActive\");\n\n                var index = itemModel.get('_index');\n                this.$('label').filter('[data-adapt-index=\"' + index + '\"]')\n                    .toggleClass('selected', isSelected)\n                    .toggleClass('disabled', !isEnabled);\n\n                this.$('input').filter('[data-adapt-index=\"' + index + '\"]')\n                    .prop('checked', isSelected)\n                    .prop('disabled', !isEnabled);\n\n            }.bind(this));\n\n        },\n\n        updateMarking: function() {\n\n            var isInteractive = this.model.isInteractive();\n            var canShowMarking = this.model.get('_canShowMarking');\n            var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;\n\n            this.model.getChildren().each(function(itemModel) {\n\n                var index = itemModel.get('_index');\n                var $itemInput = this.$('input').filter('[data-adapt-index=\"' + index + '\"]');\n                var $item = $itemInput.parents('.component-item');\n\n                if (isInteractive || !canShowMarking) {\n                    // Remove item marking\n                    $item.removeClass('correct incorrect');\n                    $itemInput.attr('aria-label', $.a11y_normalize(itemModel.get(\"text\")));\n                    return;\n                }\n\n                // Mark item\n                var shouldBeSelected = itemModel.get(\"_shouldBeSelected\");\n                var isCorrect = Boolean(itemModel.get(\"_isCorrect\"));\n                var isActive = Boolean(itemModel.get(\"_isActive\"));\n\n                $item\n                    .toggleClass('correct', isCorrect)\n                    .toggleClass('incorrect', !isCorrect);\n\n                $itemInput.attr('aria-label', [\n                    (shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect),\n                    \", \",\n                    (isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer),\n                    \". \",\n                    $.a11y_normalize(itemModel.get(\"text\"))\n                ].join(\"\"));\n\n            }.bind(this));\n\n        }\n\n    });\n\n    return McqView;\n\n});\n\n","define('core/js/models/itemsQuestionModel',[\r\n    'core/js/adapt',\r\n    'core/js/models/questionModel',\r\n    'core/js/models/itemsComponentModel'\r\n], function(Adapt, QuestionModel, ItemsComponentModel) {\r\n\r\n    var BlendedModel = QuestionModel.extend(ItemsComponentModel.prototype);\r\n    var ItemsQuestionModel = BlendedModel.extend({\r\n\r\n        init: function() {\r\n            QuestionModel.prototype.init.call(this);\r\n            ItemsComponentModel.prototype.init.call(this);\r\n\r\n            this.set('_isRadio', this.isSingleSelect());\r\n        },\r\n\r\n        restoreUserAnswers: function() {\r\n            if (!this.get('_isSubmitted')) return;\r\n\r\n            var itemModels = this.getChildren();\r\n            var userAnswer = this.get('_userAnswer');\r\n            itemModels.each(function(item, index) {\r\n                item.toggleActive(userAnswer[item._index]);\r\n            });\r\n\r\n            this.setQuestionAsSubmitted();\r\n            this.markQuestion();\r\n            this.setScore();\r\n            this.setupFeedback();\r\n        },\r\n\r\n        setupRandomisation: function() {\r\n            if (!this.get('_isRandom') || !this.get('_isEnabled')) return;\r\n            var children = this.getChildren();\r\n            children.set(children.shuffle());\r\n        },\r\n\r\n        // check if the user is allowed to submit the question\r\n        canSubmit: function() {\r\n            var activeItems = this.getActiveItems();\r\n            return activeItems.length > 0;\r\n        },\r\n\r\n        // This is important for returning or showing the users answer\r\n        // This should preserve the state of the users answers\r\n        storeUserAnswer: function() {\r\n            var items = this.getChildren().slice(0);\r\n            items.sort(function(a, b) {\r\n                return a.get('_index') - b.get('_index');\r\n            });\r\n\r\n            var userAnswer = items.map(function(itemModel) {\r\n                return itemModel.get('_isActive');\r\n            });\r\n            this.set('_userAnswer', userAnswer);\r\n        },\r\n\r\n        isCorrect: function() {\r\n\r\n            var props = {\r\n                _numberOfRequiredAnswers: 0,\r\n                _numberOfIncorrectAnswers: 0,\r\n                _isAtLeastOneCorrectSelection: false,\r\n                _numberOfCorrectAnswers: 0,\r\n            };\r\n\r\n            this.getChildren().each(function(itemModel) {\r\n                var itemShouldBeActive = itemModel.get('_shouldBeSelected');\r\n                if (itemShouldBeActive) {\r\n                    props._numberOfRequiredAnswers++;\r\n                }\r\n\r\n                if (!itemModel.get('_isActive')) return;\r\n\r\n                if (!itemShouldBeActive) {\r\n                    props._numberOfIncorrectAnswers++;\r\n                    return;\r\n                }\r\n\r\n                props._isAtLeastOneCorrectSelection = true;\r\n                props._numberOfCorrectAnswers++;\r\n                itemModel.set('_isCorrect', true);\r\n            });\r\n\r\n            this.set(props);\r\n\r\n            var hasRightNumberOfCorrectAnswers = (props._numberOfCorrectAnswers === props._numberOfRequiredAnswers);\r\n            var hasNoIncorrectAnswers = !props._numberOfIncorrectAnswers;\r\n\r\n            return hasRightNumberOfCorrectAnswers && hasNoIncorrectAnswers;\r\n        },\r\n\r\n        // Sets the score based upon the questionWeight\r\n        // Can be overwritten if the question needs to set the score in a different way\r\n        setScore: function() {\r\n            var questionWeight = this.get('_questionWeight');\r\n            var answeredCorrectly = this.get('_isCorrect');\r\n            var score = answeredCorrectly ? questionWeight : 0;\r\n            this.set('_score', score);\r\n        },\r\n\r\n        setupFeedback: function() {\r\n            if (!this.has('_feedback')) return;\r\n\r\n            if (this.get('_isCorrect')) {\r\n                this.setupCorrectFeedback();\r\n                return;\r\n            }\r\n\r\n            if (this.isPartlyCorrect()) {\r\n                this.setupPartlyCorrectFeedback();\r\n                return;\r\n            }\r\n\r\n            // apply individual item feedback\r\n            var activeItem = this.getActiveItem();\r\n            if (this.isSingleSelect() && activeItem.get('feedback')) {\r\n                this.setupIndividualFeedback(activeItem);\r\n                return;\r\n            }\r\n\r\n            this.setupIncorrectFeedback();\r\n        },\r\n\r\n        setupIndividualFeedback: function(selectedItem) {\r\n            this.set({\r\n                feedbackTitle: this.getFeedbackTitle(this.get('_feedback')),\r\n                feedbackMessage: selectedItem.get(\"feedback\")\r\n            });\r\n        },\r\n\r\n        isPartlyCorrect: function() {\r\n            return this.get('_isAtLeastOneCorrectSelection');\r\n        },\r\n\r\n        resetUserAnswer: function() {\r\n            this.set('_userAnswer', []);\r\n        },\r\n\r\n        isAtActiveLimit: function() {\r\n            var selectedItems = this.getActiveItems();\r\n            return (selectedItems.length === this.get('_selectable'));\r\n        },\r\n\r\n        isSingleSelect: function() {\r\n            return (this.get('_selectable') === 1);\r\n        },\r\n\r\n        getLastActiveItem: function(){\r\n            var selectedItems = this.getActiveItems();\r\n            return selectedItems[selectedItems.length-1];\r\n        },\r\n\r\n        resetItems: function() {\r\n            this.resetActiveItems();\r\n            this.set('_isAtLeastOneCorrectSelection', false);\r\n        },\r\n\r\n        getInteractionObject: function() {\r\n            var interactions = {\r\n                correctResponsesPattern: [],\r\n                choices: []\r\n            };\r\n\r\n            interactions.choices = this.getChildren().map(function(itemModel) {\r\n                return {\r\n                    id: (itemModel.get('_index') + 1).toString(),\r\n                    description: itemModel.get('text')\r\n                };\r\n            });\r\n\r\n            var correctItems = this.getChildren().filter(function(itemModel) {\r\n                return itemModel.get('_shouldBeSelected');\r\n            });\r\n\r\n            interactions.correctResponsesPattern = [\r\n                correctItems.map(function(itemModel) {\r\n                    // indexes are 0-based, we need them to be 1-based for cmi.interactions\r\n                    return String(itemModel.get('_index') + 1);\r\n                })\r\n                .join('[,]')\r\n            ];\r\n\r\n            return interactions;\r\n        },\r\n\r\n        /**\r\n        * used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\r\n        * returns the user's answers as a string in the format '1,5,2'\r\n        */\r\n        getResponse: function() {\r\n            var activeItems = this.getActiveItems();\r\n            var activeIndexes = activeItems.map(function(itemModel) {\r\n                // indexes are 0-based, we need them to be 1-based for cmi.interactions\r\n                return itemModel.get('_index') + 1;\r\n            });\r\n            return activeIndexes.join(',');\r\n        },\r\n\r\n        /**\r\n        * used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\r\n        */\r\n        getResponseType: function() {\r\n            return 'choice';\r\n        }\r\n\r\n    });\r\n\r\n    return ItemsQuestionModel;\r\n\r\n});\r\n\n","define('components/adapt-contrib-mcq/js/adapt-contrib-mcq',[\n    'core/js/adapt',\n    './mcqView',\n    'core/js/models/itemsQuestionModel'\n], function(Adapt, McqView, ItemsQuestionModel) {\n\n    return Adapt.register(\"mcq\", {\n        view: McqView,\n        // Extend ItemsQuestionModel to distinguish McqModel in\n        // the inheritance chain and allow targeted model extensions.\n        model: ItemsQuestionModel.extend({})\n    });\n\n});\n\n","define('components/adapt-contrib-gmcq/js/adapt-contrib-gmcq',[\n    'core/js/adapt',\n    'components/adapt-contrib-mcq/js/adapt-contrib-mcq'\n], function(Adapt, Mcq) {\n\n    var Gmcq = Mcq.view.extend({\n\n        setupQuestion: function() {\n            Mcq.view.prototype.setupQuestion.call(this);\n\n            this.listenTo(Adapt, {\n                'device:changed': this.resizeImage,\n                'device:resize': this.onDeviceResize\n            });\n\n        },\n\n        onQuestionRendered: function() {\n\n            this.resizeImage(Adapt.device.screenSize);\n            this.setUpColumns();\n\n            this.$('label').imageready(this.setReadyStatus.bind(this));\n\n        },\n\n        onDeviceResize: function() {\n            this.setUpColumns();\n        },\n\n        resizeImage: function(width) {\n            var imageWidth = width === 'medium' ? 'small' : width;\n\n            this.$('label').each(function(index) {\n                var $img = $(this).find('img');\n                var newSrc = $img.attr('data-' + imageWidth);\n                if (!newSrc) return;\n                $img.attr('src', newSrc);\n            });\n\n        },\n\n        setUpColumns: function() {\n            var columns = this.model.get('_columns');\n\n            if (!columns) return;\n\n            if (Adapt.device.screenSize === 'large') {\n                this.$el.addClass('gmcq-column-layout');\n                this.$('.gmcq-item').css('width', (100 / columns) + '%');\n            } else {\n                this.$el.removeClass('gmcq-column-layout');\n                this.$('.gmcq-item').css('width', '');\n            }\n        }\n\n    }, {\n        template: 'gmcq'\n    });\n\n    return Adapt.register(\"gmcq\", {\n        view: Gmcq,\n        model: Mcq.model.extend({})\n    });\n\n});\n\n","define('components/adapt-contrib-graphic/js/adapt-contrib-graphic',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'core/js/models/componentModel'\n], function(Adapt, ComponentView, ComponentModel) {\n\n    var GraphicView = ComponentView.extend({\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.resizeImage);\n\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.resizeImage(Adapt.device.screenSize, true);\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        resizeImage: function(width, setupInView) {\n            var imageWidth = width === 'medium' ? 'small' : width;\n            var imageSrc = (this.model.get('_graphic')) ? this.model.get('_graphic')[imageWidth] : '';\n            this.$('.graphic-widget img').attr('src', imageSrc);\n\n            this.$('.graphic-widget').imageready(function() {\n                this.setReadyStatus();\n\n                if (setupInView) {\n                    this.setupInviewCompletion('.component-widget');\n                }\n            }.bind(this));\n        }\n    });\n\n    return Adapt.register('graphic', {\n        model: ComponentModel.extend({}),// create a new class in the inheritance chain so it can be extended per component type if necessary later\n        view: GraphicView\n    });\n\n});\n\n","define('components/adapt-contrib-hotgraphic/js/hotgraphicPopupView',[\n    'core/js/adapt'\n], function(Adapt) {\n    'use strict';\n\n    var HotgraphicPopupView = Backbone.View.extend({\n\n        className: 'hotgraphic-popup',\n\n        events: {\n            'click .hotgraphic-popup-done': 'closePopup',\n            'click .hotgraphic-popup-controls': 'onControlClick'\n        },\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"notify:opened\", this.onOpened);\n            this.listenTo(this.model.get('_children'), {\n                'change:_isActive': this.onItemsActiveChange,\n                'change:_isVisited': this.onItemsVisitedChange\n            });\n            this.render();\n        },\n\n        onOpened: function() {\n            this.applyNavigationClasses(this.model.getActiveItem().get('_index'));\n            this.updatePageCount();\n            this.handleTabs();\n        },\n\n        applyNavigationClasses: function (index) {\n            var itemCount = this.model.get('_items').length;\n            var canCycleThroughPagination = this.model.get('_canCycleThroughPagination');\n\n            var shouldEnableBack = index > 0 || canCycleThroughPagination;\n            var shouldEnableNext = index < itemCount - 1 || canCycleThroughPagination;\n            var $controls = this.$('.hotgraphic-popup-controls');\n\n            this.$('hotgraphic-popup-nav')\n                .toggleClass('first', !shouldEnableBack)\n                .toggleClass('last', !shouldEnableNext);\n\n            $controls.filter('.back').a11y_cntrl_enabled(shouldEnableBack);\n            $controls.filter('.next').a11y_cntrl_enabled(shouldEnableNext);\n        },\n\n        updatePageCount: function() {\n            var template = Adapt.course.get(\"_globals\")._components._hotgraphic.popupPagination;\n            var labelText = Handlebars.compile(template)({\n                itemNumber: this.model.getActiveItem().get('_index') + 1,\n                totalItems: this.model.get(\"_items\").length\n            });\n            this.$('.hotgraphic-popup-count').html(labelText);\n        },\n\n        handleTabs: function() {\n            this.$('.hotgraphic-popup-inner').a11y_on(false);\n            this.$('.hotgraphic-popup-inner .active').a11y_on(true);\n        },\n\n        onItemsActiveChange: function(item, _isActive) {\n            if (!_isActive) return;\n\n            var index = item.get('_index');\n            this.updatePageCount();\n            this.handleTabs();\n            this.applyItemClasses(index);\n            this.handleFocus(index);\n        },\n\n        applyItemClasses: function(index) {\n            this.$('.hotgraphic-item.active').removeClass('active');\n            this.$('.hotgraphic-item').filter('[data-index=\"' + index + '\"]').addClass('active');\n        },\n\n        handleFocus: function(index) {\n            this.$('.hotgraphic-popup-inner .active').a11y_focus();\n            this.applyNavigationClasses(index);\n        },\n\n        onItemsVisitedChange: function(item, _isVisited) {\n            if (!_isVisited) return;\n\n            this.$('.hotgraphic-item')\n                .filter('[data-index=\"' + item.get('_index') + '\"]')\n                .addClass('visited');\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            data.view = this;\n            var template = Handlebars.templates['hotgraphicPopup'];\n            this.$el.html(template(data));\n        },\n\n        closePopup: function(event) {\n            Adapt.trigger('notify:close');\n        },\n\n        onControlClick: function(event) {\n            event.preventDefault();\n\n            var direction = $(event.currentTarget).hasClass('back') ? 'back' : 'next';\n            var index = this.getNextIndex(direction);\n\n            if (index !== -1) {\n                this.setItemState(index);\n            }\n        },\n\n        getNextIndex: function(direction) {\n            var index = this.model.getActiveItem().get('_index');\n            var lastIndex = this.model.get('_items').length - 1;\n\n            switch (direction) {\n                case 'back':\n                    if (index > 0) return --index;\n                    if (this.model.get('_canCycleThroughPagination')) return lastIndex;\n                    break;\n                case 'next':\n                    if (index < lastIndex) return ++index;\n                    if (this.model.get('_canCycleThroughPagination')) return 0;\n            }\n            return -1;\n        },\n\n        setItemState: function(index) {\n            this.model.getActiveItem().toggleActive();\n\n            var nextItem = this.model.getItem(index);\n            nextItem.toggleActive();\n            nextItem.toggleVisited(true);\n        }\n\n    });\n\n    return HotgraphicPopupView;\n\n});\n\n","define('components/adapt-contrib-hotgraphic/js/hotgraphicView',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    './hotgraphicPopupView'\n], function(Adapt, ComponentView, HotgraphicPopupView) {\n    'use strict';\n\n    var HotGraphicView = ComponentView.extend({\n\n        events: {\n            'click .hotgraphic-graphic-pin': 'onPinClicked'\n        },\n\n        initialize: function() {\n            ComponentView.prototype.initialize.call(this);\n            this.setUpViewData();\n            this.setUpModelData();\n            this.setUpEventListeners();\n            this.checkIfResetOnRevisit();\n        },\n\n        setUpViewData: function() {\n            this.popupView = null;\n            this._isPopupOpen = false;\n        },\n\n        setUpModelData: function() {\n            if (this.model.get('_canCycleThroughPagination') === undefined) {\n                this.model.set('_canCycleThroughPagination', false);\n            }\n        },\n\n        setUpEventListeners: function() {\n            this.listenTo(Adapt, 'device:changed', this.reRender);\n\n            this.listenTo(this.model.get('_children'), {\n                'change:_isActive': this.onItemsActiveChange,\n                'change:_isVisited': this.onItemsVisitedChange\n            });\n        },\n\n        reRender: function() {\n            if (Adapt.device.screenSize !== 'large') {\n                this.replaceWithNarrative();\n            }\n        },\n\n        replaceWithNarrative: function() {\n            var NarrativeView = Adapt.getViewClass('narrative');\n\n            var model = this.prepareNarrativeModel();\n            var newNarrative = new NarrativeView({ model: model });\n            var $container = $(\".component-container\", $(\".\" + this.model.get(\"_parentId\")));\n\n            newNarrative.reRender();\n            newNarrative.setupNarrative();\n            $container.append(newNarrative.$el);\n            Adapt.trigger('device:resize');\n            _.defer(this.remove.bind(this));\n        },\n\n        prepareNarrativeModel: function() {\n            var model = this.model;\n            model.set({\n                '_component': 'narrative',\n                '_wasHotgraphic': true,\n                'originalBody': model.get('body'),\n                'originalInstruction': model.get('instruction')\n            });\n\n            // Check if active item exists, default to 0\n            var activeItem = model.getActiveItem();\n            if (!activeItem) {\n                model.getItem(0).toggleActive(true);\n            }\n\n            // Swap mobile body and instructions for desktop variants.\n            if (model.get('mobileBody')) {\n                model.set('body', model.get('mobileBody'));\n            }\n            if (model.get('mobileInstruction')) {\n                model.set('instruction', model.get('mobileInstruction'));\n            }\n\n            return model;\n        },\n\n        onItemsActiveChange: function(model, _isActive) {\n            this.getItemElement(model).toggleClass('active', _isActive);\n        },\n\n        getItemElement: function(model) {\n            var index = model.get('_index');\n            return this.$('.hotgraphic-graphic-pin').filter('[data-index=\"' + index + '\"]');\n        },\n\n        onItemsVisitedChange: function(model, _isVisited) {\n            if (!_isVisited) return;\n            var $pin = this.getItemElement(model);\n\n            // Append the word 'visited.' to the pin's aria-label\n            var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + \".\";\n            $pin.attr('aria-label', function(index, val) {\n                return val + \" \" + visitedLabel;\n            });\n\n            $pin.addClass('visited');\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        preRender: function() {\n            if (Adapt.device.screenSize === 'large') {\n                this.render();\n            } else {\n                this.reRender();\n            }\n        },\n\n        postRender: function() {\n            this.$('.hotgraphic-widget').imageready(this.setReadyStatus.bind(this));\n            if (this.model.get('_setCompletionOn') === 'inview') {\n                this.setupInviewCompletion('.component-widget');\n            }\n        },\n\n        onPinClicked: function (event) {\n            if(event) event.preventDefault();\n\n            var item = this.model.getItem($(event.currentTarget).data('index'));\n            item.toggleActive(true);\n            item.toggleVisited(true);\n\n            this.openPopup();\n        },\n\n        openPopup: function() {\n            if (this._isPopupOpen) return;\n\n            this._isPopupOpen = true;\n\n            this.popupView = new HotgraphicPopupView({\n                model: this.model\n            });\n\n            Adapt.trigger(\"notify:popup\", {\n                _view: this.popupView,\n                _isCancellable: true,\n                _showCloseButton: false,\n                _closeOnBackdrop: true,\n                _classes: ' hotgraphic'\n            });\n\n            this.listenToOnce(Adapt, {\n                'popup:closed': this.onPopupClosed\n            });\n        },\n\n        onPopupClosed: function() {\n            this.model.getActiveItem().toggleActive();\n            this._isPopupOpen = false;\n        }\n\n    });\n\n    return HotGraphicView;\n\n});\n\n","define('components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic',[\n    'core/js/adapt',\n    './hotgraphicView',\n    'core/js/models/itemsComponentModel'\n], function(Adapt, HotgraphicView, ItemsComponentModel) {\n\n    return Adapt.register('hotgraphic', {\n        model: ItemsComponentModel,\n        view: HotgraphicView\n    });\n\n});\n","define('components/adapt-contrib-matching/js/dropdownAdapter',[\n    'libraries/select2'\n], function() {\n\t/*\n     * issue/1543: fix from https://github.com/select2/select2/issues/4063\n     */\n    var dropdownAdapter;\n    jQuery.fn.select2.amd.require([\n        \"select2/utils\",\n        \"select2/dropdown\",\n        \"select2/dropdown/attachContainer\",\n        \"select2/dropdown/closeOnSelect\"\n    ], function(Utils, DropdownAdapter, AttachContainer, CloseOnSelect) {\n\n        /*\n         * issues/1889: fix from https://github.com/adaptlearning/adapt_framework/issues/1889\n         * code added to make dropdown sit above body bottom where appropriate\n         */\n        AttachContainer.prototype.bind = function(decorated, container, $container) {\n\n            decorated.call(this, $container, $container);\n\n            container.on('opening', function () {\n                // hide so that popup doesn't jump when repositioned\n                this.$dropdown.css(\"visibility\", \"hidden\");\n            }.bind(this));\n\n            container.on('open', function () {\n                // add dropdown at this point so that the browser focus works correctly\n                var $dropdownContainer = $container.find('.dropdown-wrapper');\n                $dropdownContainer.append(this.$dropdown);\n\n                // defer to allow dom to settle before repositioning\n                setTimeout(function() {\n                    this.position(this.$dropdown, $container);\n                    this.$dropdown.css(\"visibility\", \"\");\n                }.bind(this), 0);\n\n            }.bind(this));\n\n        };\n\n        AttachContainer.prototype.position = function(decorated, $dropdown, $container) {\n\n            var $window = $(window);\n\n            var viewport = {\n                top: $window.scrollTop(),\n                bottom: $window.scrollTop() + $window.height()\n            };\n\n            var container = $container.offset();\n            container.height = $container.outerHeight(false);\n            container.bottom = container.top + container.height;\n\n            var dropdown = {\n                height: $dropdown.outerHeight(false)\n            };\n\n            var enoughRoomBelow = !dropdown.height || viewport.bottom > (container.bottom + dropdown.height);\n\n            var oldDirection = $dropdown.hasClass('select2-dropdown--above') ? \"above\" : $dropdown.hasClass('select2-dropdown--below') ? \"below\" : \"none\";\n            var newDirection = !enoughRoomBelow ? \"above\" : \"below\";\n\n            if (newDirection === oldDirection) return;\n\n            $dropdown\n                .removeClass('select2-dropdown--below select2-dropdown--above')\n                .addClass('select2-dropdown--' + newDirection);\n            $container\n                .removeClass('select2-container--below select2-container--above')\n                .addClass('select2-container--' + newDirection);\n\n            switch (newDirection) {\n                case \"below\":\n                    $dropdown.css(\"bottom\", \"\");\n                    break;\n                case \"above\":\n                    $dropdown.css(\"bottom\", container.height);\n                    break;\n            }\n\n        };\n\n\n        // override default AttachBody\n        dropdownAdapter = Utils.Decorate(\n            Utils.Decorate(\n                DropdownAdapter,\n                AttachContainer\n            ),\n            CloseOnSelect\n        );\n\n    });\n\n    return dropdownAdapter;\n});\n","define('components/adapt-contrib-matching/js/matchingView',[\n    'core/js/adapt',\n    'core/js/views/questionView',\n    './dropdownAdapter'\n], function(Adapt, QuestionView, dropdownAdapter) {\n\n    var MatchingView = QuestionView.extend({\n\n        disableQuestion: function() {\n            this.$('select').prop('disabled', true).select2({\n                templateResult: this.wrapInJQuery,\n                templateSelection: this.wrapInJQuery\n            });\n        },\n\n        setupSelect2: function() {\n            this.enableQuestion();\n            if (this.model.get('_isEnabled') !== true) {\n                // select2 ignores disabled property applied to <select> in the template\n                this.disableQuestion();\n            }\n            _.bindAll(this, 'onOptionSelected');\n            this.$('select').on('select2:select', this.onOptionSelected);\n        },\n\n        enableQuestion: function() {\n            this.$('select').prop('disabled', false).select2({\n                placeholder: this.model.get('placeholder'),\n                minimumResultsForSearch: Infinity, // hides the search box from the Select2 dropdown\n                dir: Adapt.config.get('_defaultDirection'),\n                dropdownAdapter: dropdownAdapter,\n                templateResult: this.wrapInJQuery,\n                templateSelection: this.wrapInJQuery\n            });\n        },\n\n        wrapInJQuery: function(state) {\n            return $('<span>').html(state.text);\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.listenToOnce(Adapt, 'preRemove', this.onPreRemove);\n\n            this.model.setupRandomisation();\n        },\n\n        onPreRemove: function() {\n            this.$('select').off('select2:select', this.onOptionSelected);\n            this.$('select').select2('destroy');\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n            this.setupSelect2();\n        },\n\n        onCannotSubmit: function() {\n            this.$('select').each(function addErrorClass(index, element) {\n                if (element.selectedIndex > 0) return;\n\n                var $element = $(element);\n                var $container = $element.parents('.matching-select-container');\n                $container.addClass('error');\n                // ensure the error class gets removed when the user selects a valid option\n                var evt = \"select2:select.errorclear\";\n                var $select = $element.parent();\n                $select.off(evt);// prevent multiple event bindings if the user repeatedly clicks submit without first making a selection\n                $select.on(evt, function(e) {\n                    if (e.params.data.element.index > 0) {\n                        $container.removeClass('error');\n                        $select.off(evt);\n                    }\n                });\n            });\n        },\n\n        onOptionSelected: function(e) {\n            var itemIndex = $(e.target).parents('.matching-item').index();\n            var optionIndex = $(e.params.data.element).index() - 1;\n            this.model.setOptionSelected(itemIndex, optionIndex, true);\n        },\n\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            this.model.get('_items').forEach(function(item, i) {\n\n                var $item = this.$('.matching-item').eq(i);\n                $item.removeClass('correct incorrect').addClass(item._isCorrect ? 'correct' : 'incorrect');\n            }, this);\n        },\n\n        resetQuestion: function() {\n\n            this.$('.matching-item').removeClass('correct incorrect');\n\n            this.model.set('_isAtLeastOneCorrectSelection', false);\n\n            var placeholder = this.model.get('placeholder');\n            var resetAll = this.model.get('_shouldResetAllAnswers');\n\n            this.model.get('_items').forEach(function(item, index) {\n                if (item._isCorrect && resetAll === false) return;\n\n                this.selectValue(index, placeholder);\n\n                item._options.forEach(function(option, index) {\n                    option._isSelected = false;\n                });\n\n                item._selected = null;\n            }, this);\n        },\n\n        showCorrectAnswer: function() {\n            this.model.get('_items').forEach(function(item, index) {\n                var correctOption = _.findWhere(item._options, { _isCorrect: true });\n                this.selectValue(index, correctOption.text);\n            }, this);\n        },\n\n        hideCorrectAnswer: function() {\n            var answerArray = this.model.has('_tempUserAnswer') ?\n                this.model.get('_tempUserAnswer') :\n                this.model.get('_userAnswer');\n\n            this.model.get('_items').forEach(function (item, index) {\n                var key = answerArray[index];\n                var value = item._options[key].text;\n                this.selectValue(index, value);\n            }, this);\n        },\n\n        /**\n         * sets the selected item of a dropdown\n         * @param {number} index The index (0-based) of the dropdown\n         * @param {string} value The dropdown item you want to be selected\n         * @example\n         * // sets the third dropdown to \"Hebrew\"\n         * this.selectValue(2, \"Hebrew\");\n         */\n        selectValue: function(i, value) {\n            value = $.trim(value);// select2 strips leading/trailing spaces so we need to as well - fixes https://github.com/adaptlearning/adapt_framework/issues/1503\n            this.$('select').eq(i).val(value).trigger('change');\n        }\n    });\n\n    return MatchingView;\n});\n","define('components/adapt-contrib-matching/js/matchingModel',[\n    'core/js/models/questionModel'\n], function(QuestionModel) {\n\n    var MatchingModel = QuestionModel.extend({\n\n        init: function() {\n            QuestionModel.prototype.init.call(this);\n\n            this.setupQuestionItemIndexes();\n        },\n\n        setupQuestionItemIndexes: function() {\n\n            this.get('_items').forEach(function(item, index) {\n                if (item._index === undefined) {\n                    item._index = index;\n                    item._selected = false;\n                }\n                item._options.forEach(function(option, index) {\n                    if (option._index === undefined) {\n                        option._index = index;\n                        option._isSelected = false;\n                    }\n                });\n            });\n        },\n\n        setupRandomisation: function() {\n            if (!this.get('_isRandom') || !this.get('_isEnabled')) return;\n\n            this.get('_items').forEach(function(item) {\n                item._options = _.shuffle(item._options);\n            });\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.get('_isSubmitted')) return;\n\n            var userAnswer = this.get('_userAnswer');\n\n            this.get('_items').forEach(function(item, index) {\n                item._options.forEach(function(option, index) {\n                    if (option._index === userAnswer[item._index]) {\n                        option._isSelected = true;\n                        item._selected = option;\n                    }\n                });\n            });\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            this.setupFeedback();\n        },\n\n        canSubmit: function() {\n            // can submit if every item has a selection\n            var canSubmit = _.every(this.get('_items'), function(item) {\n                return _.findWhere(item._options, {'_isSelected':true}) !== undefined;\n            });\n\n            return canSubmit;\n        },\n\n        setOptionSelected: function(itemIndex, optionIndex, isSelected) {\n            var item = this.get('_items')[itemIndex];\n            var option = item._options[optionIndex];\n\n            option._isSelected = isSelected;\n            item._selected = option;\n        },\n\n        storeUserAnswer: function() {\n\n            var userAnswer = new Array(this.get('_items').length);\n            var tempUserAnswer = new Array(this.get('_items').length);\n\n            this.get('_items').forEach(function(item, index) {\n                var optionIndex = _.findIndex(item._options, function(o) {return o._isSelected;});\n\n                tempUserAnswer[item._index] = optionIndex;\n                userAnswer[item._index] = item._options[optionIndex]._index;\n            }, this);\n\n            this.set({\n                '_userAnswer': userAnswer,\n                '_tempUserAnswer': tempUserAnswer\n            });\n        },\n\n        isCorrect: function() {\n            var numberOfCorrectAnswers = 0;\n\n            this.get('_items').forEach(function(item, index) {\n\n                var isCorrect = (item._selected && item._selected._isCorrect);\n\n                if (!isCorrect) {\n                    item._isCorrect = false;\n                    return;\n                }\n\n                numberOfCorrectAnswers++;\n                item._isCorrect = true;\n                this.set({\n                    '_numberOfCorrectAnswers': numberOfCorrectAnswers,\n                    '_isAtLeastOneCorrectSelection': true\n                });\n\n            }, this);\n\n            this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n\n            if (numberOfCorrectAnswers === this.get('_items').length) {\n                return true;\n            }\n\n            return false;\n        },\n\n        setScore: function() {\n            var questionWeight = this.get('_questionWeight');\n\n            if (this.get('_isCorrect')) {\n                this.set('_score', questionWeight);\n                return;\n            }\n\n            var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');\n            var itemLength = this.get('_items').length;\n\n            var score = questionWeight * numberOfCorrectAnswers / itemLength;\n\n            this.set('_score', score);\n        },\n\n        isPartlyCorrect: function() {\n            return this.get('_isAtLeastOneCorrectSelection');\n        },\n\n        resetUserAnswer: function() {\n            this.set('_userAnswer', []);\n        },\n\n        /**\n        * Used by tracking extensions to return an object containing the component's specific interactions.\n        */\n        getInteractionObject: function() {\n            var interactions = {\n                correctResponsesPattern: null,\n                source: null,\n                target: null\n            };\n            var items = this.get('_items');\n            // This contains an array with a single string value, matching the source 'id' with the correct\n            // matching target 'id' value. An example is as follows:\n            // [ \"1[.]1_2[,]2[.]2_3\" ]\n            interactions.correctResponsesPattern = [\n                items.map(function(item, questionIndex) {\n                    // Offset the item index and use it as a group identifier.\n                    questionIndex = questionIndex + 1;\n                    return [\n                        questionIndex,\n                        item._options.filter(function(item) {\n                            // Get the correct item(s).\n                            return item._isCorrect;\n                        }).map(function(item) {\n                            // Prefix the option's index and offset by 1.\n                            return questionIndex + '_' + (item._index + 1).toString();\n                        })\n                    ].join('[.]');\n                }).join('[,]')\n            ];\n            // The 'source' property contains an array of all the stems/questions, e.g.\n            // [{id: \"1\", description: \"First question\"}, {id: \"2\", description: \"Second question\"}]\n            interactions.source = _.flatten(items.map(function(item) {\n                return {\n                    // Offset by 1.\n                    id: (item._index + 1).toString(),\n                    description: item.text\n                };\n            }));\n            // The 'target' property contains an array of all the option responses, with the 'id'\n            // prefixed to indicate the grouping, e.g.\n            // [  {id: \"1_1\": description: \"First option, group 1\"},\n            //    {id: \"1_2\": description: \"Second option, group 1\"}\n            //    {id: \"2_1\": description: \"First option, group 2\"}  ]\n            interactions.target = _.flatten(items.map(function(item, index) {\n                // Offset by 1, as these values are not zero-indexed.\n                index = index + 1;\n                return item._options.map(function(option) {\n                    return {\n                        id: index + '_' + (option._index + 1),\n                        description: option.text\n                    };\n                });\n            }));\n            return interactions;\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        * @return {string} the user's answers as a string in the format \"1.1#2.3#3.2\" assuming user selected option 1 in drop-down 1,\n        * option 3 in drop-down 2 and option 2 in drop-down 3. The '#' character will be changed to either ',' or '[,]' by adapt-contrib-spoor,\n        * depending on which SCORM version is being used.\n        */\n        getResponse: function() {\n            var responses = [];\n\n            this.get('_userAnswer').forEach(function(userAnswer, index) {\n                responses.push((index + 1) + \".\" + (userAnswer + 1));// convert from 0-based to 1-based counting\n            });\n\n            return responses.join('#');\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        * @return {string}\n        */\n        getResponseType: function() {\n            return \"matching\";\n        }\n    });\n\n    return MatchingModel;\n});\n","define('components/adapt-contrib-matching/js/adapt-contrib-matching',[\n    'core/js/adapt',\n    './matchingView',\n    './matchingModel',\n    './dropdownAdapter'\n], function(Adapt, MatchingView, MatchingModel) {\n\n    return Adapt.register(\"matching\", {\n        view: MatchingView,\n        model: MatchingModel\n    });\n});\n","define('components/adapt-contrib-media/js/adapt-contrib-media',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'core/js/models/componentModel',\n    'libraries/mediaelement-and-player',\n    'libraries/mediaelement-fullscreen-hook'\n], function(Adapt, ComponentView, ComponentModel) {\n\n    var froogaloopAdded = false;\n\n    // The following function is used to to prevent a memory leak in Internet Explorer\n    // See: http://javascript.crockford.com/memory/leak.html\n    function purge(d) {\n        var a = d.attributes, i, l, n;\n        if (a) {\n            for (i = a.length - 1; i >= 0; i -= 1) {\n                n = a[i].name;\n                if (typeof d[n] === 'function') {\n                    d[n] = null;\n                }\n            }\n        }\n        a = d.childNodes;\n        if (a) {\n            l = a.length;\n            for (i = 0; i < l; i += 1) {\n                purge(d.childNodes[i]);\n            }\n        }\n    }\n\n    /*\n     * Default shortcut keys trap a screen reader user inside the player once in focus. These keys are unnecessary\n     * as one may traverse the player in a linear fashion without needing to know or use shortcut keys. Below is\n     * the removal of the default shortcut keys.\n     *\n     * The default seek interval functions are passed two different data types from mejs which they handle incorrectly. One\n     * is a duration integer the other is the player object. The default functions error on slider key press and so break\n     * accessibility. Below is a correction.\n     */\n    _.extend(mejs.MepDefaults, {\n        keyActions: [],\n        defaultSeekForwardInterval: function(duration) {\n            if (typeof duration === \"object\") return duration.duration*0.05;\n            return duration*0.05;\n        },\n        defaultSeekBackwardInterval: function(duration) {\n            if (typeof duration === \"object\") return duration.duration*0.05;\n            return duration*0.05;\n        }\n    });\n\n    var MediaView = ComponentView.extend({\n\n        events: {\n            \"click .media-inline-transcript-button\": \"onToggleInlineTranscript\",\n            \"click .media-external-transcript-button\": \"onExternalTranscriptClicked\",\n            \"click .js-skip-to-transcript\": \"onSkipToTranscript\"\n        },\n\n        className: function() {\n            var classes = ComponentView.prototype.className.call(this);\n            var playerOptions = this.model.get('_playerOptions');\n            if (playerOptions && playerOptions.toggleCaptionsButtonWhenOnlyOne) {\n                classes += \" toggle-captions\";\n            }\n            return classes;\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, {\n                'device:resize': this.onScreenSizeChanged,\n                'device:changed': this.onDeviceChanged,\n                'media:stop': this.onMediaStop\n            });\n\n            _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking');\n\n            // set initial player state attributes\n            this.model.set({\n                '_isMediaEnded': false,\n                '_isMediaPlaying': false\n            });\n\n            if (this.model.get('_media').source) {\n                var media = this.model.get('_media');\n\n                // Avoid loading of Mixed Content (insecure content on a secure page)\n                if (window.location.protocol === 'https:' && media.source.indexOf('http:') === 0) {\n                    media.source = media.source.replace(/^http\\:/, 'https:');\n                }\n\n                this.model.set('_media', media);\n            }\n\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setupPlayer();\n        },\n\n        setupPlayer: function() {\n            if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});\n\n            var modelOptions = this.model.get('_playerOptions');\n\n            if (modelOptions.pluginPath === undefined) modelOptions.pluginPath = 'assets/';\n            if(modelOptions.features === undefined) {\n                modelOptions.features = ['playpause','progress','current','duration'];\n                if (this.model.get('_useClosedCaptions')) {\n                    modelOptions.features.unshift('tracks');\n                }\n                if (this.model.get(\"_allowFullScreen\")) {\n                    modelOptions.features.push('fullscreen');\n                }\n                if (this.model.get('_showVolumeControl')) {\n                    modelOptions.features.push('volume');\n                }\n            }\n\n            /*\n            Unless we are on Android/iOS and using native controls, when MediaElementJS initializes the player\n            it will invoke the success callback prior to performing one last call to setPlayerSize.\n            This call to setPlayerSize is deferred by 50ms so we add a delay of 100ms here to ensure that\n            we don't invoke setReadyStatus until the player is definitely finished rendering.\n            */\n            modelOptions.success = _.debounce(this.onPlayerReady.bind(this), 100);\n\n            if (this.model.get('_useClosedCaptions')) {\n                var startLanguage = this.model.get('_startLanguage') || 'en';\n                if (!Adapt.offlineStorage.get('captions')) {\n                    Adapt.offlineStorage.set('captions', startLanguage);\n                }\n                modelOptions.startLanguage = this.checkForSupportedCCLanguage(Adapt.offlineStorage.get('captions'));\n            }\n\n            if (modelOptions.alwaysShowControls === undefined) {\n                modelOptions.alwaysShowControls = false;\n            }\n            if (modelOptions.hideVideoControlsOnLoad === undefined) {\n                modelOptions.hideVideoControlsOnLoad = true;\n            }\n\n            this.addMediaTypeClass();\n\n            this.addThirdPartyFixes(modelOptions, function createPlayer() {\n                // create the player\n                this.$('audio, video').mediaelementplayer(modelOptions);\n                this.cleanUpPlayer();\n\n                // We're streaming - set ready now, as success won't be called above\n                try {\n                    if (this.model.get('_media').source) {\n                        this.$('.media-widget').addClass('external-source');\n                    }\n                } catch (e) {\n                    console.log(\"ERROR! No _media property found in components.json for component \" + this.model.get('_id'));\n                    this.setReadyStatus();\n                }\n            }.bind(this));\n        },\n\n        addMediaTypeClass: function() {\n            var media = this.model.get(\"_media\");\n            if (media && media.type) {\n                var typeClass = media.type.replace(/\\//, \"-\");\n                this.$(\".media-widget\").addClass(typeClass);\n            }\n        },\n\n        addThirdPartyFixes: function(modelOptions, callback) {\n            var media = this.model.get(\"_media\");\n            if (!media) return callback();\n\n            switch (media.type) {\n                case \"video/vimeo\":\n                    modelOptions.alwaysShowControls = false;\n                    modelOptions.hideVideoControlsOnLoad = true;\n                    modelOptions.features = [];\n                    if (froogaloopAdded) return callback();\n                    $.getScript(\"assets/froogaloop.js\")\n                        .done(function() {\n                            froogaloopAdded = true;\n                            callback();\n                        })\n                        .fail(function() {\n                            froogaloopAdded = false;\n                            console.log('Could not load froogaloop.js');\n                        });\n                    break;\n                default:\n                    callback();\n            }\n        },\n\n        cleanUpPlayer: function() {\n            this.$('.media-widget').children('.mejs-offscreen').remove();\n            this.$('[role=application]').removeAttr('role tabindex');\n            this.$('[aria-controls]').removeAttr('aria-controls');\n        },\n\n        setupEventListeners: function() {\n            this.completionEvent = (this.model.get('_setCompletionOn') || 'play');\n\n            if (this.completionEvent === 'inview') {\n                this.setupInviewCompletion('.component-widget');\n            }\n\n            // wrapper to check if preventForwardScrubbing is turned on.\n            if ((this.model.get('_preventForwardScrubbing')) && (!this.model.get('_isComplete'))) {\n                $(this.mediaElement).on({\n                    'seeking': this.onMediaElementSeeking,\n                    'timeupdate': this.onMediaElementTimeUpdate\n                });\n            }\n\n            // handle other completion events in the event Listeners\n            $(this.mediaElement).on({\n            \t'play': this.onMediaElementPlay,\n            \t'pause': this.onMediaElementPause,\n            \t'ended': this.onMediaElementEnded\n            });\n\n            // occasionally the mejs code triggers a click of the captions language\n            // selector during setup, this slight delay ensures we skip that\n            _.delay(this.listenForCaptionsChange.bind(this), 250);\n        },\n\n        /**\n         * Sets up the component to detect when the user has changed the captions so that it can store the user's\n         * choice in offlineStorage and notify other media components on the same page of the change\n         * Also sets the component up to listen for this event from other media components on the same page\n         */\n        listenForCaptionsChange: function() {\n            if(!this.model.get('_useClosedCaptions')) return;\n\n            var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ?\n                '.mejs-captions-button button' :\n                '.mejs-captions-selector';\n\n            this.$(selector).on('click.mediaCaptionsChange', _.debounce(function() {\n                var srclang = this.mediaElement.player.selectedTrack ? this.mediaElement.player.selectedTrack.srclang : 'none';\n                Adapt.offlineStorage.set('captions', srclang);\n                Adapt.trigger('media:captionsChange', this, srclang);\n            }.bind(this), 250)); // needs debouncing because the click event fires twice\n\n            this.listenTo(Adapt, 'media:captionsChange', this.onCaptionsChanged);\n        },\n\n        /**\n         * Handles updating the captions in this instance when learner changes captions in another\n         * media component on the same page\n         * @param {Backbone.View} view The view instance that triggered the event\n         * @param {string} lang The captions language the learner chose in the other media component\n         */\n        onCaptionsChanged: function(view, lang) {\n            if (view && view.cid === this.cid) return; //ignore the event if we triggered it\n\n            lang = this.checkForSupportedCCLanguage(lang);\n\n            this.mediaElement.player.setTrack(lang);\n\n            // because calling player.setTrack doesn't update the cc button's languages popup...\n            var $inputs = this.$('.mejs-captions-selector input');\n            $inputs.filter(':checked').prop('checked', false);\n            $inputs.filter('[value=\"' + lang + '\"]').prop('checked', true);\n        },\n\n        /**\n         * When the learner selects a captions language in another media component, that language may not be available\n         * in this instance, in which case default to the `_startLanguage` if that's set - or \"none\" if it's not\n         * @param {string} lang The language we're being asked to switch to e.g. \"de\"\n         * @return {string} The language we're actually going to switch to - or \"none\" if there's no good match\n         */\n        checkForSupportedCCLanguage: function (lang) {\n            if (!lang || lang === 'none') return 'none';\n\n            if(_.findWhere(this.model.get('_media').cc, {srclang: lang})) return lang;\n\n            return this.model.get('_startLanguage') || 'none';\n        },\n\n        onMediaElementPlay: function(event) {\n\n            Adapt.trigger(\"media:stop\", this);\n\n            this.model.set({\n                '_isMediaPlaying': true,\n                '_isMediaEnded': false\n            });\n\n            if (this.completionEvent === 'play') {\n                this.setCompletionStatus();\n            }\n        },\n\n        onMediaElementPause: function(event) {\n            this.model.set('_isMediaPlaying', false);\n        },\n\n        onMediaElementEnded: function(event) {\n            this.model.set('_isMediaEnded', true);\n\n            if (this.completionEvent === 'ended') {\n                this.setCompletionStatus();\n            }\n        },\n\n        onMediaElementSeeking: function(event) {\n            var maxViewed = this.model.get(\"_maxViewed\");\n            if(!maxViewed) {\n                maxViewed = 0;\n            }\n            if (event.target.currentTime > maxViewed) {\n                event.target.currentTime = maxViewed;\n            }\n        },\n\n        onMediaElementTimeUpdate: function(event) {\n            var maxViewed = this.model.get(\"_maxViewed\");\n            if (!maxViewed) {\n                maxViewed = 0;\n            }\n            if (event.target.currentTime > maxViewed) {\n                this.model.set(\"_maxViewed\", event.target.currentTime);\n            }\n        },\n\n        // Overrides the default play/pause functionality to stop accidental playing on touch devices\n        setupPlayPauseToggle: function() {\n            // bit sneaky, but we don't have a this.mediaElement.player ref on iOS devices\n            var player = this.mediaElement.player;\n\n            if (!player) {\n                console.log(\"Media.setupPlayPauseToggle: OOPS! there's no player reference.\");\n                return;\n            }\n\n            // stop the player dealing with this, we'll do it ourselves\n            player.options.clickToPlayPause = false;\n\n            this.onOverlayClick = this.onOverlayClick.bind(this);\n            this.onMediaElementClick = this.onMediaElementClick.bind(this);\n\n            // play on 'big button' click\n            this.$('.mejs-overlay-button').on(\"click\", this.onOverlayClick);\n\n            // pause on player click\n            this.$('.mejs-mediaelement').on(\"click\", this.onMediaElementClick);\n        },\n\n        onMediaStop: function(view) {\n\n            // Make sure this view isn't triggering media:stop\n            if (view && view.cid === this.cid) return;\n\n            if (!this.mediaElement || !this.mediaElement.player) return;\n\n            this.mediaElement.player.pause();\n\n        },\n\n        onOverlayClick: function() {\n            var player = this.mediaElement.player;\n            if (!player) return;\n\n            player.play();\n        },\n\n        onMediaElementClick: function(event) {\n            var player = this.mediaElement.player;\n            if (!player) return;\n\n            var isPaused = player.media.paused;\n            if(!isPaused) player.pause();\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        remove: function() {\n            this.$('.mejs-overlay-button').off(\"click\", this.onOverlayClick);\n            this.$('.mejs-mediaelement').off(\"click\", this.onMediaElementClick);\n\n            if(this.model.get('_useClosedCaptions')) {\n                var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ?\n                '.mejs-captions-button button' :\n                '.mejs-captions-selector';\n                this.$(selector).off('click.mediaCaptionsChange');\n            }\n\n            var modelOptions = this.model.get('_playerOptions');\n            delete modelOptions.success;\n\n            var media = this.model.get(\"_media\");\n            if (media) {\n                switch (media.type) {\n                case \"video/vimeo\":\n                    this.$(\"iframe\")[0].isRemoved = true;\n                }\n            }\n\n            if (this.mediaElement && this.mediaElement.player) {\n                var player_id = this.mediaElement.player.id;\n\n                purge(this.$el[0]);\n                this.mediaElement.player.remove();\n\n                if (mejs.players[player_id]) {\n                    delete mejs.players[player_id];\n                }\n            }\n\n            if (this.mediaElement) {\n                $(this.mediaElement).off({\n                    'play': this.onMediaElementPlay,\n                    'pause': this.onMediaElementPause,\n                    'ended': this.onMediaElementEnded,\n                    'seeking': this.onMediaElementSeeking,\n                    'timeupdate': this.onMediaElementTimeUpdate\n                });\n\n                this.mediaElement.src = \"\";\n                $(this.mediaElement.pluginElement).remove();\n                delete this.mediaElement;\n            }\n\n            ComponentView.prototype.remove.call(this);\n        },\n\n        onDeviceChanged: function() {\n            if (this.model.get('_media').source) {\n                this.$('.mejs-container').width(this.$('.component-widget').width());\n            }\n        },\n\n        onPlayerReady: function (mediaElement, domObject) {\n            this.mediaElement = mediaElement;\n\n            if (!this.mediaElement.player) {\n                this.mediaElement.player =  mejs.players[this.$('.mejs-container').attr('id')];\n            }\n\n            var hasTouch = mejs.MediaFeatures.hasTouch;\n            if (hasTouch) {\n                this.setupPlayPauseToggle();\n            }\n\n            this.addThirdPartyAfterFixes();\n\n            if(this.model.has('_startVolume')) {\n                // Setting the start volume only works with the Flash-based player if you do it here rather than in setupPlayer\n                this.mediaElement.player.setVolume(parseInt(this.model.get('_startVolume'))/100);\n            }\n\n            this.setReadyStatus();\n            this.setupEventListeners();\n        },\n\n        addThirdPartyAfterFixes: function() {\n            var media = this.model.get(\"_media\");\n            switch (media.type) {\n            case \"video/vimeo\":\n                this.$(\".mejs-container\").attr(\"tabindex\", 0);\n            }\n        },\n\n        onScreenSizeChanged: function() {\n            this.$('audio, video').width(this.$('.component-widget').width());\n        },\n\n        onSkipToTranscript: function() {\n            this.$('.media-transcript-container button').a11y_focus();\n        },\n\n        onToggleInlineTranscript: function(event) {\n            if (event) event.preventDefault();\n            var $transcriptBodyContainer = this.$(\".media-inline-transcript-body-container\");\n            var $button = this.$(\".media-inline-transcript-button\");\n            var $buttonText = this.$(\".media-inline-transcript-button .transcript-text-container\");\n\n            if ($transcriptBodyContainer.hasClass(\"inline-transcript-open\")) {\n                $transcriptBodyContainer.stop(true,true).slideUp(function() {\n                    $(window).resize();\n                });\n                $button.attr('aria-expanded', false);\n                $transcriptBodyContainer.removeClass(\"inline-transcript-open\");\n                $buttonText.html(this.model.get(\"_transcript\").inlineTranscriptButton);\n            } else {\n                $transcriptBodyContainer.stop(true,true).slideDown(function() {\n                    $(window).resize();\n                });\n                $button.attr('aria-expanded', true);\n                $transcriptBodyContainer.addClass(\"inline-transcript-open\");\n                $buttonText.html(this.model.get(\"_transcript\").inlineTranscriptCloseButton);\n\n                if (this.model.get('_transcript')._setCompletionOnView !== false) {\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        onExternalTranscriptClicked: function(event) {\n            if (this.model.get('_transcript')._setCompletionOnView !== false) {\n                this.setCompletionStatus();\n            }\n        }\n\n    });\n\n    return Adapt.register('media', {\n        model: ComponentModel.extend({}),// create a new class in the inheritance chain so it can be extended per component type if necessary later\n        view: MediaView\n    });\n\n});\n\n","define('components/adapt-contrib-narrative/js/modeEnum',[],function() {\n\n    return new ENUM([\n        'SMALL',\n        'LARGE'\n    ]);\n\n});\n\n","define('components/adapt-contrib-narrative/js/narrativeView',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    './modeEnum'\n], function(Adapt, ComponentView, MODE) {\n    'use strict';\n\n    var NarrativeView = ComponentView.extend({\n\n        _isInitial: true,\n\n        events: {\n            'click .narrative-strapline-title': 'openPopup',\n            'click .narrative-controls': 'onNavigationClicked',\n            'click .narrative-indicators .narrative-progress': 'onProgressClicked'\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, {\n                'device:changed device:resize': this.reRender,\n                'notify:closed': this.closeNotify\n            });\n            this.renderMode();\n\n            this.listenTo(this.model.get('_children'), {\n                'change:_isActive': this.onItemsActiveChange,\n                'change:_isVisited': this.onItemsVisitedChange\n            });\n\n            this.checkIfResetOnRevisit();\n            this.calculateWidths();\n        },\n\n        onItemsActiveChange: function(item, _isActive) {\n            if (_isActive === true) {\n                this.setStage(item);\n            }\n        },\n\n        onItemsVisitedChange: function(item, isVisited) {\n            if (!isVisited) return;\n            this.$('[data-index=\"' + item.get('_index') + '\"]').addClass('visited');\n        },\n\n        calculateMode: function() {\n            var mode = Adapt.device.screenSize === 'large' ?\n                MODE.LARGE :\n                MODE.SMALL;\n            this.model.set('_mode', mode);\n        },\n\n        renderMode: function() {\n            this.calculateMode();\n            if (this.isLargeMode()) {\n                this.$el.addClass('mode-large').removeClass('mode-small');\n            } else {\n                this.$el.addClass('mode-small').removeClass('mode-large');\n            }\n        },\n\n        isLargeMode: function() {\n            return this.model.get('_mode') === MODE.LARGE;\n        },\n\n        postRender: function() {\n            this.renderMode();\n            this.$('.narrative-slider').imageready(this.setReadyStatus.bind(this));\n            this.setupNarrative();\n\n            if (Adapt.config.get('_disableAnimation')) {\n                this.$el.addClass('disable-animation');\n            }\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        setupNarrative: function() {\n            this.renderMode();\n            var items = this.model.get('_children');\n            if (!items || !items.length) return;\n\n            var activeItem = this.model.getActiveItem();\n            if (!activeItem) {\n                activeItem = this.model.getItem(0);\n                activeItem.toggleActive(true);\n            } else {\n                // manually trigger change as it is not fired on reentry\n                items.trigger('change:_isActive', activeItem, true);\n            }\n\n            this.calculateWidths();\n\n            if (!this.isLargeMode() && !this.model.get('_wasHotgraphic')) {\n                this.replaceInstructions();\n            }\n            this.setupEventListeners();\n            this._isInitial = false;\n        },\n\n        calculateWidths: function() {\n            var itemCount = this.model.get('_children').length;\n            this.model.set({\n                '_totalWidth': 100 * itemCount,\n                '_itemWidth': 100 / itemCount\n            });\n        },\n\n        resizeControl: function() {\n            var previousMode = this.model.get('_mode');\n            this.renderMode();\n            if (previousMode !== this.model.get('_mode')) this.replaceInstructions();\n            this.evaluateNavigation();\n            var activeItem = this.model.getActiveItem();\n            if (activeItem) this.setStage(activeItem);\n        },\n\n        reRender: function() {\n            if (this.model.get('_wasHotgraphic') && this.isLargeMode()) {\n                this.replaceWithHotgraphic();\n            } else {\n                this.resizeControl();\n            }\n        },\n\n        closeNotify: function() {\n            this.evaluateCompletion();\n        },\n\n        replaceInstructions: function() {\n            if (this.isLargeMode()) {\n                this.$('.narrative-instruction-inner').html(this.model.get('instruction'));\n            } else if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {\n                this.$('.narrative-instruction-inner').html(this.model.get('mobileInstruction'));\n            }\n        },\n\n        replaceWithHotgraphic: function() {\n            if (!Adapt.componentStore.hotgraphic) throw \"Hotgraphic not included in build\";\n            var HotgraphicView = Adapt.componentStore.hotgraphic.view;\n\n            var model = this.prepareHotgraphicModel();\n            var newHotgraphic = new HotgraphicView({ model: model });\n            var $container = $(\".component-container\", $(\".\" + this.model.get(\"_parentId\")));\n\n            $container.append(newHotgraphic.$el);\n            this.remove();\n            $.a11y_update();\n            _.defer(function() {\n                Adapt.trigger('device:resize');\n            });\n        },\n\n        prepareHotgraphicModel: function() {\n            var model = this.model;\n            model.resetActiveItems();\n            model.set({\n                '_isPopupOpen': false,\n                '_component': 'hotgraphic',\n                'body': model.get('originalBody'),\n                'instruction': model.get('originalInstruction')\n            });\n\n            return model;\n        },\n\n        moveSliderToIndex: function(itemIndex) {\n            var offset = this.model.get('_itemWidth') * itemIndex;\n            if (Adapt.config.get('_defaultDirection') === 'ltr') {\n                offset *= -1;\n            }\n            var cssValue = 'translateX('+offset+'%)';\n            var $sliderElm = this.$('.narrative-slider');\n            var $straplineHeaderElm = this.$('.narrative-strapline-header-inner');\n\n            $sliderElm.css('transform', cssValue);\n            $straplineHeaderElm.css('transform', cssValue);\n\n            if (Adapt.config.get('_disableAnimation') || this._isInitial) {\n                this.onTransitionEnd();\n            } else {\n                $sliderElm.one('transitionend', this.onTransitionEnd.bind(this));\n            }\n        },\n\n        onTransitionEnd: function() {\n            if (this._isInitial) return;\n\n            var index = this.model.getActiveItem().get('_index');\n            if (this.isLargeMode()) {\n                this.$('.narrative-content-item[data-index=\"'+index+'\"]').a11y_focus();\n            } else {\n                this.$('.narrative-strapline-title').a11y_focus();\n            }\n        },\n\n        setStage: function(item) {\n            var index = item.get('_index');\n            if (this.isLargeMode()) {\n                // Set the visited attribute for large screen devices\n                item.toggleVisited(true);\n            }\n\n            var $slideGraphics = this.$('.narrative-slider-graphic');\n            this.$('.narrative-progress:visible').removeClass('selected').filter('[data-index=\"'+index+'\"]').addClass('selected');\n            $slideGraphics.children('.controls').a11y_cntrl_enabled(false);\n            $slideGraphics.filter('[data-index=\"'+index+'\"]').children('.controls').a11y_cntrl_enabled(true);\n            this.$('.narrative-content-item').addClass('narrative-hidden').a11y_on(false).filter('[data-index=\"'+index+'\"]').removeClass('narrative-hidden').a11y_on(true);\n            this.$('.narrative-strapline-title').a11y_cntrl_enabled(false).filter('[data-index=\"'+index+'\"]').a11y_cntrl_enabled(true);\n\n            this.evaluateNavigation();\n            this.evaluateCompletion();\n            this.moveSliderToIndex(index);\n        },\n\n        evaluateNavigation: function() {\n            var active = this.model.getActiveItem();\n            if (!active) return;\n\n            var currentStage = active.get('_index');\n            var itemCount = this.model.get('_children').length;\n\n            var isAtStart = currentStage === 0;\n            var isAtEnd = currentStage === itemCount - 1;\n\n            this.$('.narrative-control-left').toggleClass('narrative-hidden', isAtStart);\n            this.$('.narrative-control-right').toggleClass('narrative-hidden', isAtEnd);\n        },\n\n        evaluateCompletion: function() {\n            if (this.model.areAllItemsCompleted()) {\n                this.trigger('allItems');\n            }\n        },\n\n        openPopup: function(event) {\n            event && event.preventDefault();\n\n            var currentItem = this.model.getActiveItem();\n            Adapt.trigger('notify:popup', {\n                title: currentItem.get('title'),\n                body: currentItem.get('body')\n            });\n\n            Adapt.on('popup:opened', function() {\n                // Set the visited attribute for small and medium screen devices\n                currentItem.toggleVisited(true);\n            });\n        },\n\n        onNavigationClicked: function(event) {\n            var stage = this.model.getActiveItem().get('_index');\n\n            if ($(event.currentTarget).hasClass('narrative-control-right')) {\n                this.model.setActiveItem(++stage);\n            } else if ($(event.currentTarget).hasClass('narrative-control-left')) {\n                this.model.setActiveItem(--stage);\n            }\n        },\n\n        onProgressClicked: function(event) {\n            event && event.preventDefault();\n            var clickedIndex = $(event.target).data('index');\n            this.model.setActiveItem(clickedIndex);\n        },\n\n        setupEventListeners: function() {\n            if (this.model.get('_setCompletionOn') === 'inview') {\n                this.setupInviewCompletion('.component-widget');\n            }\n        }\n\n    });\n\n    return NarrativeView;\n\n});\n\n","define('components/adapt-contrib-narrative/js/adapt-contrib-narrative',[\n    'core/js/adapt',\n    './narrativeView',\n    'core/js/models/itemsComponentModel'\n], function(Adapt, NarrativeView, ItemsComponentModel) {\n\n    return Adapt.register('narrative', {\n        model: ItemsComponentModel,\n        view: NarrativeView\n    });\n\n});\n\n","define('components/adapt-contrib-slider/js/sliderView',[\n\t'core/js/adapt',\n    'core/js/views/questionView'\n], function(Adapt, QuestionView) {\n\n    var SliderView = QuestionView.extend({\n\n        events: {\n            'click .slider-scale-number': 'onNumberSelected',\n            'focus input[type=\"range\"]': 'onHandleFocus',\n            'blur input[type=\"range\"]': 'onHandleBlur'\n        },\n\n        // Used by the question to reset the question when revisiting the component\n        resetQuestionOnRevisit: function() {\n            this.setAllItemsEnabled();\n            this.model.deselectAllItems();\n            this.resetQuestion();\n        },\n\n        // Used by question to setup itself just before rendering\n        setupQuestion: function() {\n            if (this.model.get('_isSubmitted')) return;\n\n            this.selectItem(this.getIndexFromValue(this.model.get('_selectedItem').value), true);\n        },\n\n        setupRangeslider: function () {\n            this.$sliderScaleMarker = this.$('.slider-scale-marker');\n            this.$slider = this.$('input[type=\"range\"]');\n            if(this.model.has('_scaleStep')) {\n                this.$slider.attr({\"step\": this.model.get('_scaleStep')});\n            }\n\n            this.$slider.rangeslider({\n                polyfill: false,\n                onSlide: _.bind(this.handleSlide, this)\n            });\n            this.oldValue = 0;\n\n            if (this._deferEnable) {\n                this.setAllItemsEnabled();\n            }\n        },\n\n        handleSlide: function (position, value) {\n            if (this.oldValue === value) {\n                return;\n            }\n            var itemIndex = this.getIndexFromValue(value);\n            var pixels = this.mapIndexToPixels(itemIndex);\n            this.selectItem(itemIndex, false);\n            this.animateToPosition(pixels);\n            this.oldValue = value;\n        },\n\n        disableQuestion: function() {\n            this.setAllItemsEnabled();\n        },\n\n        enableQuestion: function() {\n            this.setAllItemsEnabled();\n        },\n\n        setAllItemsEnabled: function() {\n            var isEnabled = this.model.get('_isEnabled');\n\n            if (!this.$slider) {\n                this._deferEnable = true; // slider is not yet ready\n                return;\n            }\n\n            if (!isEnabled) {\n                this.$('.slider-widget').addClass('disabled');\n                this.$slider.prop('disabled', true).rangeslider('update', true);\n                return;\n            }\n\n            this.$('.slider-widget').removeClass('disabled');\n            this.$slider.prop('disabled', false).rangeslider('update', true);\n        },\n\n        onQuestionRendered: function() {\n            this.setupRangeslider();\n            this.setScalePositions();\n            this.onScreenSizeChanged();\n            this.showScaleMarker(true);\n            this.listenTo(Adapt, 'device:resize', this.onScreenSizeChanged);\n            this.setAltText(this.model.get('_scaleStart'));\n            this.setReadyStatus();\n        },\n\n        // this should make the slider handle, slider marker and slider bar to animate to give position\n        animateToPosition: function(newPosition) {\n            if (!this.$sliderScaleMarker) return;\n\n            this.$sliderScaleMarker\n                .velocity('stop')\n                .velocity({\n                    left: newPosition\n                }, {\n                    duration: 200,\n                    easing: \"linear\",\n                    mobileHA: false\n                });\n        },\n\n        // this shoud give the index of item using given slider value\n        getIndexFromValue: function(itemValue) {\n            var scaleStart = this.model.get('_scaleStart');\n            var scaleEnd = this.model.get('_scaleEnd');\n            return Math.round(this.mapValue(itemValue, scaleStart, scaleEnd, 0, this.model.get('_items').length - 1));\n        },\n\n        // this should set given value to slider handle\n        setAltText: function(value) {\n            this.$('.slider-handle').attr('aria-valuenow', value);\n        },\n\n        mapIndexToPixels: function(value, $widthObject) {\n            var numberOfItems = this.model.get('_items').length;\n            var width = $widthObject ? $widthObject.width() : this.$('.slider-scaler').width();\n\n            return Math.round(this.mapValue(value, 0, numberOfItems - 1, 0, width));\n        },\n\n        mapPixelsToIndex: function(value) {\n            var numberOfItems = this.model.get('_items').length;\n            var width = this.$('.slider-sliderange').width();\n\n            return Math.round(this.mapValue(value, 0, width, 0, numberOfItems - 1));\n        },\n\n        normalise: function(value, low, high) {\n            var range = high - low;\n            return (value - low) / range;\n        },\n\n        mapValue: function(value, inputLow, inputHigh, outputLow, outputHigh) {\n            var normal = this.normalise(value, inputLow, inputHigh);\n            return normal * (outputHigh - outputLow) + outputLow;\n        },\n\n        onHandleFocus: function(event) {\n            event.preventDefault();\n            this.$slider.on('keydown', _.bind(this.onKeyDown, this));\n        },\n\n        onHandleBlur: function(event) {\n            event.preventDefault();\n            this.$slider.off('keydown');\n        },\n\n        onKeyDown: function(event) {\n            if(event.which === 9) return; // tab key\n            event.preventDefault();\n\n            var newItemIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);\n\n            switch (event.which) {\n                case 40: // ↓ down\n                case 37: // ← left\n                    newItemIndex = Math.max(newItemIndex - 1, 0);\n                    break;\n                case 38: // ↑ up\n                case 39: // → right\n                    newItemIndex = Math.min(newItemIndex + 1, this.model.get('_items').length - 1);\n                    break;\n            }\n\n            this.selectItem(newItemIndex);\n            if(typeof newItemIndex === 'number') this.showScaleMarker(true);\n            this.animateToPosition(this.mapIndexToPixels(newItemIndex));\n            this.setSliderValue(this.getValueFromIndex(newItemIndex));\n            this.setAltText(this.getValueFromIndex(newItemIndex));\n        },\n\n        onNumberSelected: function(event) {\n            event.preventDefault();\n\n            if (this.model.get('_isInteractionComplete')) {\n                return;\n            }\n\n            // when component is not reset, selecting a number should be prevented\n            if (this.$slider.prop('disabled')) {\n                return;\n            }\n\n            var itemValue = parseFloat($(event.currentTarget).attr('data-id'));\n            var index = this.getIndexFromValue(itemValue);\n            this.selectItem(index);\n            this.animateToPosition(this.mapIndexToPixels(index));\n            this.setAltText(itemValue);\n            this.setSliderValue(itemValue);\n        },\n\n        getValueFromIndex: function(index) {\n            return this.model.get('_items')[index].value;\n        },\n\n        resetControlStyles: function() {\n            this.$('.slider-handle').empty();\n            this.showScaleMarker(false);\n            this.$('.slider-bar').animate({width:'0px'});\n            this.setSliderValue(this.model.get('_items')[0].value);\n        },\n\n        onCannotSubmit: function() {},\n\n        setSliderValue: function (value) {\n            if (this.$slider) {\n                this.$slider.val(value).change();\n            }\n        },\n\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            this.$('.slider-widget').removeClass('correct incorrect')\n                .addClass(this.model.get('_selectedItem').correct ? 'correct' : 'incorrect');\n        },\n\n        resetQuestion: function() {\n            this.selectItem(0, true);\n            this.animateToPosition(0);\n            this.resetControlStyles();\n            this.showScaleMarker(true);\n            this.setAltText(this.model.get('_scaleStart'));\n        },\n\n        setScalePositions: function() {\n            var numberOfItems = this.model.get('_items').length;\n            _.each(this.model.get('_items'), function(item, index) {\n                var normalisedPosition = this.normalise(index, 0, numberOfItems -1);\n                this.$('.slider-scale-number').eq(index).data('normalisedPosition', normalisedPosition);\n            }, this);\n        },\n\n        showScale: function () {\n            var $markers = this.$('.slider-markers').empty();\n\n            if (this.model.get('_showScale') === false) {\n                $markers.eq(0).css({display: 'none'});\n                this.$('.slider-scale-number').css(\n                    this.model.get('_showScaleIndicator') ? {visibility: 'hidden'} : {display: 'none'}\n                );\n                return;\n            }\n\n            var $scaler = this.$('.slider-scaler');\n            for (var i = 1, count = this.model.get('_items').length - 1; i < count; i++) {\n                $markers.append(\"<div class='slider-line component-item-color' style='left: \" + this.mapIndexToPixels(i, $scaler) + \"px'>\");\n            }\n            // Do we show scale numbers\n            this.showScaleNumbers();\n        },\n\n        showScaleNumbers: function () {\n            var $scaler = this.$('.slider-scaler');\n            var $numbers = this.$('.slider-scale-number');\n\n            if (this.model.get('_showScaleNumbers') === false) {\n                $numbers.css('display', 'none');\n                return;\n            }\n\n            var scaleWidth = $scaler.width();\n            this.model.get('_items').forEach(function(item, index) {\n                var $number = $numbers.eq(index);\n                var newLeft = Math.round($number.data('normalisedPosition') * scaleWidth);\n                $number.css({left: newLeft});\n            });\n        },\n\n        //Labels are enabled in slider.hbs. Here we manage their containing div.\n        showLabels: function () {\n            if(!this.model.get('labelStart') && !this.model.get('labelEnd')) {\n                this.$('.slider-scale-labels').eq(0).css({display: 'none'});\n            }\n        },\n\n        remapSliderBar: function() {\n            var $scaler = this.$('.slider-scaler');\n            var currentIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);\n            var left = this.mapIndexToPixels(currentIndex, $scaler);\n            this.$('.slider-handle').css({left: left + 'px'});\n            this.$('.slider-scale-marker').css({left: left + 'px'});\n            this.$('.slider-bar').width(left);\n        },\n\n        onScreenSizeChanged: function() {\n            this.showScale();\n            this.showLabels();\n            this.remapSliderBar();\n            if (this.$('.slider-widget').hasClass('show-user-answer')) {\n                this.hideCorrectAnswer();\n            } else if (this.$('.slider-widget').hasClass('show-correct-answer')) {\n                this.showCorrectAnswer();\n            }\n        },\n\n        showCorrectAnswer: function() {\n            var answers = [];\n\n            if(this.model.has('_correctAnswer')) {\n                var correctAnswer = this.model.get('_correctAnswer');\n            }\n\n            if (this.model.has('_correctRange')) {\n                var bottom = this.model.get('_correctRange')._bottom;\n                var top = this.model.get('_correctRange')._top;\n                var step = (this.model.has('_scaleStep') ? this.model.get('_scaleStep') : 1);\n            }\n\n            this.showScaleMarker(false);\n\n            //are we dealing with a single correct answer or a range?\n            if (correctAnswer) {\n                answers.push(correctAnswer);\n            } else if (bottom !== undefined && top !== undefined) {\n                var answer = this.model.get('_correctRange')._bottom;\n                var topOfRange = this.model.get('_correctRange')._top;\n                while(answer <= topOfRange) {\n                    answers.push(answer);\n                    answer += step;\n                }\n            } else {\n                console.log(\"adapt-contrib-slider::WARNING: no correct answer or correct range set in JSON\");\n            }\n\n            var middleAnswer = answers[Math.floor(answers.length / 2)];\n            this.animateToPosition(this.mapIndexToPixels(this.getIndexFromValue(middleAnswer)));\n\n            this.showModelAnswers(answers);\n\n            this.setSliderValue(middleAnswer);\n        },\n\n        showModelAnswers: function(correctAnswerArray) {\n            var $parentDiv = this.$('.slider-modelranges');\n            _.each(correctAnswerArray, function(correctAnswer, index) {\n                $parentDiv.append($(\"<div class='slider-model-answer component-item-color component-item-text-color'>\"));\n\n                var $element = $(this.$('.slider-modelranges .slider-model-answer')[index]);\n                var startingLeft = this.mapIndexToPixels(this.getIndexFromValue(this.model.get('_selectedItem').value));\n\n                if(this.model.get('_showNumber')) $element.html(correctAnswer);\n\n                $element.css({left:startingLeft}).fadeIn(0, _.bind(function() {\n                    $element.animate({left: this.mapIndexToPixels(this.getIndexFromValue(correctAnswer))});\n                }, this));\n            }, this);\n        },\n\n        hideCorrectAnswer: function() {\n            var userAnswerIndex = this.getIndexFromValue(this.model.get('_userAnswer'));\n            this.$('.slider-modelranges').empty();\n\n            this.showScaleMarker(true);\n            this.selectItem(userAnswerIndex, true);\n            this.animateToPosition(this.mapIndexToPixels(userAnswerIndex));\n            this.setSliderValue(this.model.get('_userAnswer'));\n        },\n\n        // according to given item index this should make the item as selected\n        selectItem: function(itemIndex, noFocus) {\n            _.each(this.model.get('_items'), function(item, index) {\n                item.selected = (index === itemIndex);\n                if(item.selected) {\n                    this.model.set('_selectedItem', item);\n                    this.$('input').attr({\n                        \"value\": item.value,\n                        \"aria-valuenow\": item.value\n                    });\n                }\n            }, this);\n            this.showNumber(true);\n        },\n\n        // this makes the marker visible or hidden\n        showScaleMarker: function(show) {\n            var $scaleMarker = this.$('.slider-scale-marker');\n            if (this.model.get('_showScaleIndicator')) {\n                this.showNumber(show);\n                if(show) {\n                    $scaleMarker.addClass('display-block');\n                } else {\n                    $scaleMarker.removeClass('display-block');\n                }\n            }\n        },\n\n        // this should add the current slider value to the marker\n        showNumber: function(show) {\n            var $scaleMarker = this.$('.slider-scale-marker');\n            if(this.model.get('_showNumber')) {\n                if(show) {\n                    $scaleMarker.html(this.model.get('_selectedItem').value);\n                } else {\n                    $scaleMarker.html = \"\";\n                }\n            }\n        }\n    });\n\n    return SliderView;\n});\n","define('components/adapt-contrib-slider/js/sliderModel',[\n    'core/js/adapt',\n    'core/js/models/questionModel'\n], function(Adapt, QuestionModel) {\n\n    var SliderModel = QuestionModel.extend({\n\n        init:function() {\n            QuestionModel.prototype.init.call(this);\n\n            this.setupModelItems();\n\n            this.set('_selectedItem', this.get('_items')[0]);\n        },\n\n        /**\n         * Returns the number of decimal places in a specified number\n         */\n        getDecimalPlaces: function(num) {\n            return (num.toString().split('.')[1] || []).length;\n        },\n\n        setupModelItems: function() {\n            var items = [];\n            var answer = this.get('_correctAnswer');\n            var range = this.get('_correctRange');\n            var start = this.get('_scaleStart');\n            var end = this.get('_scaleEnd');\n            var step = this.get('_scaleStep') || 1;\n\n            var dp = this.getDecimalPlaces(step);\n\n            for (var i = start; i <= end; i += step) {\n                if (dp !== 0) {\n                    // Ensure that steps with decimal places are handled correctly.\n                    i = parseFloat(i.toFixed(dp));\n                }\n\n                items.push({\n                    value: i,\n                    selected: false,\n                    // _correctAnswer/answer is a String - this allows AAT users to assign it no value when _correctRange needs to be used instead\n                    // we therefore need to convert it to Number when checking the answer (see https://github.com/adaptlearning/adapt_framework/issues/2259)\n                    correct : answer ? i === Number(answer) : (i >= range._bottom && i <= range._top)\n                });\n            }\n\n            this.set({\n                '_items': items,\n                '_marginDir': Adapt.config.get('_defaultDirection') === 'rtl' ? 'right' : 'left'\n            });\n        },\n\n        /**\n        * allow the user to submit immediately; the slider handle may already be in the position they want to choose\n        */\n        canSubmit: function() {\n            return true;\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.get('_isSubmitted')) {\n                this.set({\n                    _selectedItem: {},\n                    _userAnswer: undefined\n                });\n                return;\n            }\n\n            var items = this.get('_items');\n            var userAnswer = this.get('_userAnswer');\n            for (var i = 0, l = items.length; i < l; i++) {\n                var item = items[i];\n                if (item.value === userAnswer) {\n                    item.selected = true;\n                    this.set('_selectedItem', item);\n                    break;\n                }\n            }\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            this.setupFeedback();\n        },\n\n        //This preserves the state of the users answers for returning or showing the users answer\n        storeUserAnswer: function() {\n            this.set('_userAnswer', this.get('_selectedItem').value);\n        },\n\n        resetUserAnswer: function() {\n            this.set({\n                _isAtLeastOneCorrectSelection: false,\n                _selectedItem: {},\n                _userAnswer: undefined\n            });\n        },\n\n        deselectAllItems: function() {\n            _.each(this.get('_items'), function(item) {\n                item.selected = false;\n            }, this);\n        },\n\n        isCorrect: function() {\n            var numberOfCorrectAnswers = 0;\n\n            _.each(this.get('_items'), function(item, index) {\n                if (item.selected && item.correct) {\n                    this.set('_isAtLeastOneCorrectSelection', true);\n                    numberOfCorrectAnswers++;\n                }\n            }, this);\n\n            this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n\n            return this.get('_isAtLeastOneCorrectSelection') ? true : false;\n        },\n\n        isPartlyCorrect: function() {\n            return this.get('_isAtLeastOneCorrectSelection');\n        },\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {\n            var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');\n            var questionWeight = this.get('_questionWeight');\n            var score = questionWeight * numberOfCorrectAnswers;\n            this.set('_score', score);\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        */\n        getResponse:function() {\n            return this.get('_userAnswer').toString();\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType:function() {\n            return \"numeric\";\n        }\n    });\n\n    return SliderModel;\n});\n","define('components/adapt-contrib-slider/js/adapt-contrib-slider',[\n    'core/js/adapt',\n    './sliderView',\n    './sliderModel',\n    'libraries/rangeslider'\n], function(Adapt, SliderView, SliderModel) {\n\n    return Adapt.register(\"slider\", {\n        view: SliderView,\n        model: SliderModel\n    });\n});\n\n","define('components/adapt-contrib-text/js/adapt-contrib-text',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'core/js/models/componentModel'\n], function(Adapt, ComponentView, ComponentModel) {\n\n    var TextView = ComponentView.extend({\n\n        preRender: function() {\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n\n            this.setupInview();\n        },\n\n        setupInview: function() {\n            var selector = this.getInviewElementSelector();\n            if (!selector) {\n                this.setCompletionStatus();\n                return;\n            }\n\n            this.setupInviewCompletion(selector);\n        },\n\n        /**\n         * determines which element should be used for inview logic - body, instruction or title - and returns the selector for that element\n         */\n        getInviewElementSelector: function() {\n            if (this.model.get('body')) return '.component-body';\n\n            if (this.model.get('instruction')) return '.component-instruction';\n\n            if (this.model.get('displayTitle')) return '.component-title';\n\n            return null;\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        }\n    },\n    {\n        template: 'text'\n    });\n\n    return Adapt.register('text', {\n        model: ComponentModel.extend({}),// create a new class in the inheritance chain so it can be extended per component type if necessary later\n        view: TextView\n    });\n});\n\n","define('components/adapt-contrib-textInput/js/textInputView',[\n    'core/js/views/questionView'\n], function(QuestionView) {\n\n    var TextInputView = QuestionView.extend({\n\n        events: {\n            'focus input': 'clearValidationError',\n            'change input': 'onInputChanged'\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.setAllItemsEnabled(false);\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.model.setupRandomisation();\n        },\n\n        disableQuestion: function() {\n            this.setAllItemsEnabled(false);\n        },\n\n        enableQuestion: function() {\n            this.setAllItemsEnabled(true);\n        },\n\n        setAllItemsEnabled: function(isEnabled) {\n            this.model.get('_items').forEach(function(item, index) {\n                var $itemInput = this.$('input').eq(index);\n\n                $itemInput.prop('disabled', !isEnabled);\n            }, this);\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n        },\n\n        clearValidationError: function() {\n            this.$('.textinput-item-textbox').removeClass('textinput-validation-error');\n        },\n\n        // Blank method for question to fill out when the question cannot be submitted\n        onCannotSubmit: function() {\n            this.showValidationError();\n        },\n\n        showValidationError: function() {\n            this.$('.textinput-item-textbox').addClass('textinput-validation-error');\n        },\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            this.model.get('_items').forEach(function(item, i) {\n                var $item = this.$('.textinput-item').eq(i);\n                $item.removeClass('correct incorrect').addClass(item._isCorrect ? 'correct' : 'incorrect');\n            }, this);\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        resetQuestion: function() {\n            this.$('.textinput-item-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');\n\n            this.model.set({\n                _isAtLeastOneCorrectSelection: false,\n                _isCorrect: undefined\n            });\n        },\n\n        showCorrectAnswer: function() {\n\n            if (this.model.get('_answers'))  {\n\n                var correctAnswers = this.model.get('_answers');\n                this.model.get('_items').forEach(function(item, index) {\n                    this.$('.textinput-item-textbox').eq(index).val(correctAnswers[index][0]);\n                }, this);\n\n            } else {\n                this.model.get('_items').forEach(function(item, index) {\n                    this.$('.textinput-item-textbox').eq(index).val(item._answers[0]);\n                }, this);\n            }\n\n        },\n\n        hideCorrectAnswer: function() {\n            this.model.get('_items').forEach(function(item, index) {\n                this.$('.textinput-item-textbox').eq(index).val(item.userAnswer);\n            }, this);\n        },\n\n        onInputChanged:function(e) {\n            var $input = $(e.target);\n            this.model.setItemUserAnswer($input.index(), $input.val());\n        }\n    });\n\n    return TextInputView;\n});\n","define('components/adapt-contrib-textInput/js/textInputModel',[\n    'core/js/models/questionModel'\n], function(QuestionModel) {\n\n    var TextInputModel = QuestionModel.extend({\n\n        init: function() {\n            QuestionModel.prototype.init.call(this);\n\n            this.set( '_genericAnswerIndexOffset', TextInputModel.genericAnswerIndexOffset );\n\n            this.setupQuestionItemIndexes();\n        },\n\n        setupQuestionItemIndexes: function() {\n            this.get('_items').forEach(function(item, index) {\n\n                if (item._index === undefined) item._index = index;\n                if (item._answerIndex === undefined) item._answerIndex = -1;\n\n            });\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.get('_isSubmitted')) return;\n\n            var userAnswer = this.get('_userAnswer');\n            var genericAnswers = this.get('_answers');\n            this.get('_items').forEach(function(item) {\n                var answerIndex = userAnswer[item._index];\n                if (answerIndex >= TextInputModel.genericAnswerIndexOffset) {\n                    item.userAnswer = genericAnswers[answerIndex - TextInputModel.genericAnswerIndexOffset];\n                    item._answerIndex = answerIndex;\n                } else if (answerIndex > -1) {\n                    item.userAnswer = item._answers[answerIndex];\n                    item._answerIndex = answerIndex;\n                } else {\n                    if (item.userAnswer === undefined) item.userAnswer = '******';\n                    item._answerIndex = -1;\n                }\n                if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];\n            });\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            this.setupFeedback();\n        },\n\n        setupRandomisation: function() {\n            if (!this.get('_isRandom') || !this.get('_isEnabled')) return;\n\n            this.set('_items', _.shuffle(this.get('_items')));\n        },\n\n        // Use to check if the user is allowed to submit the question\n        canSubmit: function() {\n            // can submit if every item has user input\n            var canSubmit = _.every(this.get('_items'), function(item) {\n                return item.userAnswer !== '';\n            });\n\n            return canSubmit;\n        },\n\n        setItemUserAnswer:function(itemIndex, userAnswer) {\n            var item = this.get('_items')[itemIndex];\n            item.userAnswer = userAnswer;\n        },\n\n        //This preserve the state of the users answers for returning or showing the users answer\n        storeUserAnswer: function() {\n            var items = this.get('_items');\n\n            this.isCorrect();\n\n            var userAnswer = new Array( items.length );\n            items.forEach(function(item, index) {\n                userAnswer[ item._index ] = item._answerIndex;\n            });\n            this.set('_userAnswer', userAnswer);\n        },\n\n        isCorrect: function() {\n            if (this.get('_answers')) {\n                this.markGenericAnswers();\n            } else {\n                this.markSpecificAnswers();\n            }\n            // do we have any _isCorrect == false?\n            return !_.contains(_.pluck(this.get('_items'), '_isCorrect'), false);\n        },\n\n        isPartlyCorrect: function() {\n            return this.get('_isAtLeastOneCorrectSelection');\n        },\n\n        // Allows the learner to give answers into any input, ignoring the order.\n        // (this excludes any inputs which have their own specific answers).\n        markGenericAnswers: function() {\n            var numberOfCorrectAnswers = 0;\n            var correctAnswers = this.get('_answers').slice();\n            var usedAnswerIndexes = [];\n\n            this.get('_items').forEach(function(item) {\n                correctAnswers.forEach(function(answerGroup, answerIndex) {\n                    if (_.indexOf(usedAnswerIndexes, answerIndex) > -1) return;\n\n                    if (this.checkAnswerIsCorrect(answerGroup, item.userAnswer) == false) return;\n\n                    usedAnswerIndexes.push(answerIndex);\n                    item._isCorrect = true;\n                    item._answerIndex = answerIndex + TextInputModel.genericAnswerIndexOffset;\n\n                    this.set({\n                        _numberOfCorrectAnswers: ++numberOfCorrectAnswers,\n                        _isAtLeastOneCorrectSelection: true\n                    });\n\n                }, this);\n                if(!item._isCorrect) item._isCorrect = false;\n            }, this);\n        },\n\n        // Marks any items which have answers specific to it\n        // (i.e. item has a _answers array)\n        markSpecificAnswers: function() {\n            var numberOfCorrectAnswers = 0;\n            this.get('_items').forEach(function(item) {\n                if (!item._answers) return;\n                var userAnswer = item.userAnswer || '';\n                if (this.checkAnswerIsCorrect(item._answers, userAnswer)) {\n                    item._isCorrect = true;\n                    item._answerIndex = _.indexOf(item._answers, this.cleanupUserAnswer(userAnswer));\n                    this.set({\n                        _numberOfCorrectAnswers: ++numberOfCorrectAnswers,\n                        _isAtLeastOneCorrectSelection: true\n                    });\n                } else {\n                    item._isCorrect = false;\n                    item._answerIndex = -1;\n                }\n            }, this);\n        },\n\n        checkAnswerIsCorrect: function(possibleAnswers, userAnswer) {\n            var uAnswer = this.cleanupUserAnswer(userAnswer);\n            var matched = possibleAnswers.filter(function(cAnswer) {\n                return this.cleanupUserAnswer(cAnswer) == uAnswer;\n            }, this);\n\n            var answerIsCorrect = matched && matched.length > 0;\n            if (answerIsCorrect) this.set('_hasAtLeastOneCorrectSelection', true);\n            return answerIsCorrect;\n        },\n\n        cleanupUserAnswer: function(userAnswer) {\n            if (this.get('_allowsAnyCase')) {\n                userAnswer = userAnswer.toLowerCase();\n            }\n            if (this.get('_allowsPunctuation')) {\n                userAnswer = userAnswer.replace(/[\\.,-\\/#!$£%\\^&\\*;:{}=\\-_`~()]/g, '');\n                //remove any orphan double spaces and replace with single space (B & Q)->(B  Q)->(B Q)\n                userAnswer = userAnswer.replace(/(  +)+/g, ' ');\n            }\n            // removes whitespace from beginning/end (leave any in the middle)\n            return $.trim(userAnswer);\n        },\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {\n            var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');\n            var questionWeight = this.get('_questionWeight');\n            var itemLength = this.get('_items').length;\n\n            var score = questionWeight * numberOfCorrectAnswers / itemLength;\n\n            this.set('_score', score);\n        },\n\n        resetUserAnswer: function() {\n            this.get('_items').forEach(function(item) {\n                item._isCorrect = false;\n                item.userAnswer = '';\n            });\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        * returns the user's answers as a string in the format 'answer1[,]answer2[,]answer3'\n        * the use of [,] as an answer delimiter is from the SCORM 2004 specification for the fill-in interaction type\n        */\n        getResponse: function() {\n            return _.pluck(this.get('_items'), 'userAnswer').join('[,]');\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType: function() {\n            return 'fill-in';\n        }\n    }, {\n        genericAnswerIndexOffset: 65536\n    });\n\n    return TextInputModel;\n});\n","define('components/adapt-contrib-textInput/js/adapt-contrib-textInput',[\n    'core/js/adapt',\n    './textInputView',\n    './textInputModel',\n], function(Adapt, TextInputView, TextInputModel) {\n\n    return Adapt.register(\"textinput\", {\n        view: TextInputView,\n        model: TextInputModel\n    });\n});\n","define('extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView',[\n    'core/js/adapt',\n    'core/js/views/articleView'\n], function(Adapt, AdaptArticleView) {\n\n    var AssessmentView = {\n\n        postRender: function() {\n            AdaptArticleView.prototype.postRender.call(this);\n            if (this.model.isAssessmentEnabled()) {\n                this._setupEventListeners();\n\n                var config = this.model.getConfig();\n                if (config && config._questions && config._questions._canShowMarking === false) {\n                    this.$el.addClass('no-marking');\n                }\n            }\n            this.$el.addClass('assessment');\n        },\n\n        _setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'assessments:complete': this._onAssessmentComplete,\n                'assessments:reset': this._onAssessmentReset,\n                remove: this._onRemove\n            });\n        },\n\n        _removeEventListeners: function() {\n            this.stopListening(Adapt, {\n                'assessments:complete': this._onAssessmentComplete,\n                'assessments:reset': this._onAssessmentReset\n            });\n        },\n\n        _onAssessmentComplete: function(state, model) {\n            if (state.id != this.model.get('_assessment')._id) return;\n\n            console.log('assessment complete', state, model);\n        },\n\n        _onAssessmentReset: function(state, model) {\n            if (state.id != this.model.get('_assessment')._id) return;\n\n            console.log('assessment reset', state, model);\n\n        },\n\n        _onRemove: function() {\n            this._removeEventListeners();\n        }\n\n    };\n\n    return AssessmentView;\n\n});\n\n","define('extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank',['require'],function(require) {\n\n    var QuestionBank = function(quizBankid, articleId, numQuestionBlocks, uniqueQuestions) {\n\n        this._id = quizBankid;\n        this._articleId = articleId;\n        this._numQuestionBlocks = numQuestionBlocks;\n        this._uniqueQuestions = uniqueQuestions;\n        this.questionBlocks = [];\n        this.unUsedQuestionBlocks = undefined;\n        this.usedQuestionBlocks = [];\n\n    };\n\n    QuestionBank.prototype = {\n\n        getID: function() {\n            return this._id;\n        },\n\n        addBlock: function(block) {\n            this.questionBlocks.push(block);\n        },\n\n        getRandomQuestionBlocks: function() {\n            this.checkResetUnunsedBlocks();\n\n            var questionBlocks = [];\n            var usedQuestionBlocks = this.usedQuestionBlocks.slice(0);\n\n            for (var i = 0; i < this._numQuestionBlocks; i++) {\n                var question = this.getRandomQuestion();\n                if (question !== undefined) {\n                    questionBlocks.push(question);\n                } else {\n                    if (usedQuestionBlocks.length === 0) break;\n                    var index = Math.floor(Math.random() * (usedQuestionBlocks.length-1));\n                    question = usedQuestionBlocks.splice(index, 1)[0];\n                    questionBlocks.push(question);\n                }\n            }\n\n            return questionBlocks;\n        },\n\n        checkResetUnunsedBlocks: function() {\n            if (this.unUsedQuestionBlocks !== undefined && this._uniqueQuestions) return;\n\n            this.unUsedQuestionBlocks = this.questionBlocks.slice(0);\n        },\n\n        getRandomQuestion: function() {\n            if (this.unUsedQuestionBlocks !== undefined && this.unUsedQuestionBlocks.length < 1) {\n               console.warn('assessment:'+ this._articleId +' No more unique questions for _assessment._quizBankID ' + this._id);\n               return undefined;\n            }\n\n            var index = Math.round(Math.random() * (this.unUsedQuestionBlocks.length-1));\n            var questionBlock = this.unUsedQuestionBlocks[index];\n            this.usedQuestionBlocks.push(questionBlock);\n\n            this.unUsedQuestionBlocks.splice(index, 1);\n\n            return questionBlock;\n        }\n\n    };\n\n    return QuestionBank;\n\n});\n","define('extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel',[\n    'core/js/adapt',\n    './adapt-assessmentQuestionBank'\n], function(Adapt, QuestionBank) {\n\n\n    var givenIdCount = 0;\n    var assessmentConfigDefaults = {\n        _isEnabled: true,\n        _questions: {\n            _resetType: 'soft',\n            _canShowFeedback: false,\n            _canShowMarking: false,\n            _canShowModelAnswer: false\n        },\n        _suppressMarking: false,\n        _isPercentageBased : true,\n        _scoreToPass : 100,\n        _includeInTotalScore: true,\n        _assessmentWeight: 1,\n        _isResetOnRevisit: true,\n        _reloadPageOnReset: true,\n        _attempts: 'infinite',\n        _allowResetIfPassed: false\n    };\n\n    var AssessmentModel = {\n\n    //Private functions\n\n        _postInitialize: function() {\n            if (!this.isAssessmentEnabled()) return;\n\n            var assessmentConfig = this.getConfig();\n\n            _.extend(this, {\n                _currentQuestionComponents: null,\n                _originalChildModels: null,\n                _questionBanks: null,\n                _forceResetOnRevisit: false\n            });\n\n            var attemptsLeft;\n            switch (assessmentConfig._attempts) {\n                case 'infinite': case 0: case undefined: case -1: case null:\n                     attemptsLeft = 'infinite';\n                    break;\n                default:\n                    attemptsLeft = assessmentConfig._attempts;\n                    break;\n            }\n\n            this.set({\n                _currentQuestionComponentIds: [],\n                _assessmentCompleteInSession: false,\n                _attemptInProgress: false,\n                _isAssessmentComplete: false,\n                _numberOfQuestionsAnswered: 0,\n                _lastAttemptScoreAsPercent: 0,\n                _attempts: attemptsLeft,\n                _attemptsLeft: attemptsLeft,\n                _attemptsSpent: 0\n            });\n\n            this.listenToOnce(Adapt, 'app:dataReady', this._onDataReady);\n            this.listenTo(Adapt, 'remove', this._onRemove);\n\n        },\n\n        init: function() {\n            //save original children\n            this._originalChildModels = this.getChildren().models;\n            //collect all question components\n            this._currentQuestionComponents = this.findDescendantModels('components', {where: { _isQuestionType: true }});\n            this.set('_currentQuestionComponentIds', this._currentQuestionComponents.map(function(comp) {\n                return comp.get('_id');\n            }));\n\n            this._setAssessmentOwnershipOnChildrenModels();\n\n        },\n\n        _setAssessmentOwnershipOnChildrenModels: function() {\n            //mark all children components as belonging to an assessment\n            var assessmentConfig = this.get('_assessment');\n            var childConfig = {\n                _isPartOfAssessment: true,\n                _assessmentId: assessmentConfig._id\n            };\n            for (var i = 0, l = this._originalChildModels.length; i < l; i++) {\n                var blockModel = this._originalChildModels[i];\n                blockModel.set(childConfig);\n                //make sure components are set to _isPartOfAssessment for plp checking\n                blockModel.setOnChildren(childConfig);\n            }\n        },\n\n\n        _onDataReady: function() {\n            //register assessment\n            Adapt.assessment.register(this);\n        },\n\n        _setupAssessmentData: function(force, callback) {\n            var assessmentConfig = this.getConfig();\n            var state = this.getState();\n            var shouldResetAssessment = (!this.get('_attemptInProgress') && !state.isPass) || force === true;\n            var shouldResetQuestions = (assessmentConfig._isResetOnRevisit && (state.allowResetIfPassed || !state.isPass)) || force === true;\n\n            if (shouldResetAssessment || shouldResetQuestions) {\n                Adapt.trigger('assessments:preReset', this.getState(), this);\n            }\n\n            var quizModels;\n            if (shouldResetAssessment) {\n                this.set({\n                    _numberOfQuestionsAnswered: 0,\n                    _isAssessmentComplete: false,\n                    _assessmentCompleteInSession: false,\n                    _score: 0\n                });\n                this.getChildren().models = this._originalChildModels;\n                if(assessmentConfig._banks &&\n                        assessmentConfig._banks._isEnabled &&\n                        assessmentConfig._banks._split.length > 1) {\n\n                    quizModels = this._setupBankedAssessment();\n                } else if(assessmentConfig._randomisation &&\n                        assessmentConfig._randomisation._isEnabled) {\n\n                    quizModels = this._setupRandomisedAssessment();\n                }\n            }\n\n            if (!quizModels) {\n                // leave the order as before, completed or not\n                quizModels = this.getChildren().models;\n            } else if ( quizModels.length === 0 ) {\n                quizModels = this.getChildren().models;\n                console.warn('assessment: Not enough unique questions to create a fresh assessment, using last selection');\n            }\n\n            this.getChildren().models = quizModels;\n\n            this._currentQuestionComponents = this.findDescendantModels('components', {where: { _isQuestionType: true }});\n            this.set('_currentQuestionComponentIds', this._currentQuestionComponents.map(function(comp) {\n                return comp.get('_id');\n            }));\n\n            if (shouldResetAssessment || shouldResetQuestions) {\n                this._resetQuestions(function() {\n                    this.set('_attemptInProgress', true);\n                    Adapt.trigger('assessments:reset', this.getState(), this);\n\n                    finalise.apply(this);\n                }.bind(this));\n            } else {\n                finalise.apply(this);\n            }\n\n            function finalise() {\n                if (!state.isComplete) {\n                    this.set('_attemptInProgress', true);\n                }\n\n                this._overrideQuestionComponentSettings();\n                this._setupQuestionListeners();\n                this._checkNumberOfQuestionsAnswered();\n                this._updateQuestionsState();\n\n                Adapt.assessment.saveState();\n\n                if (typeof callback == 'function') callback.apply(this);\n\n                if (shouldResetAssessment || shouldResetQuestions) {\n                    Adapt.trigger('assessments:postReset', this.getState(), this);\n                }\n            }\n        },\n\n        _setupBankedAssessment: function() {\n            var assessmentConfig = this.getConfig();\n\n            this._setupBanks();\n\n            //get random questions from banks\n            var questionModels = [];\n            for (var bankId in this._questionBanks) {\n                if(this._questionBanks.hasOwnProperty(bankId)) { // skip over properties that were added to Array.prototype by the ES5-shim for IE8\n                    var questionBank = this._questionBanks[bankId];\n                    var questions = questionBank.getRandomQuestionBlocks();\n                    questionModels = questionModels.concat(questions);\n                }\n            }\n\n            //if overall question order should be randomized\n            if (assessmentConfig._banks._randomisation) {\n                questionModels = _.shuffle(questionModels);\n            }\n\n            return questionModels;\n        },\n\n        _setupBanks: function() {\n            var assessmentConfig = this.getConfig();\n            var banks = assessmentConfig._banks._split.split(',');\n            var bankId;\n\n            this._questionBanks = [];\n\n            //build fresh banks\n            for (var i = 0, l = banks.length; i < l; i++) {\n                var bank = banks[i];\n                bankId = (i + 1);\n                var questionBank = new QuestionBank(bankId, this.get('_id'), bank, true);\n\n                this._questionBanks[bankId] = questionBank;\n            }\n\n            //add blocks to banks\n            var children = this.getChildren().models;\n            for (var j = 0, count = children.length; j < count; j++) {\n                var blockModel = children[j];\n                var blockAssessmentConfig = blockModel.get('_assessment');\n                bankId = blockAssessmentConfig._quizBankID;\n                this._questionBanks[bankId].addBlock(blockModel);\n            }\n\n        },\n\n        _setupRandomisedAssessment: function() {\n            var assessmentConfig = this.getConfig();\n\n            var randomisationModel = assessmentConfig._randomisation;\n            var blockModels = this.getChildren().models;\n\n            var questionModels = _.shuffle(blockModels);\n\n            if (randomisationModel._blockCount > 0) {\n                questionModels = questionModels.slice(0, randomisationModel._blockCount);\n            }\n\n            return questionModels;\n        },\n\n        _overrideQuestionComponentSettings: function() {\n            var newSettings = this._getMarkingSettings();\n\n            // Add any additional setting overrides here\n            var questionConfig = this.getConfig()._questions;\n            if (questionConfig.hasOwnProperty('_canShowFeedback')) {\n                newSettings._canShowFeedback = questionConfig._canShowFeedback;\n            }\n\n            if (!_.isEmpty(newSettings)) {\n                for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {\n                    this._currentQuestionComponents[i].set(newSettings, { pluginName: '_assessment' });\n                }\n            }\n        },\n\n        _setupQuestionListeners: function() {\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get('_isInteractionComplete')) continue;\n                this.listenTo(question, 'change:_isInteractionComplete', this._onQuestionCompleted);\n            }\n        },\n\n        _checkNumberOfQuestionsAnswered: function() {\n            var questionComponents = this._currentQuestionComponents;\n            var numberOfQuestionsAnswered = 0;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get('_isInteractionComplete')) {\n                    numberOfQuestionsAnswered++;\n                }\n            }\n            this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);\n        },\n\n        _removeQuestionListeners: function() {\n            var questionComponents = this._currentQuestionComponents;\n            if (!questionComponents) return;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                this.stopListening(question, 'change:_isInteractionComplete', this._onQuestionCompleted);\n            }\n        },\n\n        _onQuestionCompleted: function(questionModel, value) {\n            if (value === false) return;\n            if(!questionModel.get('_isInteractionComplete')) return;\n\n            var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');\n            numberOfQuestionsAnswered++;\n            this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);\n\n            this._updateQuestionsState();\n            Adapt.assessment.saveState();\n\n            this._checkAssessmentComplete();\n        },\n\n        _checkAssessmentComplete: function() {\n            var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');\n\n            var allQuestionsAnswered = numberOfQuestionsAnswered >= this._currentQuestionComponents.length;\n            if (!allQuestionsAnswered) return;\n\n            this._onAssessmentComplete();\n        },\n\n        _onAssessmentComplete: function() {\n            var assessmentConfig = this.getConfig();\n\n            this.set('_attemptInProgress', false);\n            this._spendAttempt();\n\n            var scoreAsPercent = this._getScoreAsPercent();\n            var score = this._getScore();\n            var maxScore = this._getMaxScore();\n\n            this.set({\n                _scoreAsPercent: scoreAsPercent,\n                _score: score,\n                _maxScore: maxScore,\n                _lastAttemptScoreAsPercent: scoreAsPercent,\n                _assessmentCompleteInSession: true,\n                _isAssessmentComplete: true\n            });\n\n            this._updateQuestionsState();\n\n            this._checkIsPass();\n\n            this._removeQuestionListeners();\n\n            if (this._isMarkingSuppressionEnabled() && !this._isAttemptsLeft()) {\n                _.defer(function() {\n                    this._overrideMarkingSettings();\n                    this._refreshQuestions();\n                }.bind(this));\n            }\n\n            Adapt.trigger('assessments:complete', this.getState(), this);\n        },\n\n        _updateQuestionsState: function() {\n            var questions = [];\n\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var questionComponent = questionComponents[i];\n\n                var questionModel = {\n                    _id: questionComponent.get('_id'),\n                    _isCorrect: questionComponent.get('_isCorrect') === undefined ? null : questionComponent.get('_isCorrect')\n                };\n\n                //build array of questions\n                questions.push(questionModel);\n\n            }\n\n            this.set('_questions', questions);\n        },\n\n        _checkIsPass: function() {\n            var assessmentConfig = this.getConfig();\n\n            var isPercentageBased = assessmentConfig._isPercentageBased;\n            var scoreToPass = assessmentConfig._scoreToPass;\n\n            var scoreAsPercent = this.get('_scoreAsPercent');\n            var score = this.get('_score');\n\n            var isPass = isPercentageBased ? (scoreAsPercent >= scoreToPass) : (score >= scoreToPass);\n\n            this.set('_isPass', isPass);\n        },\n\n        _getMarkingSettings: function() {\n            var markingSettings = {};\n\n            if (this._shouldSuppressMarking()) {\n                markingSettings = {\n                    _canShowMarking: false,\n                    _canShowModelAnswer: false\n                };\n            } else {\n                var questionConfig = this.getConfig()._questions;\n\n                if (questionConfig.hasOwnProperty('_canShowModelAnswer')) {\n                    markingSettings._canShowModelAnswer = questionConfig._canShowModelAnswer;\n                }\n\n                if (questionConfig.hasOwnProperty('_canShowMarking')) {\n                    markingSettings._canShowMarking = questionConfig._canShowMarking;\n                }\n            }\n\n            return markingSettings;\n        },\n\n        _overrideMarkingSettings: function() {\n            var newMarkingSettings = this._getMarkingSettings();\n            for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {\n                this._currentQuestionComponents[i].set(newMarkingSettings, {\n                    pluginName: '_assessment'\n                });\n            }\n        },\n\n        _refreshQuestions: function() {\n            for (var a = 0, b = this._currentQuestionComponents.length; a < b; a++) {\n                var question = this._currentQuestionComponents[a];\n                question.refresh();\n            }\n        },\n\n        _shouldSuppressMarking: function() {\n            return this._isMarkingSuppressionEnabled() && this._isAttemptsLeft();\n        },\n\n        _isMarkingSuppressionEnabled: function() {\n            var assessmentConfig = this.getConfig();\n            return assessmentConfig._suppressMarking;\n        },\n\n        _isAttemptsLeft: function() {\n            if (this.get('_isAssessmentComplete') && this.get('_isPass')) return false;\n\n            if (this.get('_attemptsLeft') === 0) return false;\n\n            return true;\n        },\n\n        _spendAttempt: function() {\n            if (!this._isAttemptsLeft()) return false;\n\n            var attemptsSpent = this.get('_attemptsSpent');\n            this.set('_attemptsSpent', ++attemptsSpent);\n\n            if (this.get('_attempts') == 'infinite') return true;\n\n            var attemptsLeft = this.get('_attemptsLeft');\n            this.set('_attemptsLeft', --attemptsLeft);\n\n            return true;\n        },\n\n        _getScore: function() {\n            var score = 0;\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get('_isCorrect') &&\n                    question.get('_questionWeight')) {\n                    score += question.get('_questionWeight');\n                }\n            }\n            return score;\n        },\n\n        _getMaxScore: function() {\n            var maxScore = 0;\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get('_questionWeight')) {\n                    maxScore += question.get('_questionWeight');\n                }\n            }\n            return maxScore;\n        },\n\n        _getScoreAsPercent: function() {\n            if (this._getMaxScore() === 0) return 0;\n            return Math.round((this._getScore() / this._getMaxScore()) * 100);\n        },\n\n        _getLastAttemptScoreAsPercent: function() {\n            return this.get('_lastAttemptScoreAsPercent');\n        },\n\n        _checkReloadPage: function() {\n            if (!this.canResetInPage()) return false;\n\n            var parentId = this.getParent().get('_id');\n            var currentLocation = Adapt.location._currentId;\n\n            //check if on assessment page and should rerender page\n            if (currentLocation != parentId) return false;\n            if (!this.get('_isReady')) return false;\n\n            return true;\n        },\n\n        _reloadPage: function() {\n            this._forceResetOnRevisit = true;\n\n            _.delay(function() {\n                Backbone.history.navigate('#/id/' + Adapt.location._currentId, { replace:true, trigger: true });\n            }, 250);\n        },\n\n        _resetQuestions: function(callback) {\n            var assessmentConfig = this.getConfig();\n            var syncIterations = 1; // number of synchronous iterations to perform\n            var i = 0, qs = this._currentQuestionComponents, len = qs.length;\n\n            function step() {\n                for (var j = 0, count=Math.min(syncIterations, len-i); j < count; i++, j++) {\n                    var question = qs[i];\n                    question.reset(assessmentConfig._questions._resetType, true);\n                }\n\n                i == len ? callback() : setTimeout(step);\n            }\n\n            step();\n        },\n\n        _onRemove: function() {\n            this._removeQuestionListeners();\n        },\n\n        _setCompletionStatus: function() {\n            this.set({\n                _isComplete: true,\n                _isInteractionComplete: true\n            });\n        },\n\n        _checkIfQuestionsWereRestored: function() {\n            if (this.get('_assessmentCompleteInSession')) return;\n            if (!this.get('_isAssessmentComplete')) return;\n\n            //fix for courses that do not remember the user selections\n            //force assessment to reset if user revisits an assessment page in a new session which is completed\n            var wereQuestionsRestored = true;\n\n            var questions = this.get('_questions');\n            for (var i = 0, l = questions.length; i < l; i++) {\n                var question = questions[i];\n                var questionModel = Adapt.findById(question._id);\n                if (!questionModel.get('_isSubmitted')) {\n                    wereQuestionsRestored = false;\n                    break;\n                }\n            }\n\n            if (!wereQuestionsRestored) {\n                this.set('_assessmentCompleteInSession', true);\n                return true;\n            }\n\n            return false;\n        },\n\n\n    //Public Functions\n\n        isAssessmentEnabled: function() {\n            if (this.get('_assessment') &&\n                this.get('_assessment')._isEnabled) return true;\n            return false;\n        },\n\n        canResetInPage: function() {\n            var assessmentConfig = this.getConfig();\n            if (assessmentConfig._reloadPageOnReset === false) return false;\n            return true;\n        },\n\n        reset: function(force, callback) {\n\n            if (this._isResetInProgress) {\n                // prevent multiple resets from executing.\n                // keep callbacks in queue for when current reset is finished\n                this.once('reset', function() {\n                    this._isResetInProgress = false;\n                    if (typeof callback == 'function') {\n                        callback(true);\n                    }\n                });\n                return;\n            }\n\n            var assessmentConfig = this.getConfig();\n\n            //check if forcing reset via page revisit or force parameter\n            force = this._forceResetOnRevisit || force === true;\n            this._forceResetOnRevisit = false;\n\n            var isPageReload = this._checkReloadPage();\n\n            //stop resetting if not complete or not allowed\n            if (this.get('_assessmentCompleteInSession') &&\n                    !assessmentConfig._isResetOnRevisit &&\n                    !isPageReload &&\n                    !force) {\n                if (typeof callback == 'function') {\n                    callback(false);\n                }\n                return false;\n            }\n\n            //check if new session and questions not restored\n            var wereQuestionsRestored = this._checkIfQuestionsWereRestored();\n            force = force || wereQuestionsRestored;\n            // the assessment is going to be reset so we must reset attempts\n            // otherwise assessment may not be set up properly in next session\n            if (force && !this._isAttemptsLeft()) {\n                this.set({\n                    _attemptsLeft: this.get('_attempts'),\n                    _attemptsSpent: 0\n                });\n            }\n\n            var allowResetIfPassed = this.get('_assessment')._allowResetIfPassed;\n            //stop resetting if no attempts left and allowResetIfPassed is false\n            if (!this._isAttemptsLeft() && !force && !allowResetIfPassed) {\n                if (typeof callback == 'function') callback(false);\n                return false;\n            }\n\n            if (!isPageReload) {\n                // only perform this section when not attempting to reload the page\n                // wait for reset to trigger\n                this.once('reset', function() {\n                    this._isResetInProgress = false;\n                    if (typeof callback == 'function') {\n                        callback(true);\n                    }\n                });\n                this._isResetInProgress = true;\n                // perform asynchronous reset\n                this._setupAssessmentData(force, function() {\n                    this.trigger('reset');\n                });\n            } else {\n                this._reloadPage();\n                if (typeof callback == 'function') {\n                    callback(true);\n                }\n            }\n\n            return true;\n        },\n\n        getSaveState: function() {\n            var state = this.getState();\n            var indexByIdQuestions = [];\n            var cfg = this.getConfig();\n            var banksActive = cfg._banks && cfg._banks._isEnabled && cfg._banks._split.length > 1;\n            var randomisationActive = cfg._randomisation && cfg._randomisation._isEnabled;\n\n            if (!banksActive && !randomisationActive) {\n                // include presentation component IDs in save state so that blocks without questions aren't removed\n                this.findDescendantModels('components').forEach(function(component) {\n                    var componentModel = {\n                        _id: component.get('_id'),\n                        _isCorrect: component.get('_isCorrect') === undefined ? null : component.get('_isCorrect')\n                    };\n\n                    indexByIdQuestions.push(componentModel);\n\n                });\n\n                indexByIdQuestions = _.indexBy(indexByIdQuestions, '_id');\n            } else {\n                indexByIdQuestions = _.indexBy(state.questions, '_id');\n            }\n\n            for (var id in indexByIdQuestions) {\n                if(indexByIdQuestions.hasOwnProperty(id)) {\n                    indexByIdQuestions[id] = indexByIdQuestions[id]._isCorrect;\n                }\n            }\n\n            var saveState = [\n                state.isComplete ? 1:0,\n                state.attemptsSpent,\n                state.maxScore,\n                state.score,\n                state.attemptInProgress ? 1:0,\n                indexByIdQuestions\n            ];\n\n            return saveState;\n        },\n\n        setRestoreState: function(restoreState) {\n            var id;\n            var isComplete = restoreState[0] == 1 ? true : false;\n            var attempts = this.get('_attempts');\n            var attemptsSpent = restoreState[1];\n            var maxScore = restoreState[2];\n            var score = restoreState[3];\n            var attemptInProgress = restoreState[4] == 1 ? true : false;\n            var scoreAsPercent;\n\n            var indexByIdQuestions = restoreState[5];\n\n            var blockIds = {};\n            for (id in indexByIdQuestions) {\n                if(indexByIdQuestions.hasOwnProperty(id)) {\n                    var blockId = Adapt.findById(id).get('_parentId');\n                    blockIds[blockId] = Adapt.findById(blockId);\n                }\n            }\n            var restoredChildrenModels = _.values(blockIds);\n\n            if (indexByIdQuestions) this.getChildren().models = restoredChildrenModels;\n\n\n            this.set({\n                _isAssessmentComplete: isComplete,\n                _assessmentCompleteInSession: false,\n                _attemptsSpent: attemptsSpent,\n                _attemptInProgress: attemptInProgress,\n                _attemptsLeft: (attempts === 'infinite' ? attempts : attempts - attemptsSpent),\n                _maxScore: maxScore || this._getMaxScore(),\n                _score: score || 0\n            });\n\n            if (score) {\n                scoreAsPercent = Math.round( score / maxScore  * 100);\n            } else {\n                scoreAsPercent = 0;\n            }\n\n            this.set({\n                _scoreAsPercent: scoreAsPercent,\n                _lastAttemptScoreAsPercent: scoreAsPercent\n            });\n\n            var questions = [];\n            for (id in indexByIdQuestions) {\n                if(indexByIdQuestions.hasOwnProperty(id) && Adapt.findById(id).get('_isQuestionType')) {\n                    questions.push({\n                        _id: id,\n                        _isCorrect: indexByIdQuestions[id]\n                    });\n                }\n            }\n\n            this.set('_questions', questions);\n\n            if (isComplete) this._checkIsPass();\n\n            Adapt.trigger('assessments:restored', this.getState(), this);\n\n        },\n\n        getState: function() {\n            //return the current state of the assessment\n            //create snapshot of values so as not to create memory leaks\n            var assessmentConfig = this.getConfig();\n\n            var state = {\n                id: assessmentConfig._id,\n                type: 'article-assessment',\n                pageId: this.getParent().get('_id'),\n                articleId: this.get('_id'),\n                isEnabled: assessmentConfig._isEnabled,\n                isComplete: this.get('_isAssessmentComplete'),\n                isPercentageBased: assessmentConfig._isPercentageBased,\n                scoreToPass: assessmentConfig._scoreToPass,\n                score: this.get('_score'),\n                scoreAsPercent: this.get('_scoreAsPercent'),\n                maxScore: this.get('_maxScore'),\n                isPass: this.get('_isPass'),\n                includeInTotalScore: assessmentConfig._includeInTotalScore,\n                assessmentWeight: assessmentConfig._assessmentWeight,\n                attempts: this.get('_attempts'),\n                attemptsSpent: this.get('_attemptsSpent'),\n                attemptsLeft: this.get('_attemptsLeft'),\n                attemptInProgress: this.get('_attemptInProgress'),\n                lastAttemptScoreAsPercent: this.get('_lastAttemptScoreAsPercent'),\n                questions: this.get('_questions'),\n                resetType: assessmentConfig._questions._resetType,\n                allowResetIfPassed: assessmentConfig._allowResetIfPassed,\n                questionModels: new Backbone.Collection(this._currentQuestionComponents)\n            };\n\n            return state;\n        },\n\n        getConfig: function() {\n            var assessmentConfig = this.get('_assessment');\n\n            if (!assessmentConfig) {\n                assessmentConfig = $.extend(true, {}, assessmentConfigDefaults);\n            } else {\n                assessmentConfig = $.extend(true, {}, assessmentConfigDefaults, assessmentConfig);\n            }\n\n            if (assessmentConfig._id === undefined) {\n                assessmentConfig._id = 'givenId'+(givenIdCount++);\n            }\n\n            this.set('_assessment', assessmentConfig);\n\n            return assessmentConfig;\n        }\n\n    };\n\n    return AssessmentModel;\n});\n\n","define('extensions/adapt-contrib-assessment/js/assessment',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    /*\n        Here we setup a registry for all assessments\n    */\n    var assessmentsConfigDefaults = {\n        _isPercentageBased: true,\n        _scoreToPass: 100,\n        _isDefaultsLoaded: true\n    };\n\n    Adapt.assessment = _.extend({\n\n    //Private functions\n\n        _assessments: _.extend([], {\n            _byPageId: {},\n            _byAssessmentId: {}\n        }),\n\n        initialize: function() {\n            this.listenTo(Adapt, {\n                'assessments:complete': this._onAssessmentsComplete,\n                'router:location': this._checkResetAssessmentsOnRevisit,\n                'router:plugin': this._handleRoute,\n                'app:dataReady': this._onDataReady\n            });\n        },\n\n        _onAssessmentsComplete: function(state) {\n            var assessmentId = state.id;\n\n            state.isComplete = true;\n\n            if (assessmentId === undefined) return;\n\n            if (!this._getStateByAssessmentId(assessmentId)) {\n                Adapt.log.warn('assessments: state was not registered when assessment was created');\n            }\n\n            this.saveState();\n\n            this._setPageProgress();\n\n            this._checkAssessmentsComplete();\n\n        },\n\n        _restoreModelState: function(assessmentModel) {\n\n            if (!this._saveStateModel) {\n                this._saveStateModel = Adapt.offlineStorage.get('assessment');\n            }\n            if (this._saveStateModel) {\n                var state = assessmentModel.getState();\n                if (this._saveStateModel[state.id]) {\n                    assessmentModel.setRestoreState(this._saveStateModel[state.id]);\n                }\n            }\n\n        },\n\n        /**\n         * Allow navigating to an assessment via the URL.\n         */\n        _handleRoute: function(plugin, id) {\n            if (plugin !== 'assessment' && plugin !== 'article-assessment' || id === undefined) {\n                return;\n            }\n\n            // Check the 'id' passed is that of an article.\n            if (!Adapt.findById(id)) {\n                // The 'id' passed may have been the assessment _id/name, not the article _id.\n                var assessment = Adapt.assessment._assessments._byAssessmentId[id];\n                if (assessment) {\n                    // Set 'id' to the article _id.\n                    id = assessment.get('_id');\n                } else {\n                    Adapt.log.warn('Assessment not found with _id: ' + id);\n                    return;\n                }\n            }\n\n            _.defer(function() {\n                // Defer this call so that the router's _canNavigate flag is true.\n                Backbone.history.navigate('#/id/' + id, { trigger: true, replace: true });\n            });\n        },\n\n        _checkResetAssessmentsOnRevisit: function(toObject) {\n            /*\n                Here we hijack router:location to reorganise the assessment blocks\n                this must happen before trickle listens to block completion\n            */\n            if (toObject._contentType !== 'page') return;\n\n            //initialize assessment on page visit before pageView:preRender (and trickle)\n            var pageAssessmentModels = this._getAssessmentByPageId(toObject._currentId);\n            if (pageAssessmentModels === undefined) return;\n\n            /*\n                Here we further hijack the router to ensure the asynchronous assessment\n                reset completes before routing completes\n            */\n            Adapt.wait.for(function resetAllAssessments(allAssessmentHaveReset) {\n\n                var numberOfAssessments = pageAssessmentModels.length;\n                var numberOfResetAssessments = 0;\n                var forceAssessmentReset = false;\n\n                pageAssessmentModels.forEach(function(model) {\n\n                    model.reset(forceAssessmentReset, function() {\n\n                        numberOfResetAssessments++;\n                        var haveAllModelsReset = (numberOfResetAssessments === numberOfAssessments);\n                        if (!haveAllModelsReset) {\n                            return;\n                        }\n\n                        allAssessmentHaveReset();\n\n                    });\n\n                });\n\n            });\n\n            this._setPageProgress();\n        },\n\n        _onDataReady: function() {\n            this._assessments = _.extend([], {\n                _byPageId: {},\n                _byAssessmentId: {}\n            });\n        },\n\n        _checkAssessmentsComplete: function() {\n            var allAssessmentsComplete = true;\n            var assessmentToPostBack = 0;\n            var states = this._getStatesByAssessmentId();\n\n            var assessmentStates = [];\n\n            for (var id in states) {\n                var state = states[id];\n                if (!state.includeInTotalScore) continue;\n                if (!state.isComplete) {\n                    allAssessmentsComplete = false;\n                    break;\n                }\n                assessmentToPostBack++;\n                assessmentStates.push(state);\n            }\n\n            if (!allAssessmentsComplete || assessmentToPostBack === 0) return false;\n\n            if (assessmentToPostBack === 1) {\n                this._setupSingleAssessmentConfiguration(assessmentStates[0]);\n            }\n\n            _.defer(function() {\n                Adapt.trigger('assessment:complete', this.getState());\n            }.bind(this));\n\n            return true;\n        },\n\n        _setupSingleAssessmentConfiguration: function(assessmentState) {\n            var assessmentsConfig = Adapt.course.get('_assessment');\n            $.extend(true, assessmentsConfig, {\n                _isPercentageBased: assessmentState.isPercentageBased,\n                _scoreToPass: assessmentState.scoreToPass\n            });\n            Adapt.course.set('_assessment', assessmentsConfig);\n        },\n\n        _getAssessmentByPageId: function(pageId) {\n            return this._assessments._byPageId[pageId];\n        },\n\n        _getStateByAssessmentId: function(assessmentId) {\n            if (assessmentId === undefined) {\n                return null;\n            }\n\n            return this._assessments._byAssessmentId[assessmentId].getState();\n        },\n\n        _getStatesByAssessmentId: function() {\n            var states = {};\n            for (var i = 0, l = this._assessments.length; i < l; i++) {\n                var assessmentModel = this._assessments[i];\n                var state = assessmentModel.getState();\n                states[state.id] = state;\n            }\n            return states;\n        },\n\n        _setPageProgress: function() {\n            //set _subProgressTotal and _subProgressComplete on pages that have assessment progress indicator requirements\n\n            for (var k in this._assessments._byPageId) {\n\n                var assessments = this._assessments._byPageId[k];\n\n                var assessmentsTotal = assessments.length;\n                var assessmentsPassed = 0;\n\n                for (var i = 0, l = assessments.length; i < l; i++) {\n                    var assessmentState = assessments[i].getState();\n\n                    if (assessmentState.includeInTotalScore && !assessmentState.isPass) continue;\n\n                    if (assessmentState.isComplete) {\n                        assessmentsPassed++;\n                    }\n                }\n\n                try {\n                    var pageModel = Adapt.findById(k);\n                    pageModel.set({\n                        _subProgressTotal: assessmentsTotal,\n                        _subProgressComplete: assessmentsPassed\n                    });\n                } catch(e) {\n\n                }\n\n            }\n        },\n\n        _addToAssessmentIdMap: function(id, model) {\n            if (id === undefined) {\n                Adapt.log.warn('An assessment has been registered with an undefined value for \"_id\"');\n                return;\n            }\n\n            if (id === '') {\n                Adapt.log.warn('An assessment has been registered with an empty value for \"_id\"');\n            }\n\n            if (!this._assessments._byAssessmentId[id]) {\n                this._assessments._byAssessmentId[id] = model;\n            } else {\n                Adapt.log.warn('An assessment with an _id of \"' + id + '\" already exists!');\n            }\n        },\n\n        _setupQuestionNumbering: function() {\n            var getRelatedQuestions = function(data) {\n                var currentAssessmentId = data._assessmentId;\n                var currentAssessment =  Adapt.assessment.get(currentAssessmentId);\n                return currentAssessment.getState().questionModels;\n            };\n\n            Handlebars.registerHelper('questionNumber', function getQuestionNumber() {\n                var data = this.view ? this.view.model.toJSON() : this;\n                if (!data._isPartOfAssessment) return;\n\n                var related = getRelatedQuestions(data).pluck('_id');\n\n                return related.indexOf(data._id) + 1;\n            });\n\n            Handlebars.registerHelper('questionCount', function getTotalQuestions() {\n                var data = this.view ? this.view.model.toJSON() : this;\n                if (!data._isPartOfAssessment) return;\n                return getRelatedQuestions(data).length;\n            });\n        },\n\n    //Public functions\n\n        register: function(assessmentModel) {\n            var state = assessmentModel.getState();\n            var assessmentId = state.id;\n            var pageId = state.pageId;\n\n            if (this._assessments._byPageId[pageId] === undefined) {\n                this._assessments._byPageId[pageId] = [];\n            }\n\n            this._assessments._byPageId[pageId].push(assessmentModel);\n\n            this._addToAssessmentIdMap(assessmentId, assessmentModel);\n\n            this._assessments.push(assessmentModel);\n\n            this._restoreModelState(assessmentModel);\n\n            Adapt.trigger('assessments:register', state, assessmentModel);\n\n            this._setPageProgress();\n\n            this._setupQuestionNumbering();\n        },\n\n        get: function(id) {\n            if (id === undefined) {\n                return this._assessments.slice(0);\n            } else {\n                return this._assessments._byAssessmentId[id];\n            }\n        },\n\n        saveState: function() {\n\n            this._saveStateModel = {};\n            for (var i = 0, assessmentModel; assessmentModel = this._assessments[i++];) {\n                var state = assessmentModel.getState();\n                this._saveStateModel[state.id] = assessmentModel.getSaveState();\n            }\n\n            Adapt.offlineStorage.set('assessment', this._saveStateModel);\n        },\n\n        getConfig: function () {\n            var assessmentsConfig = Adapt.course.get('_assessment');\n\n            if (assessmentsConfig && assessmentsConfig._isDefaultsLoaded) {\n                return assessmentsConfig;\n            }\n\n            if (assessmentsConfig === undefined) {\n                assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults);\n            } else {\n                assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults, assessmentsConfig);\n            }\n\n            Adapt.course.set('_assessment', assessmentsConfig);\n\n            return assessmentsConfig;\n        },\n\n        getState: function() {\n            var assessmentsConfig = this.getConfig();\n\n            var score = 0;\n            var maxScore = 0;\n            var isPass = false;\n            var totalAssessments = 0;\n\n            var states = this._getStatesByAssessmentId();\n\n            var assessmentsComplete = 0;\n\n            for (var id in states) {\n                var state = states[id];\n                if (!state.includeInTotalScore) continue;\n                if (state.isComplete) assessmentsComplete++;\n                totalAssessments++;\n                maxScore += state.maxScore / state.assessmentWeight;\n                score += state.score / state.assessmentWeight;\n            }\n\n            var isComplete = assessmentsComplete == totalAssessments;\n\n            var scoreAsPercent = Math.round((score / maxScore) * 100);\n\n            if ((assessmentsConfig._scoreToPass || 100) && isComplete) {\n                if (assessmentsConfig._isPercentageBased !== false) {\n                    if (scoreAsPercent >= assessmentsConfig._scoreToPass) isPass = true;\n                } else {\n                    if (score >= assessmentsConfig._scoreToPass) isPass = true;\n                }\n            }\n\n            return {\n                isComplete: isComplete,\n                isPercentageBased: assessmentsConfig._isPercentageBased,\n                isPass: isPass,\n                scoreAsPercent: scoreAsPercent,\n                maxScore: maxScore,\n                score: score,\n                scoreToPass: assessmentsConfig._scoreToPass,\n                assessmentsComplete: assessmentsComplete,\n                assessments: totalAssessments\n            };\n        }\n\n    }, Backbone.Events);\n\n    Adapt.assessment.initialize();\n\n});\n\n","define('extensions/adapt-contrib-assessment/js/adapt-assessmentArticleExtension',[\n    'core/js/views/articleView',\n    'core/js/models/articleModel',\n    './adapt-assessmentArticleView',\n    './adapt-assessmentArticleModel',\n    './assessment'\n], function(ArticleView, ArticleModel, AdaptAssessmentArticleView, AdaptAssessmentArticleModel) {\n\n    /*\n        Here we are extending the articleView and articleModel in Adapt.\n        This is to accomodate the assessment functionality on the article.\n        The advantage of this method is that the assessment behaviour can utilize all of the predefined article behaviour in both the view and the model.\n    */\n\n    //Extends core/js/views/articleView.js\n    var ArticleViewInitialize = ArticleView.prototype.initialize;\n    ArticleView.prototype.initialize = function(options) {\n        if (this.model.get('_assessment') && this.model.get('_assessment')._isEnabled === true) {\n            //extend the articleView with new functionality\n            _.extend(this, AdaptAssessmentArticleView);\n        }\n        //initialize the article in the normal manner\n        return ArticleViewInitialize.apply(this, arguments);\n    };\n\n    //Extends core/js/models/articleModel.js\n    var ArticleModelInitialize = ArticleModel.prototype.initialize;\n    ArticleModel.prototype.initialize = function(options) {\n        if (this.get('_assessment') && this.get('_assessment')._isEnabled === true) {\n            //extend the articleModel with new functionality\n            _.extend(this, AdaptAssessmentArticleModel);\n\n            //initialize the article in the normal manner\n            var returnValue = ArticleModelInitialize.apply(this, arguments);\n\n            //initialize assessment article\n            this._postInitialize();\n\n            return returnValue;\n        }\n\n        //initialize the article in the normal manner if no assessment\n        return ArticleModelInitialize.apply(this, arguments);\n    };\n\n});\n\n","define('extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var Bookmarking = Backbone.Controller.extend({\n\n        bookmarkLevel: null,\n        watchViewIds: null,\n        watchViews: [],\n        restoredLocationID: null,\n        currentLocationID: null,\n\n        initialize: function () {\n            this.listenToOnce(Adapt, \"router:location\", this.onAdaptInitialize);\n        },\n\n        onAdaptInitialize: function() {\n            if (!this.checkIsEnabled()) return;\n            this.setupEventListeners();\n            this.checkRestoreLocation();\n        },\n\n        checkIsEnabled: function() {\n            var courseBookmarkModel = Adapt.course.get('_bookmarking');\n            if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;\n            if (!Adapt.offlineStorage) return false;\n            return true;\n        },\n\n        setupEventListeners: function() {\n            this._onScroll = _.debounce(_.bind(this.checkLocation, this), 1000);\n            this.listenTo(Adapt, 'menuView:ready', this.setupMenu);\n            this.listenTo(Adapt, 'pageView:preRender', this.setupPage);\n        },\n\n        checkRestoreLocation: function() {\n            this.restoredLocationID = Adapt.offlineStorage.get(\"location\");\n\n            if (!this.restoredLocationID || this.restoredLocationID === \"undefined\") return;\n\n            this.listenToOnce(Adapt, \"pageView:ready menuView:ready\", this.restoreLocation);\n        },\n\n        restoreLocation: function() {\n            _.defer(_.bind(function() {\n                this.stopListening(Adapt, \"pageView:ready menuView:ready\", this.restoreLocation);\n\n                if (this.restoredLocationID == Adapt.location._currentId) return;\n\n                try {\n                    var model = Adapt.findById(this.restoredLocationID);\n                } catch (error) {\n                    return;\n                }\n                \n                if (!model) return;\n\n                var locationOnscreen = $(\".\" + this.restoredLocationID).onscreen();\n                var isLocationOnscreen = locationOnscreen && (locationOnscreen.percentInview > 0);\n                var isLocationFullyInview = locationOnscreen && (locationOnscreen.percentInview === 100);\n                if (isLocationOnscreen && isLocationFullyInview) return;\n\n                if(Adapt.course.get('_bookmarking')._showPrompt === false) {\n                    this.navigateToPrevious();\n                } else {\n                    this.showPrompt();\n                }\n            }, this));\n        },\n\n        showPrompt: function() {\n            var courseBookmarkModel = Adapt.course.get('_bookmarking');\n            if (!courseBookmarkModel._buttons) {\n                courseBookmarkModel._buttons = {\n                    yes: \"Yes\",\n                    no: \"No\"\n                };\n            }\n            if (!courseBookmarkModel._buttons.yes) courseBookmarkModel._buttons.yes = \"Yes\";\n            if (!courseBookmarkModel._buttons.no) courseBookmarkModel._buttons.no = \"No\";\n\n\n            this.listenToOnce(Adapt, \"bookmarking:continue\", this.navigateToPrevious);\n            this.listenToOnce(Adapt, \"bookmarking:cancel\", this.navigateCancel);\n\n            var promptObject = {\n                title: courseBookmarkModel.title,\n                body: courseBookmarkModel.body,\n                _prompts:[\n                    {\n                        promptText: courseBookmarkModel._buttons.yes,\n                        _callbackEvent: \"bookmarking:continue\"\n                    },\n                    {\n                        promptText: courseBookmarkModel._buttons.no,\n                        _callbackEvent: \"bookmarking:cancel\"\n                    }\n                ],\n                _showIcon: true\n            };\n\n            if (Adapt.config.get(\"_accessibility\") && Adapt.config.get(\"_accessibility\")._isActive) {\n                $(\".loading\").show();\n                $(\"#a11y-focuser\").focus();\n                $(\"body\").attr(\"aria-hidden\", true);\n                _.delay(function() {\n                    $(\".loading\").hide();\n                    $(\"body\").removeAttr(\"aria-hidden\");\n                    Adapt.trigger('notify:prompt', promptObject);\n                }, 3000);\n            } else {\n                Adapt.trigger('notify:prompt', promptObject);\n            }\n        },\n\n        navigateToPrevious: function() {\n            _.defer(_.bind(function() {\n                var isSinglePage = Adapt.contentObjects.models.length == 1; \n                Backbone.history.navigate('#/id/' + this.restoredLocationID, {trigger: true, replace: isSinglePage});\n            }, this));\n            \n            this.stopListening(Adapt, \"bookmarking:cancel\");\n        },\n\n        navigateCancel: function() {\n            this.stopListening(Adapt, \"bookmarking:continue\");\n        },\n\n        resetLocationID: function () {\n            this.setLocationID('');\n        },\n\n        setupMenu: function(menuView) {\n            var menuModel = menuView.model;\n            //set location as menu id unless menu is course, then reset location\n            if (menuModel.get(\"_parentId\")) return this.setLocationID(menuModel.get(\"_id\"));\n            else this.resetLocationID();\n        },\n        \n        setupPage: function (pageView) {\n            var hasPageBookmarkObject = pageView.model.has('_bookmarking');\n            var bookmarkModel = (hasPageBookmarkObject) ? pageView.model.get('_bookmarking') : Adapt.course.get('_bookmarking');\n            this.bookmarkLevel = bookmarkModel._level;\n\n            if (!bookmarkModel._isEnabled) {\n                this.resetLocationID();\n                return;\n            } else {\n                //set location as page id\n                this.setLocationID(pageView.model.get('_id'));\n\n                this.watchViewIds = _.map(pageView.model.findDescendantModels(this.bookmarkLevel+\"s\"), function(desc) {\n                    return desc.get(\"_id\");\n                });\n                this.listenTo(Adapt, this.bookmarkLevel + \"View:postRender\", this.captureViews);\n                this.listenToOnce(Adapt, \"remove\", this.releaseViews);\n                $(window).on(\"scroll\", this._onScroll);\n            }\n        },\n\n        captureViews: function (view) {\n            this.watchViews.push(view);\n        },\n\n        setLocationID: function (id) {\n            if (!Adapt.offlineStorage) return;\n            if (this.currentLocationID == id) return;\n            Adapt.offlineStorage.set(\"location\", id);\n            this.currentLocationID = id;\n        },\n\n        releaseViews: function () {\n            this.watchViews.length = 0;\n            this.watchViewIds.length = 0;\n            this.stopListening(Adapt, 'remove', this.releaseViews);\n            this.stopListening(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);\n            $(window).off(\"scroll\", this._onScroll);\n        },\n\n        checkLocation: function() {\n            var highestOnscreen = 0;\n            var highestOnscreenLocation = \"\";\n\n            var locationObjects = [];\n            for (var i = 0, l = this.watchViews.length; i < l; i++) {\n                var view = this.watchViews[i];\n\n                var isViewAPageChild = (_.indexOf(this.watchViewIds, view.model.get(\"_id\")) > -1 );\n\n                if ( !isViewAPageChild ) continue;\n\n                var element = $(\".\" + view.model.get(\"_id\"));\n                var measurements = element.onscreen();\n                \n                if (!measurements.onscreen) continue;\n                if (measurements.percentInview > highestOnscreen) {\n                    highestOnscreen = measurements.percentInview;\n                    highestOnscreenLocation = view.model.get(\"_id\");\n                }\n            }\n\n            //set location as most inview component\n            if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);\n        }\n\n    });\n\n    return new Bookmarking();\n\n});\n\n","define('extensions/adapt-contrib-languagePicker/js/languagePickerNavigationView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NavigationView = Backbone.View.extend({\n\n        className: 'navigation',\n\n        attributes: {\n            role: 'navigation'\n        },\n\n        initialize: function() {\n            this.template = 'languagePickerNavigation';\n            this.setupHelpers();\n            this.preRender();\n        },\n\n        preRender: function() {\n            Adapt.trigger('navigationView:preRender', this);\n            this.render();\n        },\n\n        render: function() {\n            var template = Handlebars.templates[this.template];\n            this.$el.html(template({\n                _config: this.model.get('_accessibility'),\n                _accessibility: Adapt.config.get('_accessibility')\n            })).insertBefore('#app');\n\n            _.defer(function() {\n                Adapt.trigger('navigationView:postRender', this);\n            }.bind(this));\n\n            return this;\n        },\n\n        setupHelpers: function() {\n            Handlebars.registerHelper('a11y_aria_label', function(text) {\n                return '<div class=\"aria-label\">'+text+'</div>';\n            });\n        }\n\n    });\n\n    return NavigationView;\n\n});\n","define('extensions/adapt-contrib-languagePicker/js/languagePickerView',[\n    'core/js/adapt',\n    './languagePickerNavigationView'\n], function(Adapt, NavigationView) {\n\n    var LanguagePickerView = Backbone.View.extend({\n\n        events: {\n            'click .languagepicker-languages button': 'onLanguageClick'\n        },\n\n        className: 'languagepicker',\n\n        initialize: function () {\n            this.initializeNavigation();\n            $('html').addClass('in-languagepicker');\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n            this.$el.addClass(data._classes);\n\n            document.title = this.model.get('title') || \"\";\n\n            _.defer(this.postRender.bind(this));\n        },\n\n        postRender: function () {\n            $('.loading').hide();\n        },\n\n        onLanguageClick: function (event) {\n            this.destroyNavigation();\n            this.model.setLanguage($(event.target).val());\n        },\n\n        initializeNavigation: function() {\n            this.navigationView = new NavigationView({model:this.model});\n        },\n\n        destroyNavigation: function() {\n            this.navigationView.remove();\n        },\n\n        remove: function() {\n            $('html').removeClass('in-languagepicker');\n\n            Backbone.View.prototype.remove.apply(this, arguments);\n        }\n\n    }, {\n        template: 'languagePickerView'\n    });\n\n    return LanguagePickerView;\n\n});\n\n","define('extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var LanguagePickerDrawerView = Backbone.View.extend({\n\n        events: {\n            'click button': 'onButtonClick'\n        },\n\n        initialize: function () {\n            this.listenTo(Adapt, {\n                remove: this.remove,\n                'languagepicker:changelanguage:yes': this.onDoChangeLanguage,\n                'languagepicker:changelanguage:no': this.onDontChangeLanguage\n            });\n            this.render();\n        },\n\n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n        },\n\n        onButtonClick: function (event) {\n            var newLanguage = $(event.target).attr('data-language');\n            this.model.set('newLanguage', newLanguage);\n            var data = this.model.getLanguageDetails(newLanguage);\n\n            var promptObject = {\n                _classes: 'dir-ltr',\n                title: data.warningTitle,\n                body: data.warningMessage,\n                _prompts:[\n                    {\n                        promptText: data._buttons.yes,\n                        _callbackEvent: 'languagepicker:changelanguage:yes'\n                    },\n                    {\n                        promptText: data._buttons.no,\n                        _callbackEvent: 'languagepicker:changelanguage:no'\n                    }\n                ],\n                _showIcon: true\n            };\n\n            if (data._direction === 'rtl') {\n                promptObject._classes = 'dir-rtl';\n            }\n\n            //keep active element incase the user cancels - usually navigation bar icon\n            this.$finishFocus = $.a11y.state.focusStack.pop();\n            //move drawer close focus to #focuser\n            $.a11y.state.focusStack.push($('#focuser'));\n\n            Adapt.once('drawer:closed', function() {\n                //wait for drawer to fully close\n                _.delay(function(){\n                    //show yes/no popup\n                    Adapt.once('popup:opened', function() {\n                        //move popup close focus to #focuser\n                        $.a11y.state.focusStack.pop();\n                        $.a11y.state.focusStack.push($('#focuser'));\n                    });\n\n                    Adapt.trigger('notify:prompt', promptObject);\n                }, 250);\n            });\n\n            Adapt.trigger('drawer:closeDrawer');\n        },\n\n        onDoChangeLanguage: function () {\n            // set default language\n            var newLanguage = this.model.get('newLanguage');\n            this.model.setTrackedData();\n            this.model.setLanguage(newLanguage);\n            this.remove();\n        },\n\n        onDontChangeLanguage: function () {\n            this.remove();\n\n            //wait for notify to close fully\n            _.delay(function(){\n                //focus on navigation bar icon\n                this.$finishFocus.a11y_focus();\n            }.bind(this), 500);\n\n        }\n\n    }, {\n        template: 'languagePickerDrawerView'\n    });\n\n    return LanguagePickerDrawerView;\n\n});\n\n","define('extensions/adapt-contrib-languagePicker/js/languagePickerNavView',[\n    'core/js/adapt',\n    './languagePickerDrawerView'\n], function(Adapt, LanguagePickerDrawerView) {\n\n    var LanguagePickerNavView = Backbone.View.extend({\n\n        tagName: 'button',\n\n        className: function () {\n            var classNames = 'languagepicker-icon base icon';\n            var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';\n\n            return classNames + ' ' + customClass;\n        },\n\n        events: {\n            'click': 'onClick'\n        },\n\n        initialize: function () {\n            this.listenTo(Adapt, 'remove', this.remove);\n        },\n\n        onClick: function (event) {\n            Adapt.drawer.triggerCustomView(new LanguagePickerDrawerView({model: this.model}).$el, false);\n        }\n\n    });\n\n    return LanguagePickerNavView;\n\n});\n\n","define('extensions/adapt-contrib-languagePicker/js/languagePickerModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var LanguagePickerModel = Backbone.Model.extend({\n\n        defaults: {\n            _isEnabled: false,\n            displayTitle: '',\n            body: '',\n            _languages: []\n        },\n\n        trackedData: {\n            components: [],\n            blocks: []\n        },\n\n        locationId: null,\n\n        initialize: function () {\n            this.listenTo(Adapt.config, 'change:_activeLanguage', this.markLanguageAsSelected);\n            this.listenTo(Adapt, 'app:dataLoaded', this.onDataLoaded);\n        },\n\n        getLanguageDetails: function (language) {\n            var _languages = this.get('_languages');\n            return _.find(_languages, function (item) {\n                return (item._language === language);\n            });\n        },\n\n        setLanguage: function (language) {\n            Adapt.config.set({\n                '_activeLanguage': language,\n                '_defaultDirection': this.getLanguageDetails(language)._direction\n            });\n        },\n\n        markLanguageAsSelected: function(model, language) {\n            this.get('_languages').forEach(function(item){\n                item._isSelected = (item._language === language);\n            });\n        },\n\n       onDataLoaded: function() {\n            if (!this.get('_restoreStateOnLanguageChange')) {\n                return;\n            }\n            _.defer(function() {\n                this.locationId = Adapt.offlineStorage.get('location') || null;\n                this.restoreState();\n            }.bind(this));\n\n        },\n\n        restoreLocation: function() {\n            if (!Adapt.mapById(this.locationId)) return;\n            _.defer(Adapt.navigateToElement, '.' + this.locationId);\n        },\n\n        /**\n         * Restore course progress on language change.\n         */\n        restoreState: function() {\n\n            if (this.isTrackedDataEmpty()) return;\n\n            if (this.trackedData.components) {\n                this.trackedData.components.forEach(this.setTrackableState);\n            }\n\n            if (this.trackedData.blocks) {\n                this.trackedData.blocks.forEach(this.setTrackableState);\n            }\n        },\n\n        isTrackedDataEmpty: function() {\n            return _.isEqual(this.trackedData, {\n                components: [],\n                blocks: []\n            });\n        },\n\n        getTrackableState: function() {\n            var components = this.getState(Adapt.components.models);\n            var blocks = this.getState(Adapt.blocks.models);\n            return {\n                components: _.compact(components),\n                blocks: _.compact(blocks)\n            };\n        },\n\n        getState: function(models) {\n            return models.map(function(model) {\n                if (model.get('_isComplete')) {\n                    return model.getTrackableState();\n                }\n            });\n        },\n\n        setTrackedData: function() {\n            if (this.get('_restoreStateOnLanguageChange')) {\n                this.listenToOnce(Adapt, 'menuView:ready', this.restoreLocation);\n                this.trackedData = this.getTrackableState();\n            }\n        },\n\n        setTrackableState: function(stateObject) {\n            var restoreModel = Adapt.findById(stateObject._id);\n\n            if (restoreModel) {\n                restoreModel.setTrackableState(stateObject);\n            } else {\n                Adapt.log.warn('LanguagePicker unable to restore state for: ' + stateObject._id);\n            }\n        }\n\n    });\n\n    return LanguagePickerModel;\n\n});\n\n","define('extensions/adapt-contrib-languagePicker/js/adapt-languagePicker',[\n    'core/js/adapt',\n    './languagePickerView',\n    './languagePickerNavView',\n    './languagePickerModel'\n], function(Adapt, LanguagePickerView, LanguagePickerNavView, LanguagePickerModel) {\n\n    var languagePickerModel;\n\n    Adapt.once('configModel:dataLoaded', onConfigLoaded);\n\n    /**\n     * Once the Adapt config has loaded, check to see if the language picker is enabled. If it is:\n     * - stop the rest of the .json from loading\n     * - set up the language picker model\n     * - register for events to allow us to display the language picker icon in the navbar on pages and menus\n     * - wait for offline storage to be ready so that we can check to see if there's a stored language choice or not\n     */\n    function onConfigLoaded() {\n        if (!Adapt.config.has('_languagePicker')) return;\n        if (!Adapt.config.get('_languagePicker')._isEnabled) return;\n\n        Adapt.config.set('_canLoadData', false);\n\n        languagePickerModel = new LanguagePickerModel(Adapt.config.get('_languagePicker'));\n\n        Adapt.on('router:menu router:page', setupNavigationView);\n\n        if(Adapt.offlineStorage.ready) {// on the offchance that it may already be ready...\n            onOfflineStorageReady();\n        } else {\n            Adapt.once('offlineStorage:ready', onOfflineStorageReady);\n        }\n    }\n\n    /**\n     * Once offline storage is ready, check to see if a language was previously selected by the user\n     * If it was, load it. If it wasn't, show the language picker\n     */\n    function onOfflineStorageReady() {\n        var storedLanguage = Adapt.offlineStorage.get('lang');\n\n        if (storedLanguage) {\n            languagePickerModel.setLanguage(storedLanguage);\n        } else if (languagePickerModel.get('_showOnCourseLoad') === false) {\n            languagePickerModel.setLanguage(Adapt.config.get('_defaultLanguage'));\n        } else {\n            showLanguagePickerView();\n        }\n    }\n\n    function showLanguagePickerView () {\n        var languagePickerView = new LanguagePickerView({\n            model: languagePickerModel\n        });\n\n        languagePickerView.$el.appendTo('#wrapper');\n    }\n\n    function setupNavigationView () {\n        /*\n         * On the framework this isn't an issue, but courses built in the authoring tool before the ARIA label\n         * was added will break unless the extension is removed then added again.\n         */\n        var courseGlobals = Adapt.course.get('_globals')._extensions;\n        var navigationBarLabel = '';\n        if (courseGlobals._languagePicker) {\n            navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;\n        }\n\n        var languagePickerNavView = new LanguagePickerNavView({\n            model: languagePickerModel,\n            attributes:  {\n                'aria-label': navigationBarLabel\n            }\n        });\n\n        languagePickerNavView.$el.appendTo('.navigation-inner');\n    }\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/completionCalculations',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var Completion = Backbone.Controller.extend({\n\n        subProgressCompleted: 0,\n        subProgressTotal: 0,\n        nonAssessmentCompleted: 0,\n        nonAssessmentTotal: 0,\n        assessmentCompleted: 0,\n        assessmentTotal: 0\n\n    });\n\n    // Calculate completion of a contentObject\n    function calculateCompletion(contentObjectModel) {\n\n        var completion = new Completion();\n\n        var viewType = contentObjectModel.get('_type');\n        var isComplete = contentObjectModel.get('_isComplete') ? 1 : 0;\n        var children;\n\n        switch (viewType) {\n            case 'page':\n                // If it's a page\n                children = contentObjectModel.findDescendantModels('components', {\n                    where: {\n                        _isAvailable: true,\n                        _isOptional: false\n                    }\n                });\n\n                var availableChildren = filterAvailableChildren(children);\n                var components = getPageLevelProgressEnabledModels(availableChildren);\n\n                var nonAssessmentComponents = getNonAssessmentComponents(components);\n\n                completion.nonAssessmentTotal = nonAssessmentComponents.length;\n                completion.nonAssessmentCompleted = getComponentsCompleted(nonAssessmentComponents).length;\n\n                var assessmentComponents = getAssessmentComponents(components);\n\n                completion.assessmentTotal = assessmentComponents.length;\n                completion.assessmentCompleted = getComponentsInteractionCompleted(assessmentComponents).length;\n\n                if (!contentObjectModel.get('_pageLevelProgress')._excludeAssessments) {\n                    completion.subProgressCompleted = contentObjectModel.get('_subProgressComplete') || 0;\n                    completion.subProgressTotal = contentObjectModel.get('_subProgressTotal') || 0;\n                }\n\n                var showPageCompletionCourse = Adapt.course.get('_pageLevelProgress') && Adapt.course.get('_pageLevelProgress')._showPageCompletion !== false;\n                var showPageCompletionPage = contentObjectModel.get('_pageLevelProgress') && contentObjectModel.get('_pageLevelProgress')._showPageCompletion !== false;\n\n                if (showPageCompletionCourse && showPageCompletionPage) {\n                    // optionally add one point extra for page completion to eliminate incomplete pages and full progress bars\n                    // if _showPageCompletion is true then the progress bar should also consider it so add 1 to nonAssessmentTotal\n                    completion.nonAssessmentCompleted += isComplete;\n                    completion.nonAssessmentTotal += 1;\n                }\n\n                break;\n            case 'menu':\n                // If it's a sub-menu\n                children = contentObjectModel.get('_children').models;\n                children.forEach(function(contentObject) {\n                    var completionObject = calculateCompletion(contentObject);\n                    completion.subProgressCompleted += contentObjectModel.subProgressCompleted || 0;\n                    completion.subProgressTotal += contentObjectModel.subProgressTotal || 0;\n                    completion.nonAssessmentTotal += completionObject.nonAssessmentTotal;\n                    completion.nonAssessmentCompleted += completionObject.nonAssessmentCompleted;\n                    completion.assessmentTotal += completionObject.assessmentTotal;\n                    completion.assessmentCompleted += completionObject.assessmentCompleted;\n                });\n                break;\n\n        }\n\n        return completion;\n    }\n\n    function getNonAssessmentComponents(models) {\n        return models.filter(function(model) {\n            return !model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getAssessmentComponents(models) {\n        return models.filter(function(model) {\n            return model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getComponentsCompleted(models) {\n        return models.filter(function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    function getComponentsInteractionCompleted(models) {\n        return models.filter(function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    //Get only those models who were enabled for pageLevelProgress\n    function getPageLevelProgressEnabledModels(models) {\n        return models.filter(function(model) {\n            var config = model.get('_pageLevelProgress');\n            return config && config._isEnabled;\n        });\n    }\n\n    function unavailableInHierarchy(parents) {\n        if (!parents) return;\n        return parents.some(function(parent) {\n            return !parent.get('_isAvailable');\n        });\n    }\n\n    function filterAvailableChildren(children) {\n        var availableChildren = [];\n\n        for (var i = 0, count = children.length; i < count; i++) {\n            var parents = children[i].getAncestorModels();\n            if (unavailableInHierarchy(parents)) continue;\n            availableChildren.push(children[i]);\n        }\n\n        return availableChildren;\n    }\n\n    function calculatePercentageComplete(model) {\n        var completionObject = calculateCompletion(model);\n        // take all assessment, nonassessment and subprogress into percentage\n        // this allows the user to see if assessments have been passed, if assessment components can be retaken, and all other component's completion\n        var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;\n        var total  = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;\n        var percentageComplete = Math.floor((completed / total)*100);\n        return percentageComplete;\n    }\n\n    return {\n        calculateCompletion: calculateCompletion,\n        calculatePercentageComplete: calculatePercentageComplete,\n        getPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,\n        filterAvailableChildren: filterAvailableChildren\n    };\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var PageLevelProgressIndicatorView = Backbone.View.extend({\n\n        initialize: function(options) {\n            options = options || {};\n            this.calculatePercentage = options.calculatePercentage || this.calculatePercentage;\n            this.ariaLabel = options.ariaLabel || '';\n            this.type = options.type || this.model.get('_type');\n            this.addClasses();\n            this.checkAria();\n            this.setUpEventListeners();\n            this.render();\n            this.refresh();\n        },\n\n        addClasses: function() {\n            this.$el.addClass([\n                'pagelevelprogress-indicator',\n                this.type + '-indicator'\n            ].join(' '));\n        },\n\n        checkAria: function() {\n            if (this.ariaLabel) return;\n            this.$el.attr('aria-hidden', true);\n        },\n\n        setUpEventListeners: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_isComplete', this.refresh);\n            if (!this.collection) return;\n            this.listenTo(this.collection, 'change:_isComplete', this.refresh);\n        },\n\n        refresh: function() {\n            this.checkCompletion();\n            this.render();\n        },\n\n        checkCompletion: function() {\n            var percentage = this.calculatePercentage();\n            this.model.set('percentageComplete', percentage);\n            this.$el\n                .toggleClass('complete', percentage === 100)\n                .toggleClass('incomplete', percentage !== 100);\n        },\n\n        calculatePercentage: function() {\n            return this.model.get('_isComplete') ? 100 : 0;\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            data.ariaLabel = this.ariaLabel;\n            data.type = this.type;\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n        }\n\n    }, {\n        template: 'pageLevelProgressIndicator'\n    });\n\n    return PageLevelProgressIndicatorView;\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView',[\n    'core/js/adapt',\n    './PageLevelProgressIndicatorView'\n], function(Adapt, PageLevelProgressIndicatorView) {\n\n    var PageLevelProgressItemView = Backbone.View.extend({\n\n        className: function () {\n            return [\n                'pagelevelprogress-item drawer-item',\n                this.model.get('_type') + '-indicator'\n            ].join(' ');\n        },\n\n        attributes: {\n            'role': 'listitem'\n        },\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n            this.addIndicator();\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n        },\n\n        addIndicator: function() {\n            if (this.model.get('_isOptional')) return;\n            var item = new PageLevelProgressIndicatorView({\n                model: this.model\n            });\n            this.$('.js-indicator').append(item.$el);\n        }\n\n    }, {\n        template: 'pageLevelProgressItem'\n    });\n\n    return PageLevelProgressItemView;\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView',[\n   'core/js/adapt',\n   './PageLevelProgressItemView'\n], function(Adapt, PageLevelProgressItemView) {\n\n    var PageLevelProgressView = Backbone.View.extend({\n\n        className: 'pagelevelprogress',\n\n        events: {\n            'click .pagelevelprogress-item button': 'scrollToPageElement'\n        },\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n            this.addChildren();\n        },\n\n        scrollToPageElement: function(event) {\n            if (event && event.preventDefault) event.preventDefault();\n\n            var $target = $(event.currentTarget);\n            if ($target.is('.disabled')) return;\n\n            var currentComponentSelector = '.' + $target.attr('data-pagelevelprogress-id');\n\n            Adapt.once('drawer:closed', function() {\n                Adapt.scrollTo(currentComponentSelector, { duration: 400 });\n            }).trigger('drawer:closeDrawer', $(currentComponentSelector));\n        },\n\n        render: function() {\n            var template = Handlebars.templates['pageLevelProgress'];\n            this.$el.html(template({}));\n        },\n\n        addChildren: function() {\n            var $children = this.$('.js-children');\n            this.collection.each(function(model) {\n                $children.append(new PageLevelProgressItemView({\n                    model: model\n                }).$el);\n            }.bind(this));\n        }\n\n    });\n\n    return PageLevelProgressView;\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView',[\n    'core/js/adapt',\n    './completionCalculations',\n    './PageLevelProgressView',\n    './PageLevelProgressIndicatorView'\n], function(Adapt, completionCalculations, PageLevelProgressView, PageLevelProgressIndicatorView) {\n\n    var PageLevelProgressNavigationView = Backbone.View.extend({\n\n        tagName: 'button',\n\n        className: 'base pagelevelprogress-navigation',\n\n        events: {\n            'click': 'onProgressClicked'\n        },\n\n        initialize: function() {\n            _.bindAll(this, 'updateProgressBar');\n            this.setUpEventListeners();\n            this.render();\n            this.addIndicator();\n            this.deferredUpdate();\n        },\n\n        setUpEventListeners: function() {\n            this.listenTo(Adapt, {\n                'remove': this.remove,\n                'router:location': this.updateProgressBar,\n                'pageLevelProgress:update': this.refreshProgressBar\n            });\n        },\n\n        render: function() {\n            var template = Handlebars.templates['pageLevelProgressNavigation'];\n            this.$el.html(template({}));\n        },\n\n        addIndicator: function() {\n            this.indicatorView = new PageLevelProgressIndicatorView({\n                model: this.model,\n                collection: this.collection,\n                calculatePercentage: this._getPageCompletionPercentage,\n                ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar\n            });\n            this.$el.prepend(this.indicatorView.$el);\n        },\n\n        _getPageCompletionPercentage: function() {\n            return completionCalculations.calculatePercentageComplete(this.model);\n        },\n\n        deferredUpdate: function() {\n            _.defer(this.updateProgressBar);\n        },\n\n        updateProgressBar: function() {\n            this.indicatorView.refresh();\n        },\n\n        refreshProgressBar: function() {\n            this.collection.repopulate(enabledProgressItems);\n            this.updateProgressBar();\n        },\n\n        onProgressClicked: function(event) {\n            if (event && event.preventDefault) event.preventDefault();\n            Adapt.drawer.triggerCustomView(new PageLevelProgressView({\n                collection: this.collection\n            }).$el, false);\n        },\n\n        remove: function() {\n            Backbone.View.prototype.remove.call(this);\n            this.collection.reset();\n        }\n\n    });\n\n    return PageLevelProgressNavigationView;\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection',[\n    './completionCalculations'\n], function(completionCalculations) {\n\n    var PageLevelProgressCollection = Backbone.Collection.extend({\n\n        initialize: function(models, options) {\n            if (!options || !options.pageModel) return;\n            this._pageModel = options.pageModel;\n            this.repopulate();\n        },\n\n        repopulate: function() {\n            this.reset();\n            if (!this._pageModel) return;\n\n            var allDescendants = this._pageModel.getAllDescendantModels(true);\n            var currentPageItems = allDescendants.filter(function(item) {\n                return item.get('_isAvailable') === true;\n            });\n            var availableItems = completionCalculations.filterAvailableChildren(currentPageItems);\n            var enabledProgressItems = completionCalculations.getPageLevelProgressEnabledModels(availableItems);\n\n            this.add(enabledProgressItems);\n        }\n\n    });\n\n    return PageLevelProgressCollection;\n\n});\n\n","define('extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress',[\n    'core/js/adapt',\n    './completionCalculations',\n    './PageLevelProgressNavigationView',\n    './PageLevelProgressIndicatorView',\n    './PageLevelProgressCollection'\n], function(Adapt, completionCalculations, PageLevelProgressNavigationView, PageLevelProgressIndicatorView, PageLevelProgressCollection) {\n\n    var PageLevelProgress = Backbone.Controller.extend({\n\n        initialize: function() {\n            this.listenTo(Adapt, 'app:dataReady', this.onDataReady);\n        },\n\n        getCourseConfig: function() {\n            return Adapt.course.get('_pageLevelProgress');\n        },\n\n        onDataReady: function() {\n            // Do not proceed if pageLevelProgress is not enabled in course.json\n            var coursePLPConfig = this.getCourseConfig();\n            if (!coursePLPConfig || !coursePLPConfig._isEnabled) {\n                return;\n            }\n            this.setUpEventListeners();\n        },\n\n        setUpEventListeners: function() {\n            var headerIndicatorTypes = [\n                'menu',\n                'page',\n                'article',\n                'block',\n                'component'\n            ];\n\n            var headerIndicatorEventNames = headerIndicatorTypes\n                .concat(['']).join('View:render ');\n\n            this.listenTo(Adapt, headerIndicatorEventNames, this.renderHeaderIndicatorView);\n\n            this.listenTo(Adapt, {\n                'menuView:postRender': this.renderMenuItemIndicatorView,\n                'router:page': this.renderNavigationView\n            });\n        },\n\n        renderHeaderIndicatorView: function(view) {\n            var model = view.model;\n\n            var config = model.get('_pageLevelProgress');\n            if (!config || !config._isEnabled || !config._isCompletionIndicatorEnabled) {\n                return;\n            }\n\n            var pageModel = model.findAncestor('contentObjects');\n            var pageConfig = pageModel && pageModel.get('_pageLevelProgress');\n            if (pageConfig && !pageConfig._isEnabled) {\n                return;\n            }\n\n            var $headings = view.$('.js-heading');\n            $headings.each(function(index, el) {\n                var $el = $(el);\n                var indicatorView = new PageLevelProgressIndicatorView({\n                    model: model\n                });\n                indicatorView.$el.insertAfter($el);\n            });\n        },\n\n        // This should add/update progress on menuView\n        renderMenuItemIndicatorView: function(view) {\n            // Do not render on menu, only render on menu items\n            if (view.model.get('_id') === Adapt.location._currentId) {\n                return;\n            }\n\n            // Progress bar should not render for course viewType\n            var viewType = view.model.get('_type');\n            if (viewType === 'course') {\n                return;\n            }\n\n            // Do not proceed if pageLevelProgress is not enabled for the content object\n            var pageLevelProgress = view.model.get('_pageLevelProgress');\n            if (!pageLevelProgress || !pageLevelProgress._isEnabled) {\n                return;\n            }\n\n            view.$el.find('.js-menu-item-progress').append(new PageLevelProgressIndicatorView({\n                model: view.model,\n                type: 'menu-item',\n                calculatePercentage: this._getMenuItemCompletionPercentage.bind(view),\n                ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar\n            }).$el);\n        },\n\n        _getMenuItemCompletionPercentage: function() {\n            return completionCalculations.calculatePercentageComplete(this.model);\n        },\n\n        // This should add/update progress on page navigation bar\n        renderNavigationView: function(pageModel) {\n            // Do not render if turned off at course level\n            var coursePLPConfig = this.getCourseConfig();\n            if (coursePLPConfig && coursePLPConfig._isShownInNavigationBar === false) {\n                return;\n            }\n\n            // Do not proceed if pageLevelProgress is not enabled for the content object\n            var pagePLPConfig = pageModel.get('_pageLevelProgress');\n            if (!pagePLPConfig || !pagePLPConfig._isEnabled) {\n                return;\n            }\n\n            var collection = new PageLevelProgressCollection(null, {\n                pageModel: pageModel\n            });\n\n            if (collection.length === 0) {\n                return;\n            }\n\n            $('.navigation-drawer-toggle-button').after(new PageLevelProgressNavigationView({\n                model: pageModel,\n                collection: collection\n            }).$el);\n        }\n\n    });\n\n    Adapt.pageLevelProgress = new PageLevelProgress();\n\n});\n\n","define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var ResourcesView = Backbone.View.extend({\n\n        className: \"resources\",\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .resources-filter button': 'onFilterClicked',\n            'click .resources-item-container button': 'onResourceClicked'\n        },\n\n        render: function() {\n            var collectionData = this.collection.toJSON();\n            var modelData = this.model.toJSON();\n            var template = Handlebars.templates[\"resources\"];\n            this.$el.html(template({model: modelData, resources:collectionData, _globals: Adapt.course.get('_globals')}));\n            _.defer(_.bind(this.postRender, this));\n            return this;\n        },\n\n        postRender: function() {\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);\n        },\n\n        onFilterClicked: function(event) {\n            event.preventDefault();\n            var $currentTarget = $(event.currentTarget);\n            this.$('.resources-filter button').removeClass('selected');\n            var filter = $currentTarget.addClass('selected').attr('data-filter');\n            var items = [];\n\n            if (filter === 'all') {\n                items = this.$('.resources-item').removeClass('display-none');\n            } else {\n                this.$('.resources-item').removeClass('display-none').not(\".\" + filter).addClass('display-none');\n                items = this.$('.resources-item.' + filter);\n            }\n\n            if (items.length === 0) return;\n            $(items[0]).a11y_focus();\n        },\n\n        onResourceClicked: function(event) {\n            var data = $(event.currentTarget).data();\n\n            if (!data.forceDownload || Adapt.device.OS === 'ios') {\n                window.top.open(data.href);\n                return;\n            }\n\n            var dummyLink = document.createElement('a');\n            // Internet Explorer has no support for the 'download' attribute\n            if (Adapt.device.browser === \"internet explorer\") {\n                dummyLink.target = \"_blank\";\n            } else {\n                dummyLink.download = data.filename;\n            }\n            dummyLink.href = data.href;\n\n            document.body.appendChild(dummyLink);\n            dummyLink.click();\n            document.body.removeChild(dummyLink);\n            delete dummyLink;\n        }\n    });\n\n    return ResourcesView;\n});\n\n","define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers',['require','handlebars'],function(require) {\n\n\tvar Handlebars = require('handlebars');\n\n\tHandlebars.registerHelper('if_collection_contains', function(collection, attribute, value, block) {\n\t\tvar makeBlockVisible = false;\n\n\t\t_.each(collection, function(resource) {\n\t\t\tif (resource[attribute] === value) {\n\t\t\t\tmakeBlockVisible = true;\n\t\t\t}\n\t\t});\n\t\tif(makeBlockVisible) {\n            return block.fn(this);\n        } else {\n            return block.inverse();\n        }\n    });\n\n    Handlebars.registerHelper('if_collection_contains_only_one_item', function(collection, attribute, block) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\tif (attributeCount.length <= 1) {\n\t\t\treturn block.fn(this);\n\t\t} else {\n\t\t\treturn block.inverse(this);\n\t\t}\n\n    });\n\n    Handlebars.registerHelper('return_column_layout_from_collection_length', function(collection, attribute) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\treturn (attributeCount.length + 1);\n\n    });\n\n})\n\t;\n","define('extensions/adapt-contrib-resources/js/adapt-contrib-resources',[\n    'backbone',\n    'core/js/adapt',\n    './adapt-contrib-resourcesView',\n    './adapt-contrib-resourcesHelpers'\n], function(Backbone, Adapt, ResourcesView, ResourcesHelpers) {\n\n    function setupResources(resourcesData) {\n\n        var resourcesModel = new Backbone.Model(resourcesData);\n        var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));\n\n        Adapt.on('resources:showResources', function() {\n            Adapt.drawer.triggerCustomView(new ResourcesView({\n                model: resourcesModel,\n                collection: resourcesCollection\n            }).$el);\n        });\n\n    }\n\n    function initResources() {\n\n        var courseResources = Adapt.course.get('_resources');\n\n        // do not proceed until resource set on course.json\n        if (!courseResources || courseResources._isEnabled === false) return;\n\n        var drawerObject = {\n            title: courseResources.title,\n            description: courseResources.description,\n            className: 'resources-drawer',\n            drawerOrder: courseResources._drawerOrder || 0\n        };\n\n        Adapt.drawer.addItem(drawerObject, 'resources:showResources');\n\n        setupResources(courseResources);\n\n    }\n\n    Adapt.on('adapt:start', initResources);\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/trickleView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleView = Backbone.View.extend({\n\n        isSteplocked: false,\n\n        completionAttribute : null,\n\n        initialize: function(options) {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            var AdaptEvents = {\n                \"trickle:kill\": this.onKill,\n                \"remove\": this.onRemove\n            };\n\n            this.onPreRender(this);\n\n            AdaptEvents[this.model.get(\"_type\") + \"View:postRender\"] = this.onPostRender;\n            this.listenTo(Adapt, AdaptEvents);\n\n            this.on(\"steplock\", this.onStepLock);\n            this.on(\"stepunlock\", this.onStepUnlock);\n        },\n\n        onPreRender: function(view) {\n            this.completionAttribute = Adapt.trickle.getCompletionAttribute();\n            if (!this.isElementEnabled()) return;\n\n            Adapt.trigger(\"trickle:preRender\", this);\n        },\n\n        onPostRender: function(view) {\n            if (view.model.get(\"_id\") !== this.model.get(\"_id\")) return;\n            if (!this.isElementEnabled()) return;\n\n            Adapt.trigger(\"trickle:postRender\", this);\n        },\n\n        isElementEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!trickle) return false;\n\n            if (this.model.get(this.completionAttribute)) return false;\n\n            var isArticleWithOnChildren = (this.model.get(\"_type\") === \"article\" && trickle._onChildren);\n            if (isArticleWithOnChildren) {\n                return false;\n            }\n\n            if (trickle._isEnabled === true) return true;\n            return false;\n        },\n\n        onStepLock: function() {\n            if (!this.isElementEnabled()) {\n                this.continueToNext();\n                return;\n            }\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            var isSteplocking = (trickle._stepLocking && trickle._stepLocking._isEnabled);\n            if (!isSteplocking) {\n                this.continueToNext();\n                return;\n            }\n\n            Adapt.trigger(\"trickle:steplock\", this);\n            this.isSteplocked = true;\n        },\n\n        continueToNext: function() {\n            _.defer(function() {\n                Adapt.trigger(\"trickle:continue\", this);\n            }.bind(this));\n        },\n\n\n        onStepUnlock: function() {\n            if (!this.isSteplocked) return;\n            this.isSteplocked = false;\n            Adapt.trigger(\"trickle:stepunlock\", this);\n        },\n\n        onKill: function() {\n            this.detachFromElement();\n        },\n\n        onRemove: function() {\n            this.detachFromElement();\n        },\n\n        detachFromElement: function() {\n            this.undelegateEvents();\n            this.stopListening();\n            this.model = null;\n            this.articleModel = null;\n            this.$el = null;\n            this.el = null;\n        }\n\n    });\n\n    return TrickleView;\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/pageView',[\n    'core/js/adapt',\n    './trickleView'\n], function(Adapt, TrickleView) {\n\n    var PageView = Backbone.View.extend({\n\n        currentDescendantIndex: 0,\n        currentLocksOnDescendant: 0,\n        currentDescendant: null,\n\n        initialize: function(options) {\n            if (!this.isPageEnabled()) {\n                return this.detachFromPage();\n            }\n            this.setupDescendants();\n            if (!this.haveDescendantsGotTrickle()) {\n                return this.detachFromPage();\n            }\n            this.addClassToHtml();\n            this.setupEventListeners();\n        },\n\n        isPageEnabled: function() {\n            var trickleConfig = Adapt.trickle.getModelConfig(this.model);\n            if (trickleConfig && trickleConfig._isEnabled === false) return false;\n            return true;\n        },\n\n        setupDescendants: function() {\n            this.currentDescendant = null;\n            this.descendantViews = {};\n            this.getDescendants();\n            Adapt.trigger(\"trickle:descendants\", this);\n        },\n\n        descendantsChildFirst: null,\n        descendantsParentFirst: null,\n        descendantViews: null,\n\n        getDescendants: function() {\n            this.descendantsChildFirst = this.model.getAllDescendantModels();\n            this.descendantsParentFirst = this.model.getAllDescendantModels(true);\n\n            // if some descendants flip between _isAvailable true/false they\n            // must have their defaults set before the filter is applied\n            this.setDescendantsTrickleDefaults();\n\n            this.descendantsChildFirst = this.filterComponents(this.descendantsChildFirst);\n            this.descendantsParentFirst = this.filterComponents(this.descendantsParentFirst);\n\n        },\n\n        filterComponents: function(descendants) {\n            return descendants.filter(function(descendant) {\n                if (descendant.get(\"_type\") === \"component\") return false;\n                if (!descendant.get(\"_isAvailable\")) return false;\n                return true;\n            });\n        },\n\n        setDescendantsTrickleDefaults: function() {\n            // use parent first as likely to get to article\n            this.descendantsParentFirst.forEach(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) {\n                    return;\n                }\n\n                // check if trickle is configures on descendant\n                // NOTE: Removed for banked assessments\n                // var isTrickleConfigured = descendant.get(\"_isTrickleConfigured\");\n                // if (isTrickleConfigured) return;\n\n                // setup steplocking defaults\n                trickle._stepLocking = _.extend({\n                    \"_isEnabled\": true, //(default=true)\n                    \"_isCompletionRequired\": true, //(default=true)\n                    \"_isLockedOnRevisit\": false //(default=false)\n                }, trickle._stepLocking);\n\n                // setup main trickle defaults\n                trickle = _.extend({\n                    \"_isEnabled\": true, //(default=true)\n                    \"_autoScroll\": true, //(default=true)\n                    \"_scrollDuration\": 500, //(default=500)\n                    \"_onChildren\": true, //(default=true)\n                    \"_scrollTo\": \"@block +1\" //(default=\"@block +1\")\n                }, trickle);\n\n                Adapt.trickle.setModelConfig(descendant, trickle);\n\n                //check article \"onChildren\" rule\n                if (trickle._onChildren &&\n                    descendant.get(\"_type\") === \"article\") {\n                    this.setupArticleOnChildren(descendant, trickle);\n                }\n\n                // set descendant trickle as configured\n                descendant.set(\"_isTrickleConfigured\", true);\n\n            }.bind(this));\n        },\n\n        setupArticleOnChildren: function(articleModel, articleTrickleConfig) {\n            // set trickle on all blocks, using article config with block overrides\n            var articleBlocks = articleModel.getChildren();\n\n            articleBlocks.each(function(blockModel, index) {\n                var blockTrickleConfig = Adapt.trickle.getModelConfig(blockModel);\n\n                // overlay block trickle on article trickle\n                // this allows values to carry through from the article to the block\n                // retains any value overriden in the block\n                for (var k in blockTrickleConfig) {\n                    //handle nested objects to one level\n                    if (typeof blockTrickleConfig[k] === \"object\") {\n                        blockTrickleConfig[k] = _.extend({}, articleTrickleConfig[k], blockTrickleConfig[k]);\n                    }\n                }\n\n                blockTrickleConfig = _.extend({}, articleTrickleConfig, blockTrickleConfig);\n\n\n                // setup start/final config\n                if (articleBlocks.length === index+1) {\n                    blockTrickleConfig._isFinal = true;\n                }\n                if (index === 0) {\n                    blockTrickleConfig._isStart = true;\n                }\n\n                Adapt.trickle.setModelConfig(blockModel, blockTrickleConfig);\n            });\n\n        },\n\n        haveDescendantsGotTrickle: function() {\n            return this.descendantsChildFirst.some(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                return trickle && trickle._isEnabled === true;\n            });\n        },\n\n        addClassToHtml: function() {\n            $(\"html\").addClass(\"trickle\");\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"remove\": this.onRemove,\n\n                \"articleView:preRender\": this.onDescendantPreRender,\n                \"blockView:preRender\": this.onDescendantPreRender,\n\n                \"trickle:unwait\": this.onUnwait,\n                \"trickle:wait\": this.onWait,\n                \"trickle:continue\": this.onContinue,\n                \"trickle:skip\": this.onSkip,\n\n                \"trickle:kill\": this.onKill\n            });\n            this.listenToOnce(this.model, \"change:_isReady\", this.onPageReady);\n        },\n\n        onDescendantPreRender: function(view) {\n            // ignore components\n            if (view.model.get(\"_type\") === \"component\") return;\n\n            var descendantView = new TrickleView({\n                model: view.model,\n                el: view.el\n            });\n            this.descendantViews[view.model.get(\"_id\")] = descendantView;\n        },\n\n        // trickle lifecycle\n\n        onPageReady: function(model, value) {\n            if (!value) return;\n\n            this.currentDescendant = null;\n\n            Adapt.trigger(\"trickle:started\");\n            this.gotoNextDescendant();\n        },\n\n        gotoNextDescendant: function() {\n            this.getDescendants();\n\n            if (this.currentDescendant) {\n                this.currentDescendant.trigger(\"stepunlock\");\n                this.currentDescendant = null;\n            }\n\n            for (var index = this.currentDescendantIndex || 0, l = this.descendantsChildFirst.length; index < l; index++) {\n                var descendant = this.descendantsChildFirst[index];\n                switch ( descendant.get(\"_type\") ) {\n                    case \"block\":\n                    case \"article\":\n                        this.currentLocksOnDescendant = 0;\n                        this.currentDescendantIndex = index;\n                        var currentId = descendant.get(\"_id\");\n                        this.currentDescendant = this.descendantViews[currentId];\n                        this.currentDescendant.trigger(\"steplock\");\n                        return;\n                }\n            }\n            this.finished();\n        },\n\n        onContinue: function(view) {\n            if (!this.currentDescendant) return;\n            if (view.model.get(\"_id\") !== this.currentDescendant.model.get(\"_id\")) return;\n\n            this.onSkip();\n        },\n\n        onWait: function() {\n            this.currentLocksOnDescendant++;\n        },\n\n        onUnwait: function() {\n            this.currentLocksOnDescendant--;\n            if (this.currentLocksOnDescendant > 0) return;\n\n            var lastDescendant = this.currentDescendant.model;\n\n            this.currentDescendantIndex++;\n            this.gotoNextDescendant();\n\n            Adapt.trickle.scroll(lastDescendant);\n\n        },\n\n        onSkip: function() {\n            // wait for all handlers to accept skip\n            _.defer(function() {\n                this.currentDescendantIndex++;\n                this.gotoNextDescendant();\n            }.bind(this));\n        },\n\n        onKill: function() {\n            this.finished();\n            this.detachFromPage();\n        },\n\n        finished: function() {\n            Adapt.trigger(\"trickle:finished\");\n            this.detachFromPage();\n        },\n\n        // end of trickle lifecycle\n\n        onRemove: function() {\n            this.finished();\n        },\n\n        detachFromPage: function() {\n            $(\"html\").removeClass(\"trickle\");\n            this.undelegateEvents();\n            this.stopListening();\n            this.model = null;\n            this.$el = null;\n            this.el = null;\n            this.currentDescendant = null;\n            this.descendantViews = null;\n            this.descendantsChildFirst = null;\n            this.descendantsParentFirst = null;\n            Adapt.trickle.pageView = null;\n        }\n\n    });\n\n    return PageView;\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/buttonView',[\n    'core/js/adapt',\n    'core/js/views/componentView'\n], function(Adapt, ComponentView) {\n\n    var completionAttribute = \"_isComplete\";\n\n    var TrickleButtonView = Backbone.View.extend({\n\n        isStepLocking: false,\n        hasStepLocked: false,\n        isStepLocked: false,\n        isStepLockFinished: false,\n        hasStepPreCompleted: false,\n        isWaitingForClick: false,\n        allowVisible: false,\n        allowEnabled: true,\n        overlayShownCount: 0,\n\n        el: function() {\n\n            this.setupPreRender();\n\n            return Handlebars.templates['trickle-button'](this.model.toJSON());\n        },\n\n        setupPreRender: function() {\n\n            this.setupButtonVisible();\n            this.setupButtonEnabled();\n        },\n\n        setupButtonVisible: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            this.allowVisible = false;\n            trickle._button._isVisible = false;\n\n            if (trickle._button._styleBeforeCompletion === \"visible\") {\n                this.allowVisible = true;\n                if (trickle._button._autoHide && trickle._button._isFullWidth) {\n                    trickle._button._isVisible = false;\n                } else {\n                    trickle._button._isVisible = true;\n                }\n            }\n        },\n\n        setupButtonEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (trickle._stepLocking._isCompletionRequired === false) {\n                this.allowEnabled = true;\n                trickle._button._isDisabled = false;\n            } else if (trickle._button._styleBeforeCompletion === \"visible\") {\n                this.allowEnabled = false;\n                trickle._button._isDisabled = true;\n            } else {\n                trickle._button._isDisabled = false;\n                this.allowEnabled = true;\n            }\n\n        },\n\n        events: {\n            \"click button\": \"onButtonClick\"\n        },\n\n        initialize: function(options) {\n            this.getCompletionAttribute();\n            this.debounceCheckAutoHide();\n            this.setupStepLocking();\n            this.setupEventListeners();\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = Adapt.trickle.getModelConfig(Adapt.config);\n            if (!trickle) return;\n            if (!trickle._completionAttribute) return;\n            completionAttribute = trickle._completionAttribute;\n        },\n\n        setupStepLocking: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            this.isStepLocked = Boolean(trickle._stepLocking._isEnabled);\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:overlay\": this.onOverlay,\n                \"trickle:unoverlay\": this.onUnoverlay,\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:skip\": this.onSkip,\n                \"trickle:kill\": this.onKill,\n                \"trickle:update\": this.onUpdate,\n                \"remove\": this.onRemove\n            });\n\n            this.listenTo(this.model, \"change:\"+completionAttribute, this.onCompletion);\n        },\n\n        debounceCheckAutoHide: function() {\n            this.checkButtonAutoHideSync = this.checkButtonAutoHide.bind(this);\n            this.checkButtonAutoHide = _.debounce(this.checkButtonAutoHideSync, 100);\n        },\n\n        checkButtonAutoHide: function() {\n            if (!this.allowVisible) {\n                this.setButtonVisible(false);\n                return;\n            }\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!trickle._button._autoHide) {\n                this.setButtonVisible(true);\n                return;\n            } else if (this.overlayShownCount > 0) {\n                this.setButtonVisible(false);\n                return;\n            }\n\n            var measurements = this.$el.onscreen();\n\n            // This is to fix common miscalculation issues\n            var isJustOffscreen = (measurements.bottom > -100);\n\n            // add show/hide animation here if needed\n            if (measurements.onscreen || isJustOffscreen) {\n                this.setButtonVisible(true);\n            } else {\n                this.setButtonVisible(false);\n            }\n        },\n\n        setButtonVisible: function(isVisible) {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            trickle._button._isVisible = Boolean(isVisible);\n            this.$(\".component-inner\").toggleClass(\"display-none\", !trickle._button._isVisible);\n        },\n\n        checkButtonEnabled: function() {\n            this.setButtonEnabled(this.allowEnabled);\n        },\n\n        setButtonEnabled: function(isEnabled) {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            var $button = this.$(\"button\");\n            if (isEnabled) {\n                $button.removeClass(\"disabled\").removeAttr(\"disabled\");\n                trickle._button._isDisabled = true;\n                // make label unfocusable as it is no longer needed\n                this.$('.aria-label').a11y_cntrl(false);\n            } else {\n                $button.addClass(\"disabled\").attr(\"disabled\", \"disabled\");\n                trickle._button._isDisabled = false;\n            }\n        },\n\n        onStepLock: function(view) {\n            if (!this.isViewMatch(view)) return;\n\n            this.hasStepLocked = true;\n            this.isStepLocking = true;\n            this.overlayShownCount = 0;\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (!this.isButtonEnabled()) return;\n            var isCompleteAndShouldRelock = (trickle._stepLocking._isLockedOnRevisit &&\n                this.model.get(completionAttribute));\n\n            if (isCompleteAndShouldRelock) {\n                this.isStepLocked = true;\n                this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                Adapt.trigger(\"trickle:wait\");\n                this.allowVisible = true;\n                this.checkButtonAutoHide();\n            } else if (this.hasStepPreCompleted) {\n                // force the button to show if section completed before it was steplocked\n                this.isStepLocked = true;\n                this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                this.allowVisible = true;\n                this.stepCompleted();\n            }\n            this.setupOnScreenListener();\n        },\n\n        onOverlay: function() {\n            this.overlayShownCount++;\n        },\n\n        onUnoverlay: function() {\n            this.overlayShownCount--;\n            this.checkButtonAutoHide();\n        },\n\n        setupOnScreenListener: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (!trickle._button._autoHide) return;\n            this.$el.on(\"onscreen\", this.checkButtonAutoHideSync);\n\n        },\n\n        isViewMatch: function(view) {\n            return view.model.get(\"_id\") === this.model.get(\"_id\");\n        },\n\n        isButtonEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (!trickle._isEnabled || !trickle._button._isEnabled) return false;\n            return true;\n        },\n\n        onCompletion: function(model, value) {\n            if (value === false) return;\n\n            this.hasStepPreCompleted = true;\n\n            if (!this.hasStepLocked) return;\n\n            _.defer(this.stepCompleted.bind(this));\n        },\n\n        stepCompleted: function() {\n\n            if (this.isStepLockFinished) return;\n\n            this.isStepLocked = false;\n            this.allowVisible = false;\n            this.allowEnabled = false;\n\n            if (this.isButtonEnabled()) {\n                if (this.isStepLocking) {\n\n                    this.isStepLocked = true;\n                    this.isWaitingForClick = true;\n                    Adapt.trigger(\"trickle:wait\");\n\n                } else {\n\n                    this.isStepLockFinished = true;\n                }\n\n                this.allowVisible = true;\n                this.allowEnabled = true;\n            }\n\n            this.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.checkButtonAutoHide();\n            this.checkButtonEnabled();\n\n        },\n\n        onButtonClick: function() {\n            if (this.isStepLocked) {\n                Adapt.trigger(\"trickle:unwait\");\n                this.isStepLocked = false;\n                this.isStepLockFinished = true;\n\n            } else {\n                this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                _.defer(function() {\n                    Adapt.trickle.scroll(this.model);\n                }.bind(this));\n            }\n\n            var trickle = this.model.get(\"_trickle\");\n            switch (trickle._button._styleAfterClick) {\n            case \"hidden\":\n                this.allowVisible = false;\n                this.checkButtonAutoHideSync();\n                break;\n            case \"disabled\":\n                this.allowEnabled = false;\n                this.checkButtonAutoHideSync();\n            }\n        },\n\n        onUpdate: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (trickle._button._autoHide && this.isStepLocking) {\n                this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n\n            var $original = this.$el;\n            var $newEl = $(Handlebars.templates['trickle-button'](this.model.toJSON()));\n            $original.replaceWith($newEl);\n\n            this.setElement($newEl);\n\n            if (trickle._button._autoHide && this.isStepLocking) {\n                this.$el.on(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n        },\n\n        onStepUnlock: function(view) {\n            if (!this.isViewMatch(view)) return;\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            this.isStepLocking = false;\n            this.overlayShownCount = 0;\n            // make label unfocusable as it is no longer needed\n            this.$('.aria-label').a11y_cntrl(false);\n        },\n\n        onSkip: function() {\n            if (!this.isStepLocking) return;\n\n            this.onKill();\n        },\n\n        onKill: function() {\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            if (this.isWaitingForClick) {\n                this.model.set(\"_isTrickleAutoScrollComplete\", true);\n            }\n            this.isWaitingForClick = false;\n            this.isStepLocked = false;\n            this.isStepLocking = false;\n            this.allowVisible = false;\n            this.allowEnabled = false;\n            this.isStepLockFinished = true;\n            this.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.checkButtonAutoHide();\n            this.checkButtonEnabled();\n        },\n\n        onRemove: function() {\n            if (this.isWaitingForClick) {\n                this.model.set(\"_isTrickleAutoScrollComplete\", true);\n            }\n            this.isWaitingForClick = false;\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            this.isStepLocking = true;\n            this.remove();\n        }\n\n    });\n\n    return TrickleButtonView;\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/button',[\n    'core/js/adapt',\n    './buttonView'\n], function(Adapt, ButtonView) {\n\n    var TrickleButtonHandler = Backbone.Controller.extend({\n\n        buttonViews: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                'app:dataReady': this.onAppDataReady,\n                remove: this.onRemove\n            });\n        },\n\n        onAppDataReady: function() {\n            this.buttonViews = {};\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'trickle:preRender': this.onPreRender,\n                'trickle:postRender': this.onPostRender\n            });\n        },\n\n        onPreRender: function(view) {\n            // setup button on prerender to allow it to control the steplocking process\n            if (!this.isTrickleEnabled(view.model)) return;\n\n            this.setupConfigDefaults(view.model);\n\n            this.buttonViews[view.model.get('_id')] = new ButtonView({\n                model: view.model\n            });\n        },\n\n        onPostRender: function(view) {\n            // inject the button at post render\n            if (!this.isTrickleEnabled(view.model)) return;\n\n            view.$el.append(this.buttonViews[view.model.get('_id')].$el);\n        },\n\n        isTrickleEnabled: function(model) {\n            var trickle = Adapt.trickle.getModelConfig(model);\n            if (!trickle || !trickle._isEnabled) return false;\n\n            if (trickle._onChildren && model.get('_type') === 'article') return false;\n\n            return true;\n        },\n\n        setupConfigDefaults: function(model) {\n            if (model.get('_isTrickleButtonConfigured')) return;\n\n            var defaults = {\n                _isEnabled: true,\n                _styleBeforeCompletion: 'hidden',\n                _styleAfterClick: 'hidden',\n                _isFullWidth: true,\n                _autoHide: false,\n                _className: '',\n                text: 'Continue',\n                startText: 'Begin',\n                finalText: 'Finish',\n                _component: 'trickle-button',\n                _isLocking: true,\n                _isVisible: false,\n                _isDisabled: false\n            };\n\n            var trickle = Adapt.trickle.getModelConfig(model);\n            trickle._button = _.extend(defaults, trickle._button);\n\n            if (trickle._button._isFullWidth) {\n                trickle._stepLocking._isEnabled = true;\n                trickle._button._styleAfterClick = 'hidden';\n            } else {\n                trickle._button._autoHide = false;\n            }\n\n            Adapt.trickle.setModelConfig(model, trickle);\n            model.set('_isTrickleButtonConfigured', true);\n\n        },\n\n        onRemove: function() {\n            this.buttonViews = {};\n        }\n\n    });\n\n    return new TrickleButtonHandler();\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/completion',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var completionAttribute = \"_isComplete\";\n\n    var TrickleCompletionHandler = Backbone.Controller.extend({\n\n        isStepLocking: false,\n        isCompleted: false,\n\n        stepModel: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.getCompletionAttribute();\n            this.setupEventListeners();\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = Adapt.trickle.getModelConfig(Adapt.config);\n            if (!trickle) return;\n            if (!trickle._completionAttribute) return;\n            completionAttribute = trickle._completionAttribute;\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:descendants\": this.onDescendants,\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onDescendants: function(view) {\n            // save the original completion state of the component before steplocking\n            view.descendantsParentFirst.forEach(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) return;\n                trickle._wasCompletedPreRender = descendant.get(completionAttribute);\n            });\n        },\n\n        onStepLock: function(view) {\n            var isModelComplete = view.model.get(completionAttribute);\n\n            var trickle = Adapt.trickle.getModelConfig(view.model);\n            if (!trickle._stepLocking._isCompletionRequired &&\n                !trickle._stepLocking._isLockedOnRevisit) {\n                if (!isModelComplete) return;\n                // skip any components that do not require completion but that are already complete\n                // this is needed for a second visit to a page with 'inview'\n                // components that aren't reset and don't require completion and are not relocked on revisit\n                Adapt.trigger(\"trickle:continue\", view);\n                return;\n            }\n\n            if (trickle._stepLocking._isCompletionRequired\n                && isModelComplete\n                && trickle._wasCompletedPreRender) {\n                // skip any components that are complete, have require completion\n                // and we completed before the page rendered\n                Adapt.trigger(\"trickle:continue\", view);\n                return;\n            }\n\n            Adapt.trigger(\"trickle:wait\");\n\n            if (isModelComplete) {\n                _.defer(function() {\n                    Adapt.trigger(\"trickle:unwait\");\n                });\n                return;\n            }\n\n            view.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.isCompleted = false;\n            this.isStepLocking = true;\n            this.stepModel = view.model;\n\n            this.listenTo(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n        },\n\n        onCompletion: function(model, value) {\n            if (value === false) return;\n            _.defer(this.stepCompleted.bind(this));\n        },\n\n        stepCompleted: function() {\n\n            if (!this.isStepLocking) return;\n\n            if (this.isCompleted) return;\n            this.isCompleted = true;\n\n            this.stopListening(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n\n            _.defer(function(){\n                Adapt.trigger(\"trickle:unwait\");\n            });\n        },\n\n        onKill: function() {\n            this.onStepUnlock();\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        },\n\n        onStepUnlock: function() {\n            this.stopListening(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n            this.isStepLocking = false;\n            this.stepModel = null;\n            this.isCompleted = false;\n        }\n\n    });\n\n    return new TrickleCompletionHandler();\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/notify',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleNotifyHandler = Backbone.Controller.extend({\n\n        isStepLocking: false,\n        isNotifyOpen: false,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"notify:opened\": this.onNotifyOpened,\n                \"notify:closed\": this.onNotifyClosed,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n        },\n\n        onNotifyOpened: function() {\n            if (!this.isStepLocking) return;\n\n            this.isNotifyOpen = true;\n            Adapt.trigger(\"trickle:overlay\");\n            Adapt.trigger(\"trickle:wait\");\n        },\n\n        onNotifyClosed: function() {\n            if (!this.isStepLocking) return;\n            if (!this.isNotifyOpen) return;\n\n            this.isNotifyOpen = false;\n            Adapt.trigger(\"trickle:unoverlay\");\n            Adapt.trigger(\"trickle:unwait\");\n        },\n\n        onStepUnlock: function() {\n            this.isStepLocking = false;\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    });\n\n    return new TrickleNotifyHandler();\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/resize',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleBodyResizeHandler = Backbone.Controller.extend({\n\n        isStepLocking: false,\n\n        stepView: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                \"app:dataReady\": this.onAppDataReady,\n                \"adapt:initialize\": this.onAdaptInitialized\n            });\n        },\n\n        onAppDataReady: function() {\n            this.onResize = _.debounce(this.onResize.bind(this), 10);\n            this.preventWrapperScroll = this.preventWrapperScroll.bind(this);\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:resize\": this.onTrickleResize,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"trickle:finished\": this.onFinished,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onAdaptInitialized: function() {\n            this.wrapper = document.getElementById('wrapper');\n            this.wrapper.addEventListener(\"scroll\", this.preventWrapperScroll);\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n            this.stepView = view;\n            $(window).on(\"resize\", this.onResize);\n            $(\".page\").on(\"resize\", this.onResize);\n\n            // wait for height / visibility to adjust\n            _.defer(function() {\n                Adapt.trigger(\"trickle:resize\");\n            });\n        },\n\n        preventWrapperScroll: function(event) {\n            if (!this.isStepLocking) return;\n            // Screen reader can scroll the #wrapper instead of the window.\n            // This code overcomes that behaviour.\n            var top = this.wrapper.scrollTop;\n            if (top === 0) return;\n            this.wrapper.scrollTop = 0;\n            window.scrollTo(0, window.pageYOffset + top);\n        },\n\n        onResize: function() {\n            if (!this.isStepLocking) return;\n            Adapt.trigger(\"trickle:resize\");\n        },\n\n        onTrickleResize: function() {\n            if (!this.isStepLocking) return;\n            var offset = this.stepView.$el.offset();\n            var height = this.stepView.$el.height();\n\n            var $wrapper = $(this.wrapper);\n\n            var topPadding = parseInt($wrapper.css(\"padding-top\") || \"0\");\n\n            var bottom = (offset['top'] - topPadding) + height;\n\n            $wrapper.css(\"height\", bottom );\n        },\n\n        onStepUnlock: function(view) {\n            this.isStepLocking = false;\n            this.stepView = null;\n            $(window).off(\"resize\", this.onResize);\n            $(\".page\").off(\"resize\", this.onResize);\n        },\n\n        onKill: function() {\n            this.onFinished();\n            this.onStepUnlock();\n        },\n\n        onFinished: function() {\n            this.wrapper.removeEventListener(\"scroll\", this.preventWrapperScroll);\n            $(this.wrapper).css(\"height\", \"\");\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n            this.stepView = null;\n        }\n\n    });\n\n    return new TrickleBodyResizeHandler();\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/tutor',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleTutorHandler = Backbone.Controller.extend({\n\n        stepLockedId: null,\n        isStepLocking: false,\n        isTutorOpen: false,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"tutor:opened\": this.onTutorOpened,\n                \"tutor:closed\": this.onTutorClosed,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            if (view) {\n                this.stepLockedId = view.model.get(\"_id\");\n            }\n            this.isStepLocking = true;\n        },\n\n        onTutorOpened: function(view, alertObject) {\n            if (!this.isStepLocking) return;\n            if (!this.isOriginStepLocked(view)) return;\n\n            this.isTutorOpen = true;\n            Adapt.trigger(\"trickle:overlay\");\n            Adapt.trigger(\"trickle:wait\");\n        },\n\n        isOriginStepLocked: function(view) {\n            if (!view || !this.stepLockedId) return true;\n\n            var parents = view.model.getAncestorModels();\n            var hasStepLockedParent = _.find(parents, function(ancestor) {\n                return ancestor.get('_id') === this.stepLockedId;\n            }, this);\n            if (!hasStepLockedParent) return false;\n            return true;\n        },\n\n        onTutorClosed: function(view, alertObject) {\n            if (!this.isStepLocking) return;\n            if (!this.isTutorOpen) return;\n            if (!this.isOriginStepLocked(view)) return;\n\n            this.isTutorOpen = false;\n            Adapt.trigger(\"trickle:unoverlay\");\n            Adapt.trigger(\"trickle:unwait\");\n        },\n\n        onStepUnlock: function() {\n            this.isStepLocking = false;\n            this.stepLockedId = null;\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    });\n\n    return new TrickleTutorHandler();\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/visibility',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleVisibilityHandler = Backbone.Controller.extend({\n\n        isStepLocking: false,\n\n        trickleModel: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:visibility\": this.onVisibility,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"trickle:finished\": this.onFinished,\n                \"remove\": this.onRemove\n            });\n\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n            this.trickleModel = view.model;\n            Adapt.trigger(\"trickle:visibility\");\n        },\n\n        onVisibility: function() {\n            if (!this.isStepLocking) return;\n\n            if (!Adapt.trickle.pageView) return;\n\n            var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;\n\n            var trickleModelId = this.trickleModel.get(\"_id\");\n            var trickleType = this.trickleModel.get(\"_type\");\n\n            var atIndex = _.findIndex(descendantsParentFirst, function(descendant) {\n                if (descendant.get(\"_id\") === trickleModelId) return true;\n            });\n\n            descendantsParentFirst.forEach(function(descendant, index) {\n                var components = descendant.findDescendantModels(\"components\");\n                if (index <= atIndex) {\n                    descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                    components.forEach(function(componentModel) {\n                        componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                    });\n                    return;\n                }\n\n                if (trickleType === \"article\" && descendant.get(\"_type\") === \"block\") {\n                    // make sure article blocks are shown\n                    if (descendant.get(\"_parentId\") === trickleModelId) {\n                        descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                        components.forEach(function(componentModel) {\n                            componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                        });\n                        return;\n                    }\n                }\n\n                descendant.set(\"_isVisible\", false, {pluginName:\"trickle\"});\n                components.forEach(function(componentModel) {\n                    componentModel.set(\"_isVisible\", false, {pluginName:\"trickle\"});\n                });\n\n            });\n\n        },\n\n        onStepUnlock: function(view) {\n            this.isStepLocking = false;\n            this.trickleModel = null;\n        },\n\n        onKill: function() {\n            this.onFinished();\n            this.onStepUnlock();\n        },\n\n        onFinished: function() {\n\n            var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;\n            descendantsParentFirst.forEach(function(descendant) {\n                descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                var components = descendant.findDescendantModels(\"components\");\n                components.forEach(function(componentModel) {\n                    componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                });\n            });\n\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    });\n\n    return new TrickleVisibilityHandler();\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/handlers/done',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleDone = Backbone.Controller.extend({\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.onDone = _.debounce(this.onDone.bind(this), 50);\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onDone,\n                \"trickle:stepunlock\": this.onDone,\n                \"trickle:continue\": this.onDone,\n                \"trickle:finished\": this.onDone\n            });\n        },\n\n        onDone: function() {\n            Adapt.trigger(\"trickle:done\");\n        }\n\n    });\n\n    return new TrickleDone();\n\n});\n\n","define('extensions/adapt-contrib-trickle/js/adapt-contrib-trickle',[\n    'core/js/adapt',\n    './pageView',\n    './handlers/button',\n    './handlers/completion',\n    './handlers/notify',\n    './handlers/resize',\n    './handlers/tutor',\n    './handlers/visibility',\n    './handlers/done'\n], function(Adapt, PageView) {\n\n    var Trickle = Backbone.Controller.extend({\n\n        model: null,\n        pageView: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                \"app:dataReady\": this.onAppDataReady\n            });\n        },\n\n        onAppDataReady: function() {\n            this.getCourseModel();\n            if (!this.isCourseEnabled()) return;\n            this.setupListeners();\n        },\n\n        getCourseModel: function() {\n            this.model = Adapt.course;\n        },\n\n        isCourseEnabled: function() {\n            var trickleConfig = this.getModelConfig(this.model);\n            if (trickleConfig && trickleConfig._isEnabled === false) return false;\n            return true;\n        },\n\n        getModelConfig: function(model) {\n            return model.get(\"_trickle\");\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = this.getModelConfig(Adapt.config);\n            if (!trickle) return \"_isComplete\";\n            return trickle._completionAttribute || \"_isComplete\";\n        },\n\n        setModelConfig: function(model, config) {\n            return model.set(\"_trickle\", config);\n        },\n\n        setupListeners: function() {\n            this.listenTo(Adapt, {\n                \"pageView:preRender\": this.onPagePreRender,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onPagePreRender: function(view) {\n            this.pageView = new PageView({\n                model: view.model,\n                el: view.el\n            });\n        },\n\n        scroll: function(fromModel) {\n            // Wait for model visibility to handle\n            _.delay(function() {\n\n                if (!this.shouldScrollPage(fromModel)) return;\n\n                var trickle = Adapt.trickle.getModelConfig(fromModel);\n                var scrollTo = trickle._scrollTo;\n                if (scrollTo === undefined) scrollTo = \"@block +1\";\n\n                fromModel.set(\"_isTrickleAutoScrollComplete\", true);\n\n                var scrollToId = \"\";\n                switch (scrollTo.substr(0,1)) {\n                    case \"@\":\n                        // NAVIGATE BY RELATIVE TYPE\n\n                        // Allows trickle to scroll to a sibling / cousin component\n                        // relative to the current trickle item\n                        var relativeModel = fromModel.findRelativeModel(scrollTo, {\n                            filter: function(model) {\n                                return model.get(\"_isAvailable\");\n                            }\n                        });\n\n                        if (relativeModel === undefined) return;\n                        scrollToId = relativeModel.get(\"_id\");\n                        break;\n                    case \".\":\n                        // NAVIGATE BY CLASS\n                        scrollToId = scrollTo.substr(1, scrollTo.length-1);\n                        break;\n                    default:\n                        scrollToId = scrollTo;\n                }\n\n                if (scrollToId == \"\") return;\n\n                var isAutoScrollOff = (!trickle._autoScroll);\n                if (isAutoScrollOff) {\n                    $(\".\" + scrollToId).focusOrNext();\n                    return false;\n                }\n\n                var duration = fromModel.get(\"_trickle\")._scrollDuration || 500;\n                Adapt.scrollTo(\".\" + scrollToId, { duration: duration });\n\n            }.bind(this), 250);\n        },\n\n        shouldScrollPage: function(fromModel) {\n            var trickle = Adapt.trickle.getModelConfig(fromModel);\n            if (!trickle || !trickle._isEnabled) return false;\n\n            var hasScrolled = fromModel.get(\"_isTrickleAutoScrollComplete\");\n            if (hasScrolled) return false;\n\n            var isArticleWithOnChildren = (fromModel.get(\"_type\") === \"article\" && trickle._onChildren);\n            if (isArticleWithOnChildren) return false;\n\n            return true;\n        }\n\n    });\n\n    return Adapt.trickle = new Trickle();\n\n});\n\n","define('extensions/adapt-contrib-tutor/js/adapt-contrib-tutor',[\n    'coreJS/adapt'\n],function(Adapt) {\n\n    Adapt.on('questionView:showFeedback', function(view) {\n\n        var alertObject = {\n            title: view.model.get(\"feedbackTitle\"),\n            body: view.model.get(\"feedbackMessage\")\n        };\n\n        var attributes = {};\n        var classes = [];\n\n        if (view.model.has('_isCorrect')) {\n            // Attach specific classes so that feedback can be styled.\n            if (view.model.get('_isCorrect')) {\n                classes.push('correct');\n            } else {\n                if (view.model.has('_isAtLeastOneCorrectSelection')) {\n                    // Partially correct feedback is an option.\n                    if (view.model.get('_isAtLeastOneCorrectSelection')) {\n                        classes.push('partially-correct');\n                    } else {\n                        classes.push('incorrect');\n                    }\n                } else {\n                    classes.push('incorrect');\n                }\n            }\n        }\n\n        // Add the extension/component type which triggered this.\n        if (view.model.has('_component')) {\n            classes.push('component-' + view.model.get('_component'));\n        } else if (view.model.has('_extension')) {\n            classes.push('extension-' + view.model.get('_extension'));\n        }\n\n        // Add the _id property as attribute.\n        attributes['data-adapt-id'] = view.model.get('_id');\n\n        alertObject._classes = classes.join(' ');\n        alertObject._attributes = attributes;\n\n        Adapt.once(\"notify:closed\", function() {\n            Adapt.trigger(\"tutor:closed\", view, alertObject);\n        });\n\n        Adapt.trigger('notify:popup', alertObject);\n\n        Adapt.trigger('tutor:opened', view, alertObject);\n    });\n\n});\n\n","define('core/js/views/menuView',[\r\n    'core/js/adapt',\r\n    'core/js/views/adaptView'\r\n], function(Adapt, AdaptView) {\r\n\r\n    var MenuView = AdaptView.extend({\r\n\r\n    \tclassName: function() {\r\n            var visible = \"visibility-hidden\";\r\n            if (this.model.get('_isVisible')) {\r\n                visible = \"\";\r\n            }\r\n    \t\treturn 'menu ' +\r\n            'menu-' +\r\n            this.model.get('_id') +\r\n            \" \" + this.model.get('_classes') +\r\n            \" \" + this.setVisibility() +\r\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\r\n    \t},\r\n\r\n        preRender: function() {\r\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\r\n            this.$el.css('opacity', 0);\r\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\r\n        },\r\n\r\n        postRender: function() {\r\n        },\r\n\r\n        isReady: function() {\r\n            if (this.model.get('_isReady')) {\r\n                _.defer(function() {\r\n                    $('.loading').hide();\r\n                    $(window).scrollTop(0);\r\n                    Adapt.trigger('menuView:ready', this);\r\n                    var styleOptions = { opacity: 1 };\r\n                    if (this.disableAnimation) {\r\n                        this.$el.css(styleOptions);\r\n                        $.inview();\r\n                    } else {\r\n                        this.$el.velocity(styleOptions, {\r\n                            duration: 'fast',\r\n                            complete: function() {\r\n                                $.inview();\r\n                            }\r\n                        });\r\n                    }\r\n                    $(window).scroll();\r\n                }.bind(this));\r\n            }\r\n        }\r\n\r\n    }, {\r\n        type:'menu'\r\n    });\r\n\r\n    return MenuView;\r\n\r\n});\r\n\n","define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu',[\n    'core/js/adapt',\n    'core/js/views/menuView'\n], function(Adapt, MenuView) {\n\n    var BoxMenuView = MenuView.extend({\n\n        className: function() {\n            return MenuView.prototype.className.apply(this) + \" boxmenu-menu\";\n        },\n\n        attributes: function() {\n            return MenuView.prototype.resultExtend('attributes', {\n                'role': 'main',\n                'aria-labelledby': this.model.get('_id')+'-heading'\n            }, this);\n        },\n\n        postRender: function() {\n            var nthChild = 0;\n            this.model.getChildren().each(function(item) {\n                if (item.get('_isAvailable') && !item.get('_isHidden')) {\n                    item.set('_nthChild', ++nthChild);\n                    this.$('.js-children').append(new BoxMenuItemView({model: item}).$el);\n                }\n\n                if(item.get('_isHidden')) {\n                    item.set('_isReady', true);\n                }\n            });\n        }\n\n    }, {\n        template: 'boxmenu'\n    });\n\n    var BoxMenuItemView = MenuView.extend({\n\n        events: {\n            'click button' : 'onClickMenuItemButton'\n        },\n\n        attributes: function() {\n            return MenuView.prototype.resultExtend('attributes', {\n                'role': 'listitem',\n                'aria-labelledby': this.model.get('_id') + '-heading'\n            }, this);\n        },\n\n        className: function() {\n            var nthChild = this.model.get('_nthChild');\n            return [\n                'menu-item',\n                'menu-item-' + this.model.get('_id') ,\n                this.model.get('_classes'),\n                this.model.get('_isVisited') ? 'visited' : '',\n                this.model.get('_isComplete') ? 'completed' : '',\n                this.model.get('_isLocked') ? 'locked' : '',\n                'nth-child-' + nthChild,\n                nthChild % 2 === 0 ? 'nth-child-even' : 'nth-child-odd'\n            ].join(' ');\n        },\n\n        preRender: function() {\n            this.model.checkCompletionStatus();\n            this.model.checkInteractionCompletionStatus();\n        },\n\n        postRender: function() {\n            var graphic = this.model.get('_graphic');\n            if (graphic && graphic.src) {\n                this.$el.imageready(this.setReadyStatus.bind(this));\n                return;\n            }\n\n            this.setReadyStatus();\n        },\n\n        onClickMenuItemButton: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            if(this.model.get('_isLocked')) return;\n            Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});\n        }\n\n    }, {\n        template: 'boxmenu-item'\n    });\n\n    Adapt.on('router:menu', function(model) {\n\n        $('#wrapper').append(new BoxMenuView({model: model}).$el);\n\n    });\n\n});\n\n","define('theme/adapt-contrib-vanilla/js/theme-block',['require','coreJS/adapt','backbone'],function(require) {\n\t\n\tvar Adapt = require('coreJS/adapt');\n\tvar Backbone = require('backbone');\n\n\tvar ThemeBlockView = Backbone.View.extend({\n\n\t\tinitialize: function() {\n\t\t\tthis.setStyles();\n\t\t\tthis.listenTo(Adapt, 'device:resize', this.setStyles);\n\t\t\tthis.listenTo(Adapt, 'remove', this.remove);\n\t\t},\n\n\t\tsetStyles: function() {\n\t\t\tthis.setBackground();\n\t\t\tthis.setMinHeight();\n\t\t\tthis.setDividerBlock();\n\t\t},\n\n\t\tsetBackground: function() {\n\t\t\tvar backgroundColor = this.model.get('_themeBlockConfig')._backgroundColor;\n\t\t\t\n\t\t\tif (backgroundColor) {\n\t\t\t\tthis.$el.addClass(backgroundColor);\n\t\t\t}\n\t\t},\n\n\t\tsetMinHeight: function() {\n\t\t\tvar minHeight = 0;\n\t\t\tvar minHeights = this.model.get('_themeBlockConfig')._minimumHeights;\n\n\t\t\tif (minHeights) {\n\n\t\t\t\tif(Adapt.device.screenSize == 'large') {\n\t\t\t\t\tminHeight = minHeights._large;\n\t\t\t\t} else if (Adapt.device.screenSize == 'medium') {\n\t\t\t\t\tminHeight = minHeights._medium;\n\t\t\t\t} else {\n\t\t\t\t\tminHeight = minHeights._small;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$el.css({\n\t\t\t\tminHeight: minHeight + \"px\"\n\t\t\t});\n\t\t},\n\n\t\tsetDividerBlock: function() {\n\t\t\tvar dividerBlock = this.model.get('_themeBlockConfig')._isDividerBlock;\n\n\t\t\tif (dividerBlock) {\n\t\t\t\tthis.$el.addClass('divider-block');\n\t\t\t}\n\t\t}\n\t});\n\n\treturn ThemeBlockView;\n\t\n});\n\n","define('theme/adapt-contrib-vanilla/js/vanilla',['require','coreJS/adapt','backbone','theme/adapt-contrib-vanilla/js/theme-block'],function(require) {\n\t\n\tvar Adapt = require('coreJS/adapt');\n\tvar Backbone = require('backbone');\n\tvar ThemeBlock = require('theme/adapt-contrib-vanilla/js/theme-block');\n\n\t// Block View\n\t// ==========\n\n\tAdapt.on('blockView:postRender', function(view) {\n\t\tvar theme = view.model.get('_theme');\n\t\t\n\t\tif (theme) {\n\t\t\tnew ThemeBlock({\n\t\t\t\tmodel: new Backbone.Model({\n\t\t\t\t\t_themeBlockConfig: theme\n\t\t\t\t}),\n\t\t\t\tel: view.$el\n\t\t\t});\n\t\t}\n\t});\n});\n\n",";\ndefine(\"plugins\", [\"components/adapt-contrib-accordion/js/adapt-contrib-accordion\",\"components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults\",\"components/adapt-contrib-blank/js/adapt-contrib-blank\",\"components/adapt-contrib-gmcq/js/adapt-contrib-gmcq\",\"components/adapt-contrib-graphic/js/adapt-contrib-graphic\",\"components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic\",\"components/adapt-contrib-matching/js/adapt-contrib-matching\",\"components/adapt-contrib-mcq/js/adapt-contrib-mcq\",\"components/adapt-contrib-media/js/adapt-contrib-media\",\"components/adapt-contrib-narrative/js/adapt-contrib-narrative\",\"components/adapt-contrib-slider/js/adapt-contrib-slider\",\"components/adapt-contrib-text/js/adapt-contrib-text\",\"components/adapt-contrib-textInput/js/adapt-contrib-textInput\",\"extensions/adapt-contrib-assessment/js/adapt-assessmentArticleExtension\",\"extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking\",\"extensions/adapt-contrib-languagePicker/js/adapt-languagePicker\",\"extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress\",\"extensions/adapt-contrib-resources/js/adapt-contrib-resources\",\"extensions/adapt-contrib-trickle/js/adapt-contrib-trickle\",\"extensions/adapt-contrib-tutor/js/adapt-contrib-tutor\",\"menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu\",\"theme/adapt-contrib-vanilla/js/vanilla\"], function(){});\n\n","require([\r\n    'core/js/adapt',\r\n    'core/js/adaptCollection',\r\n    'core/js/startController',\r\n    'core/js/models/buildModel',\r\n    'core/js/models/articleModel',\r\n    'core/js/models/blockModel',\r\n    'core/js/models/configModel',\r\n    'core/js/models/contentObjectModel',\r\n    'core/js/models/componentModel',\r\n    'core/js/models/courseModel',\r\n    'core/js/models/questionModel',\r\n    'core/js/views/navigationView',\r\n    'core/js/accessibility',\r\n    'core/js/offlineStorage',\r\n    'core/js/logging',\r\n    'core/js/tracking',\r\n    'core/js/device',\r\n    'core/js/drawer',\r\n    'core/js/notify',\r\n    'core/js/popupManager',\r\n    'core/js/router',\r\n    'core/js/models/lockingModel',\r\n    'core/js/helpers',\r\n    'core/js/scrolling',\r\n    'core/js/headings',\r\n    'plugins'\r\n], function (Adapt, AdaptCollection, StartController, BuildModel, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel, NavigationView) {\r\n\r\n    // Append loading template and show\r\n    window.Handlebars = _.extend(require(\"handlebars\"), window.Handlebars);\r\n\r\n    var template = Handlebars.templates['loading'];\r\n    $('body').append(template());\r\n\r\n    Adapt.build = new BuildModel(null, {url: \"adapt/js/build.min.js\", reset:true});\r\n\r\n    // This function is called anytime a course object is loaded\r\n    // Once all course files are loaded trigger events and call Adapt.initialize\r\n    Adapt.checkDataIsLoaded = function(newLanguage) {\r\n        if (Adapt.contentObjects.models.length > 0 &&\r\n            Adapt.articles.models.length > 0 &&\r\n            Adapt.blocks.models.length > 0 &&\r\n            Adapt.components.models.length > 0 &&\r\n            Adapt.course.get('_id')) {\r\n\r\n            mapAdaptIdsToObjects();\r\n\r\n            Adapt.log.debug('Firing app:dataLoaded');\r\n\r\n            try {\r\n                Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js\r\n            } catch(e) {\r\n                Adapt.log.error('Error during app:dataLoading trigger', e);\r\n            }\r\n\r\n            Adapt.setupMapping();\r\n\r\n            Adapt.wait.queue(function() {\r\n                triggerDataReady(newLanguage);\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    function triggerDataReady(newLanguage) {\r\n        if (newLanguage) {\r\n\r\n            Adapt.trigger('app:languageChanged', newLanguage);\r\n\r\n            _.defer(function() {\r\n                var startController = new StartController();\r\n                var hash = '#/';\r\n\r\n                if (startController.isEnabled()) {\r\n                    hash = startController.getStartHash(true);\r\n                }\r\n\r\n                Backbone.history.navigate(hash, { trigger: true, replace: true });\r\n            });\r\n        }\r\n\r\n        Adapt.log.debug('Firing app:dataReady');\r\n\r\n        try {\r\n            Adapt.trigger('app:dataReady');\r\n        } catch(e) {\r\n            Adapt.log.error('Error during app:dataReady trigger', e);\r\n        }\r\n\r\n        Adapt.wait.queue(triggerInitialize);\r\n\r\n    }\r\n\r\n    function triggerInitialize() {\r\n        Adapt.log.debug('Calling Adapt.initialize');\r\n\r\n        addNavigationBar();\r\n\r\n        Adapt.initialize();\r\n\r\n        Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');\r\n    }\r\n\r\n    function addNavigationBar() {\r\n\r\n        var adaptConfig = Adapt.course.get(\"_navigation\");\r\n\r\n        if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {\r\n            Adapt.trigger(\"navigation:initialize\");\r\n            return;\r\n        }\r\n\r\n        Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation\r\n\r\n    }\r\n\r\n    function mapAdaptIdsToObjects () {\r\n        Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy(\"_id\");\r\n        Adapt.articles._byAdaptID = Adapt.articles.groupBy(\"_id\");\r\n        Adapt.blocks._byAdaptID = Adapt.blocks.groupBy(\"_id\");\r\n        Adapt.components._byAdaptID = Adapt.components.groupBy(\"_id\");\r\n    }\r\n\r\n    // This function is called when the config model triggers 'configModel:loadCourseData'\r\n    // Once the config model is loaded get the course files\r\n    // This enables plugins to tap in before the course files are loaded & also to change the default language\r\n    Adapt.loadCourseData = function(newLanguage) {\r\n        Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {\r\n            Adapt.checkDataIsLoaded(newLanguage);\r\n        });\r\n\r\n        // All code that needs to run before adapt starts should go here\r\n        var language = Adapt.config.get('_activeLanguage');\r\n        var jsonext = Adapt.build.get(\"jsonext\");\r\n        var courseFolder = \"course/\" + language +\"/\";\r\n\r\n        $('html').attr(\"lang\", language);\r\n\r\n        Adapt.course = new CourseModel(null, {url:courseFolder + \"course.\"+jsonext, reset:true});\r\n\r\n        Adapt.contentObjects = new AdaptCollection(null, {\r\n            model: ContentObjectModel,\r\n            url: courseFolder +\"contentObjects.\"+jsonext\r\n        });\r\n\r\n        Adapt.articles = new AdaptCollection(null, {\r\n            model: ArticleModel,\r\n            url: courseFolder + \"articles.\"+jsonext\r\n        });\r\n\r\n        Adapt.blocks = new AdaptCollection(null, {\r\n            model: BlockModel,\r\n            url: courseFolder + \"blocks.\"+jsonext\r\n        });\r\n\r\n        Adapt.components = new AdaptCollection(null, {\r\n            model: function(json) {\r\n\r\n                //use view+model object\r\n                var ViewModelObject = Adapt.componentStore[json._component];\r\n\r\n                if(!ViewModelObject) {\r\n                    throw new Error('One or more components of type \"'+json._component+'\" were included in the course - but no component of that type is installed...');\r\n                }\r\n\r\n                //if model defined for component use component model\r\n                if (ViewModelObject.model) {\r\n                    return new ViewModelObject.model(json);\r\n                }\r\n\r\n                var View = ViewModelObject.view || ViewModelObject;\r\n                //if question type use question model\r\n                if (View._isQuestionType) {\r\n                    return new QuestionModel(json);\r\n                }\r\n\r\n                //otherwise use component model\r\n                return new ComponentModel(json);\r\n            },\r\n            url: courseFolder + \"components.\"+jsonext\r\n        });\r\n    };\r\n\r\n    function onLanguageChange(model, language) {\r\n        Adapt.offlineStorage.set('lang', language);\r\n        Adapt.loadCourseData(language);\r\n    }\r\n\r\n    function onDirectionChange(model, direction) {\r\n        if (direction === 'rtl') {\r\n            $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');\r\n        } else {\r\n            $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Before we actually go to load the course data, we first need to check to see if a language has been set\r\n    * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json\r\n    */\r\n    function onLoadCourseData() {\r\n        if (Adapt.config.get('_activeLanguage')) {\r\n            Adapt.loadCourseData();\r\n        } else {\r\n            Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));\r\n        }\r\n    }\r\n\r\n    function onBuildDataLoaded() {\r\n        $('html').attr(\"data-adapt-framework-version\", Adapt.build.get('package').version);\r\n        Adapt.config = new ConfigModel(null, {url: \"course/config.\"+Adapt.build.get(\"jsonext\"), reset:true});\r\n        Adapt.config.on({\r\n            'change:_activeLanguage': onLanguageChange,\r\n            'change:_defaultDirection': onDirectionChange\r\n        });\r\n\r\n        // Events that are triggered by the main Adapt content collections and models\r\n        Adapt.once('configModel:loadCourseData', onLoadCourseData);\r\n\r\n    }\r\n\r\n    Adapt.once('buildModel:dataLoaded', onBuildDataLoaded);\r\n\r\n});\r\n\ndefine(\"core/js/app\", function(){});\n\n"]}