require(['bowser', 'libraries/mediaelement-and-player', 'libraries/rangeslider', 'handlebars'], function (Bowser, mediaelementAndPlayer, rangeslider, Handlebars$1) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var Bowser__default = /*#__PURE__*/_interopDefaultLegacy(Bowser);
  var Handlebars__default = /*#__PURE__*/_interopDefaultLegacy(Handlebars$1);

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _readOnlyError(name) {
    throw new Error("\"" + name + "\" is read-only");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var Wait = __AMD("core/js/wait", function (_Backbone$Controller) {
    _inherits(Wait, _Backbone$Controller);

    var _super = _createSuper(Wait);

    function Wait() {
      _classCallCheck(this, Wait);

      return _super.apply(this, arguments);
    }

    _createClass(Wait, [{
      key: "initialize",
      value: function initialize() {
        this._waitCount = 0;
        this._callbackHandle = null;
        this.being = this.begin.bind(this);
        this.end = this.end.bind(this);
      }
    }, {
      key: "isWaiting",
      value: function isWaiting() {
        return this._waitCount !== 0;
      }
    }, {
      key: "begin",
      value: function begin() {
        if (!this.isWaiting()) this.trigger('wait');
        this._waitCount++;

        if (this._callbackHandle) {
          clearTimeout(this._callbackHandle);
          this._callbackHandle = null;
        }

        return this;
      }
    }, {
      key: "end",
      value: function end() {
        if (!this.isWaiting()) return this;
        this._waitCount--;
        if (this.isWaiting() || this._callbackHandle) return this;
        this._callbackHandle = setTimeout(function () {
          this._callbackHandle = null;
          this.trigger('ready');
        }.bind(this), 0);
        return this;
      }
    }, {
      key: "queue",
      value: function queue(callback) {
        var _this = this;

        if (!callback) {
          this.begin();
          return new Promise(function (resolve) {
            _this.once('ready', resolve);

            _this.end();
          });
        }

        this.begin();
        this.once('ready', callback);
        this.end();
        return this;
      }
    }, {
      key: "for",
      value: function _for(callback) {
        var _this2 = this;

        this.begin();

        _.defer(function () {
          return callback(_.once(_this2.end));
        });

        return this;
      }
    }]);

    return Wait;
  }(Backbone.Controller));

  var LockingModel = __AMD("core/js/models/lockingModel", function (_Backbone$Model) {
    _inherits(LockingModel, _Backbone$Model);

    var _super = _createSuper(LockingModel);

    function LockingModel() {
      _classCallCheck(this, LockingModel);

      return _super.apply(this, arguments);
    }

    _createClass(LockingModel, [{
      key: "set",
      value: function set(attrName, attrVal) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var stopProcessing = _typeof(attrName) === 'object' || typeof attrVal !== 'boolean' || !this.isLocking(attrName);
        if (stopProcessing) return _get(_getPrototypeOf(LockingModel.prototype), "set", this).apply(this, arguments);
        var isSettingValueForSpecificPlugin = options && options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to change a locked attribute');
          options.pluginName = 'compatibility';
        }

        var pluginName = options.pluginName;

        if (this.defaults[attrName] !== undefined) {
          this._lockedAttributes[attrName] = !this.defaults[attrName];
        }

        var lockingValue = this._lockedAttributes[attrName];
        var isAttemptingToLock = lockingValue === attrVal;

        if (isAttemptingToLock) {
          this.setLockState(attrName, true, {
            pluginName: pluginName,
            skipcheck: true
          });
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, lockingValue);
        }

        this.setLockState(attrName, false, {
          pluginName: pluginName,
          skipcheck: true
        });
        var totalLockValue = this.getLockCount(attrName, {
          skipcheck: true
        });

        if (totalLockValue === 0) {
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, !lockingValue);
        }

        return this;
      }
    }, {
      key: "setLocking",
      value: function setLocking(attrName, defaultLockValue) {
        if (this.isLocking(attrName)) return;
        if (!this._lockedAttributes) this._lockedAttributes = {};
        this._lockedAttributes[attrName] = defaultLockValue;
      }
    }, {
      key: "unsetLocking",
      value: function unsetLocking(attrName) {
        if (!this.isLocking(attrName)) return;
        if (!this._lockedAttributes) return;
        delete this._lockedAttributes[attrName];
        delete this._lockedAttributesValues[attrName];

        if (Object.keys(this._lockedAttributes).length === 0) {
          delete this._lockedAttributes;
          delete this._lockedAttributesValues;
        }
      }
    }, {
      key: "isLocking",
      value: function isLocking(attrName) {
        var isCheckingGeneralLockingState = attrName === undefined;
        var isUsingLockedAttributes = Boolean(this.lockedAttributes || this._lockedAttributes);

        if (isCheckingGeneralLockingState) {
          return isUsingLockedAttributes;
        }

        if (!isUsingLockedAttributes) return false;

        if (!this._lockedAttributes) {
          this._lockedAttributes = _.result(this, 'lockedAttributes');
        }

        var isAttributeALockingAttribute = this._lockedAttributes.hasOwnProperty(attrName);

        if (!isAttributeALockingAttribute) return false;

        if (!this._lockedAttributesValues) {
          this._lockedAttributesValues = {};
        }

        if (!this._lockedAttributesValues[attrName]) {
          this._lockedAttributesValues[attrName] = {};
        }

        return true;
      }
    }, {
      key: "isLocked",
      value: function isLocked(attrName, options) {
        var shouldSkipCheck = options && options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        return this.getLockCount(attrName) > 0;
      }
    }, {
      key: "getLockCount",
      value: function getLockCount(attrName, options) {
        var shouldSkipCheck = options && options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        var isGettingValueForSpecificPlugin = options && options.pluginName;

        if (isGettingValueForSpecificPlugin) {
          return this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;
        }

        var lockingAttributeValues = Object.values(this._lockedAttributesValues[attrName]);
        var lockingAttributeValuesSum = lockingAttributeValues.reduce(function (sum, value) {
          return sum + (value ? 1 : 0);
        }, 0);
        return lockingAttributeValuesSum;
      }
    }, {
      key: "setLockState",
      value: function setLockState(attrName, value, options) {
        var shouldSkipCheck = options && options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return this;
        }

        var isSettingValueForSpecificPlugin = options && options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to set a locked attribute lock value');
          options.pluginName = 'compatibility';
        }

        if (value) {
          this._lockedAttributesValues[attrName][options.pluginName] = value;
        } else {
          delete this._lockedAttributesValues[attrName][options.pluginName];
        }

        return this;
      }
    }]);

    return LockingModel;
  }(Backbone.Model));

  var AdaptSingleton = function (_LockingModel) {
    _inherits(AdaptSingleton, _LockingModel);

    var _super = _createSuper(AdaptSingleton);

    function AdaptSingleton() {
      _classCallCheck(this, AdaptSingleton);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSingleton, [{
      key: "initialize",
      value: function initialize() {
        this.loadScript = window.__loadScript;
        this.location = {};
        this.store = {};
        this.setupWait();
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canScroll: true,
          _outstandingCompletionChecks: 0,
          _pluginWaitCount: 0,
          _isStarted: false,
          _shouldDestroyContentObjects: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canScroll: false
        };
      }
    }, {
      key: "init",
      value: function init() {
        var _this = this;

        this.addDirection();
        this.disableAnimation();
        this.trigger('adapt:preInitialize');
        this.deferUntilCompletionChecked(function () {
          _this.trigger('adapt:start');

          if (!Backbone.History.started) {
            Backbone.history.start();
          }

          _this.set('_isStarted', true);

          _this.trigger('adapt:initialize');
        });
      }
    }, {
      key: "checkingCompletion",
      value: function checkingCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks + 1);
      }
    }, {
      key: "checkedCompletion",
      value: function checkedCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks - 1);
      }
    }, {
      key: "deferUntilCompletionChecked",
      value: function () {
        var _deferUntilCompletionChecked = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var _this2 = this;

          var callback,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  callback = _args.length > 0 && _args[0] !== undefined ? _args[0] : function () {};

                  if (!(this.get('_outstandingCompletionChecks') === 0)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return", callback());

                case 3:
                  return _context.abrupt("return", new Promise(function (resolve) {
                    var checkIfAnyChecksOutstanding = function (model, outstandingChecks) {
                      if (outstandingChecks !== 0) return;

                      _this2.off('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

                      callback();
                      resolve();
                    };

                    _this2.on('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);
                  }));

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function deferUntilCompletionChecked() {
          return _deferUntilCompletionChecked.apply(this, arguments);
        }

        return deferUntilCompletionChecked;
      }()
    }, {
      key: "setupWait",
      value: function setupWait() {
        var _this3 = this;

        this.wait = new Wait();

        var beginWait = function () {
          _this3.log.deprecated("Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future");

          _this3.wait.begin();
        };

        var endWait = function () {
          _this3.log.deprecated("Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future");

          _this3.wait.end();
        };

        var ready = function () {
          if (_this3.wait.isWaiting()) {
            return;
          }

          var isEventListening = _this3._events['plugins:ready'];

          if (!isEventListening) {
            return;
          }

          _this3.log.deprecated("Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future");

          _this3.trigger('plugins:ready');
        };

        this.listenTo(this.wait, 'ready', ready);
        this.listenTo(this, {
          'plugin:beginWait': beginWait,
          'plugin:endWait': endWait
        });
      }
    }, {
      key: "isWaitingForPlugins",
      value: function isWaitingForPlugins() {
        this.log.deprecated('Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future');
        return this.wait.isWaiting();
      }
    }, {
      key: "checkPluginsReady",
      value: function checkPluginsReady() {
        this.log.deprecated('Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future');

        if (this.isWaitingForPlugins()) {
          return;
        }

        this.trigger('plugins:ready');
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function navigateToElement() {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function scrollTo() {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }, {
      key: "register",
      value: function register(name, object) {
        var _this4 = this;

        if (Array.isArray(name)) {
          name.forEach(function (name) {
            return _this4.register(name, object);
          });
          return object;
        }

        if (name.split(' ').length > 1) {
          this.register(name.split(' '), object);
          return object;
        }

        if (!object.view && !object.model || object instanceof Backbone.View) {
          this.log && this.log.deprecated('View-only registrations are no longer supported');
          object = {
            view: object
          };
        }

        if (object.view && !object.view.template) {
          object.view.template = name;
        }

        var isModelSetAndInvalid = object.model && !(object.model.prototype instanceof Backbone.Model) && !(object.model instanceof Function);

        if (isModelSetAndInvalid) {
          throw new Error('The registered model is not a Backbone.Model or Function');
        }

        var isViewSetAndInvalid = object.view && !(object.view.prototype instanceof Backbone.View) && !(object.view instanceof Function);

        if (isViewSetAndInvalid) {
          throw new Error('The registered view is not a Backbone.View or Function');
        }

        this.store[name] = Object.assign({}, this.store[name], object);
        return object;
      }
    }, {
      key: "getViewName",
      value: function getViewName(nameModelViewOrData) {
        var _this5 = this;

        if (typeof nameModelViewOrData === 'string') {
          return nameModelViewOrData;
        }

        if (nameModelViewOrData instanceof Backbone.Model) {
          nameModelViewOrData = nameModelViewOrData.toJSON();
        }

        if (nameModelViewOrData instanceof Backbone.View) {
          var foundName;
          Object.entries(this.store).forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                key = _ref2[0],
                entry = _ref2[1];

            if (!entry || !entry.view) return;
            if (!(nameModelViewOrData instanceof entry.view)) return;
            foundName = key;
            return true;
          });
          return foundName;
        }

        if (nameModelViewOrData instanceof Object) {
          var names = [typeof nameModelViewOrData._view === 'string' && nameModelViewOrData._view, typeof nameModelViewOrData._component === 'string' && nameModelViewOrData._component, typeof nameModelViewOrData._type === 'string' && nameModelViewOrData._type].filter(Boolean);

          if (names.length) {
            var name = names.find(function (name) {
              return _this5.store[name] && _this5.store[name].view;
            });
            return name || names.pop();
          }
        }

        throw new Error('Cannot derive view class name from input');
      }
    }, {
      key: "getViewClass",
      value: function getViewClass(nameModelViewOrData) {
        var name = this.getViewName(nameModelViewOrData);
        var object = this.store[name];

        if (!object) {
          this.log.warnOnce("A view for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneView = object.view && object.view.prototype instanceof Backbone.View;

        if (!isBackboneView && object.view instanceof Function) {
          return object.view();
        }

        return object.view;
      }
    }, {
      key: "getModelName",
      value: function getModelName(nameModelOrData) {
        var _this6 = this;

        if (typeof nameModelOrData === 'string') {
          return nameModelOrData;
        }

        if (nameModelOrData instanceof Backbone.Model) {
          nameModelOrData = nameModelOrData.toJSON();
        }

        if (nameModelOrData instanceof Object) {
          var name = nameModelOrData._component;
          var entry = this.store[name];
          var isViewOnlyQuestion = entry && !entry.model && entry.view && entry.view._isQuestionType;

          if (isViewOnlyQuestion) {
            this.log && this.log.deprecated("Assuming a question model for a view-only question: ".concat(name));
            return 'question';
          }

          var names = [typeof nameModelOrData._model === 'string' && nameModelOrData._model, typeof nameModelOrData._component === 'string' && nameModelOrData._component, typeof nameModelOrData._type === 'string' && nameModelOrData._type].filter(Boolean);

          if (names.length) {
            var _name = names.find(function (name) {
              return _this6.store[name] && _this6.store[name].model;
            });

            return _name || names.pop();
          }
        }

        throw new Error('Cannot derive model class name from input');
      }
    }, {
      key: "getModelClass",
      value: function getModelClass(nameModelOrData) {
        var name = this.getModelName(nameModelOrData);
        var object = this.store[name];

        if (!object) {
          this.log.warnOnce("A model for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneModel = object.model && object.model.prototype instanceof Backbone.Model;

        if (!isBackboneModel && object.model instanceof Function) {
          return object.model();
        }

        return object.model;
      }
    }, {
      key: "findById",
      value: function findById(id) {
        return this.data.findById(id);
      }
    }, {
      key: "findViewByModelId",
      value: function findViewByModelId(id) {
        var model = this.data.findById(id);
        if (!model) return;
        if (model === this.parentView.model) return this.parentView;
        var idPathToView = [id];
        var currentLocationId = this.location._currentId;
        var currentLocationModel = model.getAncestorModels().find(function (model) {
          var modelId = model.get('_id');
          if (modelId === currentLocationId) return true;
          idPathToView.unshift(modelId);
        });

        if (!currentLocationModel) {
          return console.warn("Adapt.findViewByModelId() unable to find view for model id: ".concat(id));
        }

        var foundView = idPathToView.reduce(function (view, currentId) {
          if (!view) return;
          var childViews = view.getChildViews();
          return childViews && childViews.find(function (view) {
            return view.model.get('_id') === currentId;
          });
        }, this.parentView);
        return foundView;
      }
    }, {
      key: "parseRelativeString",
      value: function parseRelativeString(relativeString) {
        var splitIndex = relativeString.search(/[ +\-\d]{1}/);
        var type = relativeString.slice(0, splitIndex).replace(/^@/, '');
        var offset = parseInt(relativeString.slice(splitIndex).trim() || 0);
        return {
          type: type,
          offset: offset
        };
      }
    }, {
      key: "addDirection",
      value: function addDirection() {
        var defaultDirection = this.config.get('_defaultDirection');
        $('html').addClass('dir-' + defaultDirection).attr('dir', defaultDirection);
      }
    }, {
      key: "disableAnimation",
      value: function disableAnimation() {
        var disableAnimationArray = this.config.get('_disableAnimationFor');
        var disableAnimation = this.config.get('_disableAnimation');

        if (disableAnimationArray) {
          for (var i = 0, l = disableAnimationArray.length; i < l; i++) {
            if (!$('html').is(disableAnimationArray[i])) continue;
            this.config.set('_disableAnimation', true);
            $('html').addClass('disable-animation');
            console.log('Animation disabled.');
          }

          return;
        }

        $('html').toggleClass('disable-animation', disableAnimation === true);
      }
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var currentView;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  currentView = this.parentView;

                  if (currentView) {
                    currentView.model.setOnChildren({
                      '_isReady': false,
                      '_isRendered': false
                    });
                  }

                  this.trigger('preRemove', currentView);
                  _context4.next = 5;
                  return this.wait.queue();

                case 5:
                  if (currentView && this.get('_shouldDestroyContentObjects')) {
                    currentView.destroy();
                  }

                  this.trigger('remove', currentView);

                  _.defer(this.trigger.bind(this), 'postRemove', currentView);

                case 8:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function remove() {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: "componentStore",
      get: function () {
        this.log && this.log.deprecated('Adapt.componentStore, please use Adapt.store instead');
        return this.store;
      }
    }]);

    return AdaptSingleton;
  }(LockingModel);

  var Adapt = __AMD("core/js/adapt", new AdaptSingleton());

  var TemplateRenderEvent = __AMD("core/js/templateRenderEvent", function (_Backbone$Controller) {
    _inherits(TemplateRenderEvent, _Backbone$Controller);

    var _super = _createSuper(TemplateRenderEvent);

    function TemplateRenderEvent() {
      _classCallCheck(this, TemplateRenderEvent);

      return _super.apply(this, arguments);
    }

    _createClass(TemplateRenderEvent, [{
      key: "initialize",
      value: function initialize(type, name, mode, value, args) {
        this.type = type;
        this.name = name;
        this.mode = mode;
        this.value = value;
        this.args = args;
      }
    }]);

    return TemplateRenderEvent;
  }(Backbone.Controller));

  function onRender(cb) {
    var intercept = function (object, name, mode, cb) {
      return object[name] = cb.bind(object, object[name], name, mode);
    };

    Object.keys(Handlebars.templates).forEach(function (name) {
      intercept(Handlebars.templates, name, 'template', cb);
    });
    Object.keys(Handlebars.partials).forEach(function (name) {
      intercept(Handlebars.partials, name, 'partial', cb);
    });
  }

  onRender(function (template, name, mode) {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
    Adapt.trigger(preRenderEvent.type, preRenderEvent);
    var value = template.apply(void 0, _toConsumableArray(preRenderEvent.args));
    var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
    Adapt.trigger(postRenderEvent.type, postRenderEvent);
    return postRenderEvent.value;
  });

  Adapt.on('app:dataReady', function () {
    var config = Adapt.config.get('_fixes');
    if (config && config._imgLazyLoad === false) return;
    applyImgLoadingFix();
  });

  function applyImgLoadingFix() {
    var findImgTag = /<img([^>]*)>/gi;
    var hasLoadingAttr = / loading=/gi;
    Adapt.on('template:postRender partial:postRender', function (event) {
      var imgTagsFound = event.value.match(findImgTag);

      if (!imgTagsFound) {
        return;
      }

      event.value = imgTagsFound.reduce(function (value, img) {
        if (hasLoadingAttr.test(img)) {
          return value;
        }

        return value.replace(img, img.replace(findImgTag, '<img loading="eager"$1>'));
      }, event.value);
    });
  }

  var BrowserFocus = __AMD("core/js/a11y/browserFocus", function (_Backbone$Controller) {
    _inherits(BrowserFocus, _Backbone$Controller);

    var _super = _createSuper(BrowserFocus);

    function BrowserFocus() {
      _classCallCheck(this, BrowserFocus);

      return _super.apply(this, arguments);
    }

    _createClass(BrowserFocus, [{
      key: "initialize",
      value: function initialize() {
        this._onBlur = this._onBlur.bind(this);
        this._onClick = this._onClick.bind(this);
        this.$body = $('body');
        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        this.$body.on('blur', '*', this._onBlur).on('blur', this._onBlur);
        this.$body[0].addEventListener('click', this._onClick, true);
      }
    }, {
      key: "_onBlur",
      value: function _onBlur(event) {
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isFocusNextOnDisabled) {
          return;
        }

        var $element = $(event.target);

        if ($element.is('[data-a11y-force-focus]')) {
          _.defer(function () {
            return $element.removeAttr('tabindex data-a11y-force-focus');
          });
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        if (!$element.is('[disabled]')) {
          return;
        }

        Adapt.a11y.focusNext($element);
      }
    }, {
      key: "_onClick",
      value: function _onClick(event) {
        var $element = $(event.target);

        if ($element.is('[aria-disabled=true]')) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }

        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isFocusOnClickEnabled) {
          return;
        }

        var $stack = $().add($element).add($element.parents());
        var $focusable = $stack.filter(config._options._tabbableElements);

        if (!$focusable.length) {
          return;
        }

        $focusable[0].focus();
      }
    }]);

    return BrowserFocus;
  }(Backbone.Controller));

  var FocusOptions = __AMD("core/js/a11y/focusOptions", function FocusOptions() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$preventScroll = _ref.preventScroll,
        preventScroll = _ref$preventScroll === void 0 ? false : _ref$preventScroll,
        _ref$defer = _ref.defer,
        defer = _ref$defer === void 0 ? false : _ref$defer;

    _classCallCheck(this, FocusOptions);

    this.preventScroll = preventScroll;
    this.defer = defer;
  });

  var KeyboardFocusOutline = __AMD("core/js/a11y/keyboardFocusOutline", function (_Backbone$Controller) {
    _inherits(KeyboardFocusOutline, _Backbone$Controller);

    var _super = _createSuper(KeyboardFocusOutline);

    function KeyboardFocusOutline() {
      _classCallCheck(this, KeyboardFocusOutline);

      return _super.apply(this, arguments);
    }

    _createClass(KeyboardFocusOutline, [{
      key: "initialize",
      value: function initialize() {
        this._onKeyDown = this._onKeyDown.bind(this);
        this.$html = $('html');
        this.showOnKeys = {
          9: true,
          13: true,
          32: true,
          37: true,
          38: true,
          39: true,
          40: true
        };
        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        document.addEventListener('keydown', this._onKeyDown);

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        var config = Adapt.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled) {
          return;
        }

        this.$html.addClass('a11y-disable-focusoutline');
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        var config = Adapt.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled || !this.showOnKeys[event.keyCode]) {
          return;
        }

        var $element = $(event.target);

        if (!$element.is(config._options._tabbableElements) || $element.is(config._options._focusOutlineKeyboardOnlyIgnore)) {
          return;
        }

        this.$html.removeClass('a11y-disable-focusoutline');
      }
    }]);

    return KeyboardFocusOutline;
  }(Backbone.Controller));

  var Log = __AMD("core/js/a11y/log", function (_Backbone$Controller) {
    _inherits(Log, _Backbone$Controller);

    var _super = _createSuper(Log);

    function Log() {
      _classCallCheck(this, Log);

      return _super.apply(this, arguments);
    }

    _createClass(Log, [{
      key: "initialize",
      value: function initialize() {
        this._warned = {};
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        var config = Adapt.a11y.config;

        if (!config._options._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }, {
      key: "_canWarn",
      value: function _canWarn() {
        var config = Adapt.a11y.config;
        return Boolean(config._options._warn);
      }
    }, {
      key: "removed",
      value: function removed() {
        var _Adapt$log;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        (_Adapt$log = Adapt.log).removed.apply(_Adapt$log, _toConsumableArray(args));

        return this;
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        var _Adapt$log2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        (_Adapt$log2 = Adapt.log).deprecated.apply(_Adapt$log2, _toConsumableArray(args));

        return this;
      }
    }]);

    return Log;
  }(Backbone.Controller));

  var Scroll = __AMD("core/js/a11y/scroll", function (_Backbone$Controller) {
    _inherits(Scroll, _Backbone$Controller);

    var _super = _createSuper(Scroll);

    function Scroll() {
      _classCallCheck(this, Scroll);

      return _super.apply(this, arguments);
    }

    _createClass(Scroll, [{
      key: "initialize",
      value: function initialize() {
        this._onTouchStart = this._onTouchStart.bind(this);
        this._onTouchEnd = this._onTouchEnd.bind(this);
        this._onScrollEvent = this._onScrollEvent.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._scrollDisabledElements = $([]);
        this.$window = $(window);
        this.$body = $('body');
        this._preventScrollOnKeys = {
          37: true,
          38: true,
          39: true,
          40: true
        };
        this._ignoreKeysOnElementsMatching = 'textarea, input, select';
        this._isRunning = false;
        this._touchStartEventObject = null;
      }
    }, {
      key: "disable",
      value: function disable($elements) {
        $elements = $($elements);
        this._scrollDisabledElements = this._scrollDisabledElements.add($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "enable",
      value: function enable($elements) {
        $elements = $($elements);

        if (!$elements || !$elements.length) {
          this.clear();
          return this;
        }

        this._scrollDisabledElements = this._scrollDisabledElements.not($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this._scrollDisabledElements = $([]);

        this._checkRunning();

        return this;
      }
    }, {
      key: "_checkRunning",
      value: function _checkRunning() {
        if (!this._scrollDisabledElements.length) {
          this._stop();

          return;
        }

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        if (this._isRunning) {
          return;
        }

        this._isRunning = true;
        window.addEventListener('touchstart', this._onTouchStart);
        window.addEventListener('touchend', this._onTouchEnd);
        window.addEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('keydown', this._onKeyDown);
      }
    }, {
      key: "_onTouchStart",
      value: function _onTouchStart(event) {
        event = $.event.fix(event);
        this._touchStartEventObject = event;
        return true;
      }
    }, {
      key: "_onTouchEnd",
      value: function _onTouchEnd() {
        this._touchStartEventObject = null;
        return true;
      }
    }, {
      key: "_onScrollEvent",
      value: function _onScrollEvent(event) {
        event = $.event.fix(event);
        return this._preventScroll(event);
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        event = $.event.fix(event);

        if (!this._preventScrollOnKeys[event.keyCode]) {
          return;
        }

        var $target = $(event.target);

        if ($target.is(this._ignoreKeysOnElementsMatching)) {
          return;
        }

        return this._preventScroll(event);
      }
    }, {
      key: "_preventScroll",
      value: function _preventScroll(event) {
        var isGesture = event.touches && event.touches.length > 1;

        if (isGesture) {
          return;
        }

        var $target = $(event.target);

        if (this._scrollDisabledElements.length) {
          var scrollingParent = this._getScrollingParent(event, $target);

          if (scrollingParent.filter(this._scrollDisabledElements).length === 0) {
            this.$window.scroll();
            return;
          }
        }

        event.preventDefault();
        return false;
      }
    }, {
      key: "_getScrollingParent",
      value: function _getScrollingParent(event, $target) {
        var isTouchEvent = event.type === 'touchmove';
        var hasTouchStartEvent = this._touchStartEventObject && this._touchStartEventObject.originalEvent;

        if (isTouchEvent && !hasTouchStartEvent) {
          return $target;
        }

        var directionY = this._getScrollDirection(event);

        if (directionY === 'none') {
          return this.$body;
        }

        var parents = $target.parents();

        for (var i = 0, l = parents.length; i < l; i++) {
          var $parent = $(parents[i]);

          if ($parent.is('body')) {
            return this.$body;
          }

          if (!this._isScrollable($parent)) {
            continue;
          }

          if (!this._isScrolling($parent, directionY)) {
            continue;
          }

          return $parent;
        }

        return this.$body;
      }
    }, {
      key: "_isScrollable",
      value: function _isScrollable($target) {
        var scrollType = $target.css('overflow-y');

        if (scrollType !== 'auto' && scrollType !== 'scroll') {
          return false;
        }

        var pointerEvents = $target.css('pointer-events');

        if (pointerEvents === 'none') {
          return false;
        }

        return true;
      }
    }, {
      key: "_isScrolling",
      value: function _isScrolling($target, directionY) {
        var scrollTop = Math.ceil($target.scrollTop());
        var innerHeight = $target.outerHeight();
        var scrollHeight = $target[0].scrollHeight;
        var hasScrollingSpace = false;

        switch (directionY) {
          case 'down':
            hasScrollingSpace = scrollTop + innerHeight < scrollHeight;

            if (hasScrollingSpace) {
              return true;
            }

            break;

          case 'up':
            hasScrollingSpace = scrollTop > 0;

            if (hasScrollingSpace) {
              return true;
            }

            break;
        }

        return false;
      }
    }, {
      key: "_getScrollDirection",
      value: function _getScrollDirection(event) {
        var deltaY = this._getScrollDelta(event);

        if (deltaY === 0) {
          return 'none';
        }

        return deltaY > 0 ? 'up' : 'down';
      }
    }, {
      key: "_getScrollDelta",
      value: function _getScrollDelta(event) {
        var deltaY = 0;
        var isTouchEvent = event.type === 'touchmove';
        var originalEvent = event.originalEvent;

        if (isTouchEvent) {
          var startOriginalEvent = this._touchStartEventObject.originalEvent;
          var currentY = originalEvent.pageY;
          var previousY = startOriginalEvent.pageY;

          if (currentY === 0 || currentY === previousY) {
            currentY = originalEvent.touches[0].pageY;
            previousY = startOriginalEvent.touches[0].pageY;
          }

          deltaY = currentY - previousY;
        } else {
          var hasDeltaY = originalEvent.wheelDeltaY || originalEvent.deltaY !== undefined;

          if (hasDeltaY) {
            deltaY = -originalEvent.deltaY;
          } else {
            deltaY = originalEvent.wheelDelta || 0;
          }
        }

        return deltaY;
      }
    }, {
      key: "_stop",
      value: function _stop() {
        if (!this._isRunning) {
          return;
        }

        this._isRunning = false;
        window.removeEventListener('touchstart', this._onTouchStart);
        window.removeEventListener('touchend', this._onTouchEnd);
        window.removeEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('keydown', this._onKeyDown);
      }
    }]);

    return Scroll;
  }(Backbone.Controller));

  var WrapFocus = __AMD("core/js/a11y/wrapFocus", function (_Backbone$Controller) {
    _inherits(WrapFocus, _Backbone$Controller);

    var _super = _createSuper(WrapFocus);

    function WrapFocus() {
      _classCallCheck(this, WrapFocus);

      return _super.apply(this, arguments);
    }

    _createClass(WrapFocus, [{
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, '_onWrapAround');

        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        var config = Adapt.a11y.config;
        $('body').on('click focus', config._options._focusguard, this._onWrapAround);
      }
    }, {
      key: "_onWrapAround",
      value: function _onWrapAround(event) {
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupWrapFocusEnabled) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();
        Adapt.a11y.focusFirst('body', {
          defer: false
        });
      }
    }]);

    return WrapFocus;
  }(Backbone.Controller));

  var Popup = __AMD("core/js/a11y/popup", function (_Backbone$Controller) {
    _inherits(Popup, _Backbone$Controller);

    var _super = _createSuper(Popup);

    function Popup() {
      _classCallCheck(this, Popup);

      return _super.apply(this, arguments);
    }

    _createClass(Popup, [{
      key: "initialize",
      value: function initialize() {
        this._floorStack = [$('body')];
        this._focusStack = [];
        this._tabIndexes = {};
        this._ariaHiddens = {};
        this._elementUIDIndex = 0;
        this.listenTo(Adapt, {
          'popup:opened': function ($element, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            Adapt.a11y.log.deprecated('Adapt.trigger("popup:opened", $element) is replaced with Adapt.a11y.popupOpened($element);');
            this.opened($element, true);
          },
          'popup:closed': function ($target, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            Adapt.a11y.log.deprecated('Adapt.trigger("popup:closed", $target) is replaced with Adapt.a11y.popupClosed($target);');
            this.closed($target, true);
          }
        });
      }
    }, {
      key: "opened",
      value: function opened($popupElement, silent) {
        $popupElement = $popupElement || $(document.activeElement);

        this._addPopupLayer($popupElement);

        if (!silent) {
          Adapt.trigger('popup:opened', $popupElement, true);
        }

        return this;
      }
    }, {
      key: "_addPopupLayer",
      value: function _addPopupLayer($popupElement) {
        var _this = this;

        $popupElement = $($popupElement);
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled || $popupElement.length === 0) {
          return $popupElement;
        }

        this._floorStack.push($popupElement);

        this._focusStack.push($(document.activeElement));

        var $elements = $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
        var $branch = $popupElement.add($popupElement.parents());
        var $siblings = $branch.siblings().filter(config._options._tabbableElementsExcludes);
        $elements = $elements.add($siblings);
        $elements.each(function (index, item) {
          var $item = $(item);
          var elementUID;

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this._elementUIDIndex;
          }

          elementUID = item.a11y_uid;

          if (_this._tabIndexes[elementUID] === undefined) {
            _this._tabIndexes[elementUID] = [];
          }

          if (_this._ariaHiddens[elementUID] === undefined) {
            _this._ariaHiddens[elementUID] = [];
          }

          var tabindex = $item.attr('tabindex');
          var ariaHidden = $item.attr('aria-hidden');

          _this._tabIndexes[elementUID].push(tabindex === undefined ? '' : tabindex);

          _this._ariaHiddens[elementUID].push(ariaHidden === undefined ? '' : ariaHidden);

          if (config._options._isPopupTabIndexManagementEnabled) {
            $item.attr('tabindex', -1);
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            $item.attr('aria-hidden', true);
          }
        });
        var $items = $popupElement.find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);

        if (config._options._isPopupTabIndexManagementEnabled) {
          $items.attr('tabindex', 0);
        }

        if (config._options._isPopupAriaHiddenManagementEnabled) {
          $items.removeAttr('aria-hidden').removeClass('aria-hidden').parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }
      }
    }, {
      key: "closed",
      value: function closed($focusElement, silent) {
        var $previousFocusElement = this._removeLastPopupLayer();

        $focusElement = $focusElement || $previousFocusElement || $('body');

        if (!silent) {
          Adapt.trigger('popup:closed', $focusElement, true);
        }

        Adapt.a11y.focusFirst($($focusElement));
        return this;
      }
    }, {
      key: "_removeLastPopupLayer",
      value: function _removeLastPopupLayer() {
        var _this2 = this;

        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled) {
          return $(document.activeElement);
        }

        if (this._floorStack.length <= 1) {
          return;
        }

        this._floorStack.pop();

        $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes).each(function (index, item) {
          var $item = $(item);
          var previousTabIndex = '';
          var previousAriaHidden = '';
          var elementUID;

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this2._elementUIDIndex;
          }

          elementUID = item.a11y_uid;

          if (_this2._tabIndexes[elementUID] !== undefined && _this2._tabIndexes[elementUID].length !== 0) {
            previousTabIndex = _this2._tabIndexes[elementUID].pop();
            previousAriaHidden = _this2._ariaHiddens[elementUID].pop();
          }

          if (_this2._tabIndexes[elementUID] !== undefined && _this2._tabIndexes[elementUID].length === 0) {
            delete _this2._tabIndexes[elementUID];
            delete _this2._ariaHiddens[elementUID];
          }

          if (config._options._isPopupTabIndexManagementEnabled) {
            if (previousTabIndex === '') {
              $item.removeAttr('tabindex');
            } else {
              $item.attr({
                'tabindex': previousTabIndex
              });
            }
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            if (previousAriaHidden === '') {
              $item.removeAttr('aria-hidden');
            } else {
              $item.attr({
                'aria-hidden': previousAriaHidden
              });
            }
          }
        });
        return this._focusStack.pop();
      }
    }, {
      key: "setCloseTo",
      value: function setCloseTo($focusElement) {
        var $original = this._focusStack.pop();

        this._focusStack.push($focusElement);

        return $original;
      }
    }]);

    return Popup;
  }(Backbone.Controller));

  Object.assign($.fn, {
    isFixedPostion: function () {
      Adapt.a11y.log.removed('$("..").isFixedPostion was unneeded and has been removed, let us know if you need it back.');
      return false;
    },
    a11y_aria_label: function () {
      Adapt.a11y.log.removed('$("..").a11y_aria_label was incorrect behaviour.');
      return this;
    },
    limitedScrollTo: function () {
      Adapt.a11y.log.removed('$.limitedScrollTo had no impact on the screen reader cursor.');
      return this;
    },
    a11y_text: function () {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return this;
    },
    a11y_selected: function () {
      Adapt.a11y.log.removed('$("..").a11y_selected is removed. Please use aria-live instead.');
      return this;
    },
    a11y_on: function (isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.findTabbable($element); and Adapt.a11y.toggleAccessible($elements, isAccessible); instead.');
      var $tabbable = Adapt.a11y.findTabbable(this);
      Adapt.a11y.toggleAccessible($tabbable, isOn);
      return this;
    },
    a11y_only: function () {
      Adapt.a11y.log.removed('$("..").a11y_only, use Adapt.a11y.popupOpened($popupElement); instead.');
      return this;
    },
    scrollDisable: function () {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }

      Adapt.a11y.log.deprecated('$("..").scrollDisable, use Adapt.a11y.scrollDisable($elements); instead.');
      Adapt.a11y.scrollDisable(this);
      return this;
    },
    scrollEnable: function () {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }

      Adapt.a11y.log.deprecated('$("..").scrollEnable, use Adapt.a11y.scrollEnable($elements); instead.');
      Adapt.a11y.scrollEnable(this);
      return this;
    },
    a11y_popup: function () {
      Adapt.a11y.log.deprecated('$("..").a11y_popup, use Adapt.a11y.popupOpened($popupElement); instead.');
      return Adapt.a11y.popupOpened(this);
    },
    a11y_cntrl: function (isOn, withDisabled) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl, use Adapt.a11y.toggleAccessible($elements, isAccessible); and if needed Adapt.a11y.toggleEnabled($elements, isEnabled); instead.');
      Adapt.a11y.toggleAccessible(this, isOn);
      if (withDisabled) Adapt.a11y.toggleEnabled(this, isOn);
      return this;
    },
    a11y_cntrl_enabled: function (isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl_enabled, use Adapt.a11y.toggleAccessibleEnabled($elements, isAccessibleEnabled); instead.');
      Adapt.a11y.toggleAccessibleEnabled(this, isOn);
      return this;
    },
    isReadable: function () {
      Adapt.a11y.log.deprecated('$("..").isReadable, use Adapt.a11y.isReadable($element); instead.');
      return Adapt.a11y.isReadable(this);
    },
    findForward: function (selector) {
      Adapt.a11y.log.removed('$("..").findForward has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFirstForward(this, selector);
    },
    findWalk: function (selector) {
      Adapt.a11y.log.removed('$("..").findWalk has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFindForwardDescendant(this, selector);
    },
    focusNoScroll: function () {
      Adapt.a11y.log.deprecated('$("..").focusNoScroll, use Adapt.a11y.focus($element); instead.');
      return Adapt.a11y.focus(this);
    },
    focusNext: function (returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusNext, use Adapt.a11y.focusNext($element); or if needed Adapt.a11y.findFirstReadable($element); instead.');

      if (returnOnly) {
        return Adapt.a11y.findFirstReadable(this);
      }

      return Adapt.a11y.focusNext(this);
    },
    focusOrNext: function (returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusOrNext, use Adapt.a11y.focusFirst($element); or if needed Adapt.a11y.findFirstReadable($element); or Adapt.a11y.isReadable($element); instead.');

      if (returnOnly) {
        if (Adapt.a11y.isReadable(this)) return this;
        return Adapt.a11y.findFirstReadable(this);
      }

      return Adapt.a11y.focusFirst(this);
    },
    a11y_focus: function (dontDefer) {
      Adapt.a11y.log.deprecated('$("..").a11y_focus, use Adapt.a11y.focusFirst($element, { defer: true }); instead.');
      Adapt.a11y.focusFirst(this, {
        defer: !dontDefer
      });
      return this;
    }
  });
  Object.assign($, {
    a11y_alert: function () {
      Adapt.a11y.log.removed('$.a11y_alert is removed. Please use aria-live instead.');
      return this;
    },
    a11y_update: function () {
      Adapt.a11y.log.removed('a11y_update is no longer required.');
      return this;
    },
    a11y_text: function (text) {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_on: function (isOn, selector) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.toggleHidden($elements, isHidden); instead.');
      return Adapt.a11y.toggleHidden(selector, !isOn);
    },
    a11y_popdown: function ($focusTarget) {
      Adapt.a11y.log.removed('$.a11y_popdown, use Adapt.a11y.popupClosed($focusTarget); instead.');
      return Adapt.a11y.popupClosed($focusTarget);
    },
    a11y_focus: function (dontDefer) {
      Adapt.a11y.log.deprecated('$.a11y_focus, use Adapt.a11y.focusFirst("body", { defer: true }); instead.');
      Adapt.a11y.focusFirst('body', {
        defer: !dontDefer
      });
      return this;
    },
    a11y_normalize: function (html) {
      Adapt.a11y.log.deprecated('$.a11y_normalize, use Adapt.a11y.normalize("html"); instead.');
      return Adapt.a11y.normalize(html);
    },
    a11y_remove_breaks: function (html) {
      Adapt.a11y.log.deprecated('$.a11y_remove_breaks, use Adapt.a11y.removeBreaks("html"); instead.');
      return Adapt.a11y.removeBreaks(html);
    }
  });

  var A11y = function (_Backbone$Controller) {
    _inherits(A11y, _Backbone$Controller);

    var _super = _createSuper(A11y);

    function A11y() {
      _classCallCheck(this, A11y);

      return _super.apply(this, arguments);
    }

    _createClass(A11y, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isFocusOutlineKeyboardOnlyEnabled: true,
          _isFocusOutlineDisabled: false,
          _isFocusAssignmentEnabled: true,
          _isFocusOnClickEnabled: true,
          _isFocusNextOnDisabled: true,
          _isScrollDisableEnabled: true,
          _isAriaHiddenManagementEnabled: true,
          _isPopupManagementEnabled: true,
          _isPopupWrapFocusEnabled: true,
          _isPopupAriaHiddenManagementEnabled: true,
          _isPopupTabIndexManagementEnabled: true,
          _ariaHiddenExcludes: ':not(#wrapper):not(body)',
          _tabbableElements: 'a,button,input,select,textarea,[tabindex]:not([data-a11y-force-focus])',
          _focusOutlineKeyboardOnlyIgnore: 'input,textarea',
          _tabbableElementsExcludes: ':not(.a11y-ignore):not([data-a11y-force-focus])',
          _focusableElements: 'a,button,input,select,textarea,[tabindex],label',
          _readableElements: '[role=heading],[aria-label],[aria-labelledby],[alt]',
          _focusguard: '.a11y-focusguard',
          _wrapStyleElements: 'b,i,abbr,strong,em,small,sub,sup,ins,del,mark,zw,nb',
          _warnFirstOnly: true,
          _warn: true
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.isReadable = this.isReadable.bind(this);
        this.isTabbable = this.isTabbable.bind(this);
        this.$html = $('html');
        this._htmlCharRegex = /&.*;/g;
        this.config = null;
        this._browserFocus = new BrowserFocus();
        this._keyboardFocusOutline = new KeyboardFocusOutline();
        this._wrapFocus = new WrapFocus();
        this._popup = new Popup();
        this._scroll = new Scroll();
        this.log = new Log();

        this._removeLegacyElements();

        this.listenToOnce(Adapt, {
          'app:dataLoaded': this._onDataLoaded,
          'navigationView:postRender': this._removeLegacyElements
        }, this);
        Adapt.on('device:changed', this._setupNoSelect);
        this.listenTo(Adapt, {
          'router:location': this._onNavigationStart,
          'contentObjectView:ready router:plugin': this._onNavigationEnd
        });
      }
    }, {
      key: "_onDataLoaded",
      value: function _onDataLoaded() {
        this.config = Adapt.config.get('_accessibility');
        this.config._isActive = false;
        this.config._options = _.defaults(this.config._options || {}, this.defaults());
        Adapt.offlineStorage.set('a11y', false);
        this.$html.toggleClass('has-accessibility', this.isEnabled());

        this._setupNoSelect();

        this._addFocuserDiv();

        if (this._isReady) {
          return;
        }

        this._isReady = true;
        Adapt.trigger('accessibility:ready');
      }
    }, {
      key: "_setupNoSelect",
      value: function _setupNoSelect() {
        var _this = this;

        if (!this.config || !this.config._disableTextSelectOnClasses) {
          return;
        }

        var classes = this.config._disableTextSelectOnClasses.split(' ');

        var isMatch = classes.some(function (className) {
          return _this.$html.is(className);
        });
        this.$html.toggleClass('u-no-select', isMatch);
      }
    }, {
      key: "_addFocuserDiv",
      value: function _addFocuserDiv() {
        if ($('#a11y-focuser').length) {
          return;
        }

        $('body').append($('<div id="a11y-focuser" class="a11y-ignore" tabindex="-1" role="presentation">&nbsp;</div>'));
      }
    }, {
      key: "_removeLegacyElements",
      value: function _removeLegacyElements() {
        var $legacyElements = $('body').children('#accessibility-toggle, #accessibility-instructions');
        var $navigationElements = $('.nav').find('#accessibility-toggle, #accessibility-instructions');

        if (!$legacyElements.length && !$navigationElements.length) {
          return;
        }

        Adapt.log.warn('REMOVED: #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.');
        $legacyElements.remove();
        $navigationElements.remove();
      }
    }, {
      key: "_onNavigationStart",
      value: function _onNavigationStart() {
        var _this2 = this;

        if (!this.isEnabled()) {
          return;
        }

        _.defer(function () {
          return _this2.toggleHidden('.contentobject', true);
        });
      }
    }, {
      key: "_onNavigationEnd",
      value: function _onNavigationEnd(view) {
        if (view && view.model && view.model.get('_id') !== Adapt.location._currentId || !this.isEnabled()) {
          return;
        }

        this.toggleHidden('.contentobject', false);
      }
    }, {
      key: "isActive",
      value: function isActive() {
        this.log.removed('Accessibility is now always active when enabled. Please unify your user experiences.');
        return false;
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        return this.config && this.config._isEnabled;
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden($elements) {
        var isHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled) {
          return this;
        }

        if (isHidden === true) {
          $elements.attr('aria-hidden', true);
        } else {
          $elements.removeAttr('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleAccessibleEnabled",
      value: function toggleAccessibleEnabled($elements, isAccessibleEnabled) {
        this.toggleAccessible($elements, isAccessibleEnabled);
        this.toggleEnabled($elements, isAccessibleEnabled);
        return this;
      }
    }, {
      key: "toggleAccessible",
      value: function toggleAccessible($elements) {
        var isReadable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled || $elements.length === 0) {
          return this;
        }

        if (!isReadable) {
          $elements.attr({
            tabindex: '-1',
            'aria-hidden': 'true'
          }).addClass('aria-hidden');
        } else {
          $elements.removeAttr('aria-hidden tabindex').removeClass('aria-hidden');
          $elements.parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled($elements) {
        var isEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);

        if ($elements.length === 0) {
          return this;
        }

        if (!isEnabled) {
          $elements.attr({
            tabindex: '-1',
            'aria-disabled': 'true'
          }).addClass('is-disabled');
        } else {
          $elements.removeAttr('aria-disabled tabindex').removeClass('is-disabled');
        }

        return this;
      }
    }, {
      key: "findFirstTabbable",
      value: function findFirstTabbable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isTabbable);
      }
    }, {
      key: "findFirstReadable",
      value: function findFirstReadable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isReadable);
      }
    }, {
      key: "findTabbable",
      value: function findTabbable($element) {
        var config = this.config;
        return $($element).find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
      }
    }, {
      key: "findReadable",
      value: function findReadable($element) {
        var _this3 = this;

        return $($element).find('*').filter(function (index, element) {
          return _this3.isReadable(element);
        });
      }
    }, {
      key: "isTabbable",
      value: function isTabbable($element) {
        var config = this.config;
        var value = $($element).is(config._options._tabbableElements).is(config._options._tabbableElementsExcludes);

        if (!value) {
          return undefined;
        }

        return value;
      }
    }, {
      key: "isReadable",
      value: function isReadable($element) {
        var checkParents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var config = this.config;
        $element = $($element).first();
        var $branch = checkParents ? $element.add($element.parents()) : $element;
        var isNotVisible = $branch.toArray().some(function (item) {
          var $item = $(item);
          return $item.css('display') === 'none' || $item.css('visibility') === 'hidden' || $item.attr('aria-hidden') === 'true';
        });

        if (isNotVisible) {
          return false;
        }

        var hasNativeFocusOrIsScreenReadable = $element.is(config._options._focusableElements) || $element.is(config._options._readableElements);

        if (hasNativeFocusOrIsScreenReadable) {
          return true;
        }

        var childNodes = $element[0].childNodes;

        for (var c = 0, cl = childNodes.length; c < cl; c++) {
          var childNode = childNodes[c];
          var isTextNode = childNode.nodeType === 3;

          if (!isTextNode) {
            continue;
          }

          var isOnlyWhiteSpace = /^\s*$/.test(childNode.nodeValue);

          if (isOnlyWhiteSpace) {
            continue;
          }

          return true;
        }

        return undefined;
      }
    }, {
      key: "_findFirstForward",
      value: function _findFirstForward($element, selector) {
        var _this4 = this;

        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        if ($element.length === 0) {
          return $element.not('*');
        }

        var $found = this._findFirstForwardDescendant($element, iterator);

        if ($found && $found.length) {
          return $found;
        }

        $element.nextAll().toArray().some(function (sibling) {
          var $sibling = $(sibling);
          var value = iterator($sibling);

          if (value === false) {
            return;
          }

          if (value) {
            $found = $sibling;
            return true;
          }

          $found = _this4._findFirstForwardDescendant($sibling, iterator);
          if ($found && $found.length) return true;
        });

        if ($found && $found.length) {
          return $found;
        }

        $element.add($element.parents()).toArray().reverse().some(function (parent) {
          var $parent = $(parent);

          if (iterator($parent) === false) {
            return false;
          }

          return $parent.nextAll().toArray().some(function (sibling) {
            var $sibling = $(sibling);
            var value = iterator($sibling);

            if (value === false) {
              return;
            }

            if (value) {
              $found = $sibling;
              return true;
            }

            $found = _this4._findFirstForwardDescendant($sibling, iterator);

            if ($found && $found.length) {
              return true;
            }
          });
        });

        if (!$found || !$found.length) {
          return $element.not('*');
        }

        return $found;
      }
    }, {
      key: "_findFirstForwardDescendant",
      value: function _findFirstForwardDescendant($element, selector) {
        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        var $notFound = $element.not('*');

        if ($element.length === 0) {
          return $notFound;
        }

        var stack = [{
          item: $element[0],
          value: undefined
        }];
        var stackIndexPosition = 0;
        var childIndexPosition = stackIndexPosition + 1;

        do {
          var stackEntry = stack[stackIndexPosition];
          var $stackItem = $(stackEntry.item);

          switch (stackEntry.value) {
            case true:
              return $stackItem;

            case false:
              return $notFound;
          }

          $stackItem.children().toArray().forEach(function (item) {
            var $item = $(item);
            var value = iterator($item);

            if (value === false) {
              return;
            }

            stack.splice(childIndexPosition++, 0, {
              item: item,
              value: value
            });
          });
          stackIndexPosition++;
          childIndexPosition = stackIndexPosition + 1;
        } while (stackIndexPosition < stack.length);

        return $notFound;
      }
    }, {
      key: "focusNext",
      value: function focusNext($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        $element = this.findFirstReadable($element);
        this.focus($element, options);
        return this;
      }
    }, {
      key: "focusFirst",
      value: function focusFirst($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();

        if (this.isReadable($element)) {
          this.focus($element, options);
          return $element;
        }

        $element = this.findFirstReadable($element);
        this.focus($element, options);
        return $element;
      }
    }, {
      key: "focus",
      value: function focus($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        var config = this.config;

        if (!config._isEnabled || !config._options._isFocusAssignmentEnabled || $element.length === 0) {
          return this;
        }

        function perform() {
          if ($element.attr('tabindex') === undefined) {
            $element.attr({
              'tabindex': '-1',
              'data-a11y-force-focus': 'true'
            });
          }

          if (options.preventScroll) {
            var y = $(window).scrollTop();

            try {
              $element[0].focus({
                preventScroll: true
              });
            } catch (e) {}

            switch (Adapt.device.browser) {
              case 'internet explorer':
              case 'microsoft edge':
              case 'safari':
                window.scrollTo(null, y);
            }
          } else {
            $element[0].focus();
          }
        }

        if (options.defer) {
          _.defer(perform);
        } else {
          perform();
        }

        return this;
      }
    }, {
      key: "normalize",
      value: function normalize(htmls) {
        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var text = $('<div>' + htmls + '</div>').text();
        return text.replace(this._htmlCharRegex, '');
      }
    }, {
      key: "removeBreaks",
      value: function removeBreaks(htmls) {
        var _this5 = this;

        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var $div = $('<div>' + htmls + '</div>');
        var stack = [$div[0]];
        var stackIndex = 0;
        var outputs = [];

        do {
          if (stack[stackIndex].childNodes.length) {
            var nodes = stack[stackIndex].childNodes;
            var usable = nodes.filter(function (node) {
              var isTextNode = node.nodeType === 3;

              if (isTextNode) {
                return true;
              }

              var isStyleElement = $(node).is(_this5.config._options._wrapStyleElements);

              if (isStyleElement) {
                return true;
              }

              return false;
            });
            outputs.push.apply(outputs, usable);
            stack.push.apply(stack, nodes);
          }

          stackIndex++;
        } while (stackIndex < stack.length);

        var rtnText = '';
        outputs.forEach(function (item) {
          rtnText += item.outerHTML || item.textContent;
        });
        return rtnText;
      }
    }, {
      key: "scrollEnable",
      value: function scrollEnable($elements) {
        this._scroll.enable($elements);

        return this;
      }
    }, {
      key: "scrollDisable",
      value: function scrollDisable($elements) {
        this._scroll.disable($elements);

        return this;
      }
    }, {
      key: "popupOpened",
      value: function popupOpened($popupElement) {
        this._popup.opened($popupElement);

        return this;
      }
    }, {
      key: "popupClosed",
      value: function popupClosed($focusElement) {
        this._popup.closed($focusElement);

        return this;
      }
    }, {
      key: "setPopupCloseTo",
      value: function setPopupCloseTo($focusElement) {
        return this._popup.setCloseTo($focusElement);
      }
    }]);

    return A11y;
  }(Backbone.Controller);

  var a11y = __AMD("core/js/a11y", Adapt.a11y = new A11y());

  Object.defineProperty(Adapt, 'accessibility', {
    get: function () {
      a11y.log.deprecated('Adapt.accessibility has moved to Adapt.a11y');
      return a11y;
    }
  });

  var AdaptCollection = __AMD("core/js/collections/adaptCollection", function (_Backbone$Collection) {
    _inherits(AdaptCollection, _Backbone$Collection);

    var _super = _createSuper(AdaptCollection);

    function AdaptCollection() {
      _classCallCheck(this, AdaptCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.once('reset', this.loadedData, this);
      }
    }, {
      key: "loadedData",
      value: function loadedData() {
        Adapt.trigger('adaptCollection:dataLoaded');
      }
    }]);

    return AdaptCollection;
  }(Backbone.Collection));

  var LOG_LEVEL = ENUM(['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']);
  var LOG_LEVEL$1 = __AMD("core/js/enums/logLevelEnum", LOG_LEVEL);

  var Logging = function (_Backbone$Controller) {
    _inherits(Logging, _Backbone$Controller);

    var _super = _createSuper(Logging);

    function Logging() {
      _classCallCheck(this, Logging);

      return _super.apply(this, arguments);
    }

    _createClass(Logging, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _isEnabled: true,
          _level: LOG_LEVEL$1.INFO.asLowerCase,
          _console: true,
          _warnFirstOnly: true
        };
        this._warned = {};
        this.listenToOnce(Adapt, 'configModel:dataLoaded', this.onLoadConfigData);
      }
    }, {
      key: "onLoadConfigData",
      value: function onLoadConfigData() {
        this.loadConfig();
        this.debug('Logging config loaded');
        this.trigger('log:ready');
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt.config.has('_logging')) {
          this._config = Adapt.config.get('_logging');
        }

        this.checkQueryStringOverride();
      }
    }, {
      key: "checkQueryStringOverride",
      value: function checkQueryStringOverride() {
        var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);
        if (!matches || matches.length < 2) return;
        var override = LOG_LEVEL$1(matches[1].toUpperCase());
        if (!override) return;
        this._config._level = override.asLowerCase;
        this.debug('Loglevel override in query string:', this._config._level);
      }
    }, {
      key: "debug",
      value: function debug() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._log(LOG_LEVEL$1.DEBUG, args);
      }
    }, {
      key: "info",
      value: function info() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this._log(LOG_LEVEL$1.INFO, args);
      }
    }, {
      key: "warn",
      value: function warn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "error",
      value: function error() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._log(LOG_LEVEL$1.ERROR, args);
      }
    }, {
      key: "fatal",
      value: function fatal() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        this._log(LOG_LEVEL$1.FATAL, args);
      }
    }, {
      key: "removed",
      value: function removed() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        args = ['REMOVED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        args = ['DEPRECATED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "warnOnce",
      value: function warnOnce() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (this._hasWarned(args)) {
          return;
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "_log",
      value: function _log(level, data) {
        var isEnabled = this._config._isEnabled;
        if (!isEnabled) return;
        var configLevel = LOG_LEVEL$1(this._config._level.toUpperCase());
        var isLogLevelAllowed = level >= configLevel;
        if (!isLogLevelAllowed) return;

        this._logToConsole(level, data);

        this.trigger('log', level, data);
        this.trigger('log:' + level.asLowerCase, level, data);
      }
    }, {
      key: "_logToConsole",
      value: function _logToConsole(level, data) {
        var shouldLogToConsole = this._config._console;
        if (!shouldLogToConsole) return;
        var log = [level.asUpperCase + ':'];
        data && log.push.apply(log, _toConsumableArray(data));

        if (console[level.asLowerCase]) {
          var _console;

          (_console = console)[level.asLowerCase].apply(_console, log);
        } else {
          var _console2;

          (_console2 = console).log.apply(_console2, log);
        }
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        if (!this._config._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }]);

    return Logging;
  }(Backbone.Controller);

  __AMD("core/js/logging", Adapt.log = new Logging());

  var BuildModel = __AMD("core/js/models/buildModel", function (_LockingModel) {
    _inherits(BuildModel, _LockingModel);

    var _super = _createSuper(BuildModel);

    function BuildModel() {
      _classCallCheck(this, BuildModel);

      return _super.apply(this, arguments);
    }

    _createClass(BuildModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          jsonext: 'json'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this.isLoaded = true;
            Adapt.trigger('buildModel:dataLoaded');
          },
          error: function () {
            console.log('Unable to load adapt/js/build.js');
            Adapt.trigger('buildModel:dataLoaded');
          }
        });
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        if (this.isLoaded) return Promise.resolve();
        return new Promise(function (resolve) {
          Adapt.once('buildModel:dataLoaded', resolve);
        });
      }
    }]);

    return BuildModel;
  }(LockingModel));

  var ConfigModel = __AMD("core/js/models/configModel", function (_LockingModel) {
    _inherits(ConfigModel, _LockingModel);

    var _super = _createSuper(ConfigModel);

    function ConfigModel() {
      _classCallCheck(this, ConfigModel);

      return _super.apply(this, arguments);
    }

    _createClass(ConfigModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          screenSize: {
            large: 900,
            medium: 760,
            small: 520
          },
          _forceRouteLocking: false,
          _canLoadData: true,
          _disableAnimation: false
        };
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            Adapt.trigger('offlineStorage:prepare');
            Adapt.wait.queue(function () {
              Adapt.trigger('configModel:dataLoaded');
              if (!_this.get('_canLoadData')) return;
              Adapt.trigger('configModel:loadCourseData');
            });
          },
          error: function () {
            return console.log('Unable to load course/config.json');
          }
        });
      }
    }, {
      key: "loadData",
      value: function loadData() {}
    }]);

    return ConfigModel;
  }(LockingModel));

  var ModelEvent = __AMD("core/js/modelEvent", function (_Backbone$Controller) {
    _inherits(ModelEvent, _Backbone$Controller);

    var _super = _createSuper(ModelEvent);

    function ModelEvent() {
      _classCallCheck(this, ModelEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ModelEvent, [{
      key: "initialize",
      value: function initialize(type, target, value) {
        this.type = type;
        this.target = target;
        this.value = value;
        this.canBubble = true;
        this.deepPath = [target];
        this.timeStamp = null;
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        this.canBubble = false;
      }
    }, {
      key: "addPath",
      value: function addPath(target) {
        this.deepPath.unshift(target);
      }
    }]);

    return ModelEvent;
  }(Backbone.Controller));

  var AdaptModel = __AMD("core/js/models/adaptModel", function (_LockingModel) {
    _inherits(AdaptModel, _LockingModel);

    var _super = _createSuper(AdaptModel);

    function AdaptModel() {
      _classCallCheck(this, AdaptModel);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _objectSpread2({}, this.attributes);

        delete json._children;
        delete json._parent;
        return $.extend(true, {}, json);
      }
    }, {
      key: "get",
      value: function get(name) {
        switch (name) {
          case '_parent':
          case '_children':
            Adapt.log.deprecated("Use model.getChildren() or model.getParent() instead of model.get('_children') or model.get('_parent')");
        }

        return _get(_getPrototypeOf(AdaptModel.prototype), "get", this).call(this, name);
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canShowFeedback: true,
          _classes: '',
          _canReset: false,
          _canRequestChild: false,
          _isComplete: false,
          _isInteractionComplete: false,
          _isA11yRegionEnabled: false,
          _isA11yCompletionDescriptionEnabled: true,
          _requireCompletionOf: -1,
          _isEnabled: true,
          _isResetOnRevisit: false,
          _isAvailable: true,
          _isOptional: false,
          _isRendered: false,
          _isReady: false,
          _isVisible: true,
          _isLocked: false,
          _isHidden: false
        };
      }
    }, {
      key: "parse",
      value: function parse(data) {
        if (data._isResetOnRevisit === 'false') {
          data._isResetOnRevisit = false;
        }

        return data;
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ['_id', '_isComplete', '_isInteractionComplete'];
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return [String, Boolean, Boolean];
      }
    }, {
      key: "bubblingEvents",
      value: function bubblingEvents() {
        return ['change:_isComplete', 'change:_isInteractionComplete', 'change:_isActive'];
      }
    }, {
      key: "setupModel",
      value: function setupModel() {
        var _this = this;

        if (this.hasManagedChildren) {
          this.setupChildListeners();
        }

        this.init();

        _.defer(function () {
          if (_this.hasManagedChildren) {
            _this.checkCompletionStatus();

            _this.checkInteractionCompletionStatus();

            _this.checkLocking();
          }

          _this.setupTrackables();
        });
      }
    }, {
      key: "setupTrackables",
      value: function setupTrackables() {
        var _this2 = this;

        var originalTrackableStateFunction = this.triggerTrackableState;
        this.triggerTrackableState = _.compose(function () {
          _this2.triggerTrackableState.isQueued = true;
        }, _.debounce(function () {
          originalTrackableStateFunction.apply(_this2);
          _this2.triggerTrackableState.isQueued = false;
        }, 17));
        this.listenTo(this, 'change', function (_ref) {
          var changed = _ref.changed;

          if (_this2.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {
            return;
          }

          var trackablePropertyNames = _.result(_this2, 'trackable', []);

          var changedPropertyNames = Object.keys(changed);
          var isTrackable = changedPropertyNames.find(function (item) {
            return trackablePropertyNames.includes(item);
          });

          if (isTrackable) {
            _this2.triggerTrackableState();
          }
        });
      }
    }, {
      key: "setupChildListeners",
      value: function setupChildListeners() {
        var children = this.getChildren();

        if (!children.length) {
          return;
        }

        this.listenTo(children, {
          'all': this.onAll,
          'bubble': this.bubble,
          'change:_isReady': this.checkReadyStatus,
          'change:_isComplete': this.onIsComplete,
          'change:_isInteractionComplete': this.checkInteractionCompletionStatus
        });
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "getTrackableState",
      value: function getTrackableState() {
        var _ref2;

        var trackable = this.resultExtend('trackable', []);
        var json = this.toJSON();
        var args = trackable;
        args.unshift(json);
        return (_ref2 = _).pick.apply(_ref2, _toConsumableArray(args));
      }
    }, {
      key: "setTrackableState",
      value: function setTrackableState(state) {
        var _ref3;

        var trackable = this.resultExtend('trackable', []);
        var args = trackable;
        args.unshift(state);
        state = (_ref3 = _).pick.apply(_ref3, _toConsumableArray(args));
        this.set(state);
        return this;
      }
    }, {
      key: "triggerTrackableState",
      value: function triggerTrackableState() {
        Adapt.trigger('state:change', this, this.getTrackableState());
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        if (!this.get('_canReset') && !force) return;
        type = type || true;

        switch (type) {
          case 'hard':
          case true:
            this.set({
              _isEnabled: true,
              _isComplete: false,
              _isInteractionComplete: false
            });
            break;

          case 'soft':
            this.set({
              _isEnabled: true,
              _isInteractionComplete: false
            });
            break;
        }
      }
    }, {
      key: "checkReadyStatus",
      value: function checkReadyStatus(model, value) {
        if (value === false) {
          return false;
        }

        var children = this.getAvailableChildModels();

        if (children.find(function (child) {
          return child.get('_isReady') === false && child.get('_isRendered');
        })) {
          return false;
        }

        this.set('_isReady', true);
        return true;
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.get('_isVisible')) return;
        this.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        Adapt.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');
      }
    }, {
      key: "checkInteractionCompletionStatus",
      value: function checkInteractionCompletionStatus() {
        Adapt.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');
      }
    }, {
      key: "checkCompletionStatusFor",
      value: function checkCompletionStatusFor() {
        var completionAttribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_isComplete';
        var completed = false;
        var children = this.getAvailableChildModels();
        var requireCompletionOf = this.get('_requireCompletionOf');

        if (requireCompletionOf === -1) {
          completed = children.every(function (child) {
            return child.get(completionAttribute) || child.get('_isOptional');
          });
        } else {
          completed = children.filter(function (child) {
            return child.get(completionAttribute) && !child.get('_isOptional');
          }).length >= requireCompletionOf;
        }

        this.set(completionAttribute, completed);
        Adapt.checkedCompletion();
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {}
    }, {
      key: "isTypeGroup",
      value: function isTypeGroup(typeGroup) {
        var hasUpperCase = /[A-Z]+/.test(typeGroup);
        var isPluralized = typeGroup.slice(-1) === 's';
        var lowerCased = typeGroup.toLowerCase();
        var singular = isPluralized && lowerCased.slice(0, -1);
        var singularLowerCased = (singular || lowerCased).toLowerCase();

        if (isPluralized || hasUpperCase) {
          Adapt.log.deprecated("'".concat(typeGroup, "' appears pluralized or contains uppercase characters, suggest using the singular, lowercase type group '").concat(singularLowerCased, "'."));
        }

        var pluralizedLowerCaseTypes = [singularLowerCased, !isPluralized && "".concat(lowerCased, "s")].filter(Boolean);
        var typeGroups = this.getTypeGroups();

        if (_.intersection(pluralizedLowerCaseTypes, typeGroups).length) {
          return true;
        }

        return false;
      }
    }, {
      key: "getTypeGroups",
      value: function getTypeGroups() {
        if (this._typeGroups) return this._typeGroups;
        var typeGroups = [this.get('_type')];
        var parentClass = this;

        while (parentClass = Object.getPrototypeOf(parentClass)) {
          if (!parentClass.hasOwnProperty('getTypeGroup')) continue;
          typeGroups.push(parentClass.getTypeGroup.call(this));
        }

        return this._typeGroups = _.uniq(typeGroups.filter(Boolean).map(function (s) {
          return s.toLowerCase();
        }));
      }
    }, {
      key: "findAncestor",
      value: function findAncestor(ancestorType) {
        var parent = this.getParent();
        if (!parent) return;

        if (!ancestorType || parent.isTypeGroup(ancestorType)) {
          return parent;
        }

        return parent.findAncestor(ancestorType);
      }
    }, {
      key: "findDescendantModels",
      value: function findDescendantModels(descendants, options) {
        var allDescendantsModels = this.getAllDescendantModels();
        var returnedDescendants = allDescendantsModels.filter(function (model) {
          return model.isTypeGroup(descendants);
        });

        if (!options) {
          return returnedDescendants;
        }

        if (options.where) {
          return returnedDescendants.filter(function (descendant) {
            for (var property in options.where) {
              var value = options.where[property];

              if (descendant.get(property) !== value) {
                return false;
              }
            }

            return true;
          });
        }
      }
    }, {
      key: "getAllDescendantModels",
      value: function getAllDescendantModels(isParentFirst) {
        var descendants = [];

        if (!this.hasManagedChildren) {
          return descendants;
        }

        var children = this.getChildren();
        children.models.forEach(function (child) {
          if (!child.hasManagedChildren) {
            descendants.push(child);
            return;
          }

          var subDescendants = child.getAllDescendantModels(isParentFirst);

          if (isParentFirst === true) {
            descendants.push(child);
          }

          descendants.push.apply(descendants, _toConsumableArray(subDescendants));

          if (isParentFirst !== true) {
            descendants.push(child);
          }
        });
        return descendants;
      }
    }, {
      key: "findRelativeModel",
      value: function findRelativeModel(relativeString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rootModel = options.limitParentId ? Adapt.findById(options.limitParentId) : Adapt.course;
        var relativeDescriptor = Adapt.parseRelativeString(relativeString);
        var searchBackwards = relativeDescriptor.offset < 0;
        var moveBy = Math.abs(relativeDescriptor.offset);
        var movementCount = 0;
        var hasDescendantsOfType = Boolean(this.findDescendantModels(relativeDescriptor.type).length);

        if (hasDescendantsOfType) {
          moveBy--;
        }

        var pageDescendants;

        if (searchBackwards) {
          var _pageDescendants;

          pageDescendants = [rootModel];

          (_pageDescendants = pageDescendants).push.apply(_pageDescendants, _toConsumableArray(rootModel.getAllDescendantModels(true)));

          pageDescendants.reverse();
        } else {
          pageDescendants = rootModel.getAllDescendantModels(false);
          pageDescendants.push(rootModel);
        }

        if (typeof options.filter === 'function') {
          pageDescendants = pageDescendants.filter(options.filter);
        }

        var modelId = this.get('_id');
        var modelIndex = pageDescendants.findIndex(function (pageDescendant) {
          if (pageDescendant.get('_id') === modelId) {
            return true;
          }

          return false;
        });

        if (options.loop) {
          var totalOfType = pageDescendants.reduce(function (count, model) {
            if (!model.isTypeGroup(relativeDescriptor.type)) return count;
            return ++count;
          }, 0);
          moveBy = moveBy % totalOfType;
          pageDescendants = pageDescendants.concat(pageDescendants.slice(0));
        }

        for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {
          var descendant = pageDescendants[i];

          if (descendant.isTypeGroup(relativeDescriptor.type)) {
            if (movementCount > moveBy) {
              break;
            }

            if (movementCount === moveBy) {
              return Adapt.findById(descendant.get('_id'));
            }

            movementCount++;
          }
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        if (this._childrenCollection) {
          return this._childrenCollection;
        }

        var childrenCollection;

        if (!this.hasManagedChildren) {
          childrenCollection = new Backbone.Collection();
        } else {
          var id = this.get('_id');
          var children = Adapt.data.filter(function (model) {
            return model.get('_parentId') === id;
          });
          childrenCollection = new Backbone.Collection(children);
        }

        if (this.get('_type') === 'block' && childrenCollection.length === 2 && childrenCollection.models[0].get('_layout') !== 'left') {
          childrenCollection.comparator = '_layout';
          childrenCollection.sort();
        }

        this.setChildren(childrenCollection);
        return this._childrenCollection;
      }
    }, {
      key: "setChildren",
      value: function setChildren(children) {
        this._childrenCollection = children;
        this.set('_children', children);
      }
    }, {
      key: "getAvailableChildModels",
      value: function getAvailableChildModels() {
        return this.getChildren().where({
          _isAvailable: true
        });
      }
    }, {
      key: "getParent",
      value: function getParent() {
        if (this._parentModel) {
          return this._parentModel;
        }

        var parentId = this.get('_parentId');
        if (!parentId) return;
        this.setParent(Adapt.findById(parentId));
        return this._parentModel;
      }
    }, {
      key: "setParent",
      value: function setParent(parent) {
        this._parentModel = parent;
        this.set('_parentId', this._parentModel.get('_id'));
        this.set('_parent', this._parentModel);
      }
    }, {
      key: "getAncestorModels",
      value: function getAncestorModels(shouldIncludeChild) {
        var parents = [];
        var context = this;
        if (shouldIncludeChild) parents.push(context);

        while (context.has('_parentId')) {
          context = context.getParent();
          parents.push(context);
        }

        return parents.length ? parents : null;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings(passSiblingsAndIncludeSelf) {
        var id = this.get('_id');
        var parentId = this.get('_parentId');
        var siblings;

        if (!passSiblingsAndIncludeSelf) {
          if (this._hasSiblingsAndSelf === false) {
            return this.get('_siblings');
          }

          siblings = Adapt.data.filter(function (model) {
            return model.get('_parentId') === parentId && model.get('_id') !== id;
          });
          this._hasSiblingsAndSelf = false;
        } else {
          if (this._hasSiblingsAndSelf) {
            return this.get('_siblings');
          }

          siblings = Adapt.data.filter(function (model) {
            return model.get('_parentId') === parentId;
          });
          this._hasSiblingsAndSelf = true;
        }

        var siblingsCollection = new Backbone.Collection(siblings);
        this.set('_siblings', siblingsCollection);
        return siblingsCollection;
      }
    }, {
      key: "setOnChildren",
      value: function setOnChildren() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.set.apply(this, args);
        if (!this.hasManagedChildren) return;
        var children = this.getChildren();
        children.models.forEach(function (child) {
          return child.setOnChildren.apply(child, args);
        });
      }
    }, {
      key: "setOptional",
      value: function setOptional(value) {
        Adapt.log.deprecated("Use model.set('_isOptional', value) as setOptional() may be removed in the future");
        this.set({
          _isOptional: value
        });
      }
    }, {
      key: "checkLocking",
      value: function checkLocking() {
        var lockType = this.get('_lockType');
        if (!lockType) return;

        switch (lockType) {
          case 'sequential':
            this.setSequentialLocking();
            break;

          case 'unlockFirst':
            this.setUnlockFirstLocking();
            break;

          case 'lockLast':
            this.setLockLastLocking();
            break;

          case 'custom':
            this.setCustomLocking();
            break;

          default:
            console.warn("AdaptModel.checkLocking: unknown _lockType '".concat(lockType, "' found on ").concat(this.get('_id')));
        }
      }
    }, {
      key: "setSequentialLocking",
      value: function setSequentialLocking() {
        var children = this.getAvailableChildModels();

        for (var i = 1, j = children.length; i < j; i++) {
          children[i].set('_isLocked', !children[i - 1].get('_isComplete'));
        }
      }
    }, {
      key: "setUnlockFirstLocking",
      value: function setUnlockFirstLocking() {
        var children = this.getAvailableChildModels();
        var isFirstChildComplete = children[0].get('_isComplete');

        for (var i = 1, j = children.length; i < j; i++) {
          children[i].set('_isLocked', !isFirstChildComplete);
        }
      }
    }, {
      key: "setLockLastLocking",
      value: function setLockLastLocking() {
        var children = this.getAvailableChildModels();
        var lastIndex = children.length - 1;

        for (var i = lastIndex - 1; i >= 0; i--) {
          if (!children[i].get('_isComplete')) {
            return children[lastIndex].set('_isLocked', true);
          }
        }

        children[lastIndex].set('_isLocked', false);
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this3 = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          child.set('_isLocked', _this3.shouldLock(child));
        });
      }
    }, {
      key: "shouldLock",
      value: function shouldLock(child) {
        var lockedBy = child.get('_lockedBy');
        if (!lockedBy) return false;

        for (var i = lockedBy.length - 1; i >= 0; i--) {
          var id = lockedBy[i];

          try {
            var model = Adapt.findById(id);
            if (!model.get('_isAvailable')) continue;
            if (!model.get('_isComplete')) return true;
          } catch (e) {
            console.warn("AdaptModel.shouldLock: unknown _lockedBy ID '".concat(id, "' found on ").concat(child.get('_id')));
          }
        }

        return false;
      }
    }, {
      key: "onIsComplete",
      value: function onIsComplete() {
        this.checkCompletionStatus();
        this.checkLocking();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.get('_isResetOnRevisit');

        if (!isResetOnRevisit) {
          return;
        }

        this.reset(isResetOnRevisit);
      }
    }, {
      key: "deepClone",
      value: function deepClone() {
        var modifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var ModelClass = this.constructor;
        var clonedModel = new ModelClass(this.toJSON());

        if (modifier) {
          modifier(clonedModel, this);
        }

        var clonedId = clonedModel.get('_id');
        var hasId = Boolean(clonedId);
        var shouldAssignUniqueId = this.get('_id') === clonedId;

        if (hasId && shouldAssignUniqueId) {
          var cid = _.uniqueId(ModelClass.prototype.cidPrefix || 'c');

          clonedId = "".concat(clonedId, "_").concat(cid);
          clonedModel.set('_id', clonedId);
        }

        if (hasId) {
          Adapt.data.add(clonedModel);
        }

        if (this.hasManagedChildren) {
          this.getChildren().each(function (child) {
            if (!child.deepClone) {
              throw new Error('Cannot deepClone child.');
            }

            child.deepClone(function (clone, child) {
              if (hasId) {
                clone.set('_parentId', clonedId);
              }

              if (modifier) {
                modifier(clone, child);
              }
            });
          });
        }

        clonedModel.getParent().getChildren().add(clonedModel);
        clonedModel.setupModel();
        return clonedModel;
      }
    }, {
      key: "onAll",
      value: function onAll(type, model, value) {
        if (!_.result(this, 'bubblingEvents').includes(type)) return;
        var event = new ModelEvent(type, model, value);
        this.bubble(event);
      }
    }, {
      key: "bubble",
      value: function bubble(event) {
        if (!event.canBubble) return;
        event.addPath(this);
        this.trigger("bubble:".concat(event.type, " bubble"), event);
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return true;
      }
    }]);

    return AdaptModel;
  }(LockingModel));

  var ContentObjectModel = __AMD("core/js/models/contentObjectModel", function (_AdaptModel) {
    _inherits(ContentObjectModel, _AdaptModel);

    var _super = _createSuper(ContentObjectModel);

    function ContentObjectModel() {
      _classCallCheck(this, ContentObjectModel);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectModel, [{
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'contentobject';
      }
    }, {
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._parent, use contentObjectModel.getParent() instead, parent models are defined by the JSON');
        var isParentCourse = this.get('_parentId') === Adapt.course.get('_id');

        if (isParentCourse) {
          return 'course';
        }

        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._siblings, use contentObjectModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._children, use contentObjectModel.hasManagedChildren instead, child models are defined by the JSON');
        return null;
      }
    }]);

    return ContentObjectModel;
  }(AdaptModel));

  var MenuModel = function (_ContentObjectModel) {
    _inherits(MenuModel, _ContentObjectModel);

    var _super = _createSuper(MenuModel);

    function MenuModel() {
      _classCallCheck(this, MenuModel);

      return _super.apply(this, arguments);
    }

    _createClass(MenuModel, [{
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'menu';
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          child.set('_isLocked', _this.shouldLock(child));
          if (!(child instanceof MenuModel)) return;
          child.checkLocking();
        });
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('menuModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'contentObjects';
      }
    }]);

    return MenuModel;
  }(ContentObjectModel);

  Adapt.register('menu', {
    model: MenuModel
  });
  var MenuModel$1 = __AMD("core/js/models/menuModel", MenuModel);

  var CourseModel = function (_MenuModel) {
    _inherits(CourseModel, _MenuModel);

    var _super = _createSuper(CourseModel);

    function CourseModel() {
      _classCallCheck(this, CourseModel);

      return _super.apply(this, arguments);
    }

    _createClass(CourseModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('courseModel._parent, use courseModel.getParent() instead, parent models are defined by the JSON');
        return null;
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('courseModel._siblings, use courseModel.getSiblings() instead, sibling models are defined by the JSON');
        return null;
      }
    }]);

    return CourseModel;
  }(MenuModel$1);

  Adapt.register('course', {
    model: CourseModel
  });
  var CourseModel$1 = __AMD("core/js/models/courseModel", CourseModel);

  var StartController = function (_Backbone$Controller) {
    _inherits(StartController, _Backbone$Controller);

    var _super = _createSuper(StartController);

    function StartController() {
      _classCallCheck(this, StartController);

      return _super.apply(this, arguments);
    }

    _createClass(StartController, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(StartController.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.model = null;
      }
    }, {
      key: "loadCourseData",
      value: function loadCourseData() {
        this.model = new LockingModel(Adapt.course.get('_start'));
      }
    }, {
      key: "setStartLocation",
      value: function setStartLocation() {
        if (!this.isEnabled()) return;
        window.history.replaceState('', '', this.getStartHash());
      }
    }, {
      key: "returnToStartLocation",
      value: function returnToStartLocation() {
        var startIds = this.model.get('_startIds');

        if (startIds) {
          startIds.forEach(function (startId) {
            return startId._skipIfComplete = false;
          });
        }

        window.location.hash = this.getStartHash(true);
      }
    }, {
      key: "getStartHash",
      value: function getStartHash(alwaysForce) {
        var startId = this.getStartId();
        var isRouteSpecified = window.location.href.indexOf('#') > -1;
        var shouldForceStartId = alwaysForce || this.model.get('_force');
        var shouldNavigateToStartId = startId && (!isRouteSpecified || shouldForceStartId);

        if (shouldNavigateToStartId && startId !== Adapt.course.get('_id')) {
          return '#/id/' + startId;
        }

        return window.location.hash || '#/';
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        if (!this.model || !this.model.get('_isEnabled')) return false;
        return true;
      }
    }, {
      key: "getStartId",
      value: function getStartId() {
        var startId = this.model.get('_id');
        var startIds = this.model.get('_startIds');
        if (!startIds || !startIds.length) return startId;
        var $html = $('html');

        for (var i = 0, l = startIds.length; i < l; i++) {
          var item = startIds[i];
          var className = item._className;
          var skipIfComplete = item._skipIfComplete;
          var model = Adapt.findById(item._id);

          if (!model) {
            console.log('startController: cannot find id', item._id);
            continue;
          }

          if (skipIfComplete) {
            if (model.get('_isComplete')) continue;
          }

          if (!className || $html.is(className) || $html.hasClass(className)) {
            startId = item._id;
            break;
          }
        }

        return startId;
      }
    }]);

    return StartController;
  }(Backbone.Controller);

  Adapt.once('adapt:start', function () {
    Adapt.startController.loadCourseData();
    Adapt.startController.setStartLocation();
  });
  Adapt.on('navigation:returnToStart', function () {
    Adapt.startController.returnToStartLocation();
  });
  __AMD("core/js/startController", Adapt.startController = new StartController());

  var Data = function (_AdaptCollection) {
    _inherits(Data, _AdaptCollection);

    var _super = _createSuper(Data);

    function Data() {
      _classCallCheck(this, Data);

      return _super.apply(this, arguments);
    }

    _createClass(Data, [{
      key: "model",
      value: function model(json) {
        var ModelClass = Adapt.getModelClass(json);

        if (!ModelClass) {
          return new LockingModel(json);
        }

        return new ModelClass(json, {
          parse: true
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(Data.prototype), "initialize", this).call(this);

        this.on({
          'add': this.onAdded,
          'remove': this.onRemoved
        });
      }
    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.reset();
                  this._byAdaptID = {};
                  Adapt.build = new BuildModel(null, {
                    url: 'adapt/js/build.min.js',
                    reset: true
                  });
                  _context.next = 5;
                  return Adapt.build.whenReady();

                case 5:
                  $('html').attr('data-adapt-framework-version', Adapt.build.get('package').version);
                  this.loadConfigData();

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "onAdded",
      value: function onAdded(model) {
        this._byAdaptID[model.get('_id')] = model;
      }
    }, {
      key: "onRemoved",
      value: function onRemoved(model) {
        delete this._byAdaptID[model.get('_id')];
      }
    }, {
      key: "loadConfigData",
      value: function loadConfigData() {
        Adapt.config = new ConfigModel(null, {
          url: 'course/config.' + Adapt.build.get('jsonext'),
          reset: true
        });
        this.listenToOnce(Adapt, 'configModel:loadCourseData', this.onLoadCourseData);
        this.listenTo(Adapt.config, {
          'change:_activeLanguage': this.onLanguageChange,
          'change:_defaultDirection': this.onDirectionChange
        });
      }
    }, {
      key: "onDirectionChange",
      value: function onDirectionChange(model, direction) {
        if (direction === 'rtl') {
          $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');
        } else {
          $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');
        }
      }
    }, {
      key: "onLoadCourseData",
      value: function onLoadCourseData() {
        if (!Adapt.config.get('_activeLanguage')) {
          Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));
          return;
        }

        this.loadCourseData();
      }
    }, {
      key: "onLanguageChange",
      value: function onLanguageChange(model, language) {
        Adapt.offlineStorage.set('lang', language);

        if (Adapt.get('_isStarted')) {
          Adapt.set('_isStarted', false);
        }

        this.loadCourseData(language);
      }
    }, {
      key: "loadCourseData",
      value: function () {
        var _loadCourseData = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(newLanguage) {
          var language, courseFolder;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  language = Adapt.config.get('_activeLanguage');
                  courseFolder = 'course/' + language + '/';
                  $('html').attr('lang', language);
                  _context2.next = 5;
                  return this.loadManifestFiles(courseFolder);

                case 5:
                  _context2.next = 7;
                  return this.triggerDataLoaded();

                case 7:
                  _context2.next = 9;
                  return this.triggerDataReady(newLanguage);

                case 9:
                  this.triggerInit();

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function loadCourseData(_x) {
          return _loadCourseData.apply(this, arguments);
        }

        return loadCourseData;
      }()
    }, {
      key: "getJSON",
      value: function getJSON(path) {
        return new Promise(function (resolve, reject) {
          $.getJSON(path, function (data) {
            data.__path__ = path;
            resolve(data);
          }).fail(reject);
        });
      }
    }, {
      key: "loadManifestFiles",
      value: function () {
        var _loadManifestFiles = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(languagePath) {
          var _this = this;

          var manifestPath, manifest, allFileData, allModelData, course;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.trigger('loading');
                  this.reset();
                  manifestPath = languagePath + 'language_data_manifest.js';
                  _context3.prev = 3;
                  _context3.next = 6;
                  return this.getJSON(manifestPath);

                case 6:
                  manifest = _context3.sent;
                  _context3.next = 13;
                  break;

                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](3);
                  manifest = ['course.json', 'contentObjects.json', 'articles.json', 'blocks.json', 'components.json'];
                  Adapt.log.warnOnce("Manifest path '".concat(manifestPath, " not found. Using traditional files: ").concat(manifest.join(', ')));

                case 13:
                  _context3.next = 15;
                  return Promise.all(manifest.map(function (filePath) {
                    return _this.getJSON("".concat(languagePath).concat(filePath));
                  }));

                case 15:
                  allFileData = _context3.sent;
                  allModelData = allFileData.reduce(function (result, fileData) {
                    if (Array.isArray(fileData)) {
                      result.push.apply(result, _toConsumableArray(fileData));
                    } else if (fileData instanceof Object) {
                      result.push(fileData);
                    } else {
                      Adapt.log.warnOnce("File data isn't an array or object: ".concat(fileData.__path__));
                    }

                    return result;
                  }, []);
                  course = allModelData.find(function (modelData) {
                    return modelData._type === 'course';
                  });

                  if (course) {
                    _context3.next = 20;
                    break;
                  }

                  throw new Error("Expected a model data with \"_type\": \"course\", none found.");

                case 20:
                  Adapt.trigger('courseModel:dataLoading');
                  Adapt.course = this.push(course);
                  Adapt.trigger('courseModel:dataLoaded');
                  allModelData.forEach(function (modelData) {
                    if (modelData._type === 'course') {
                      return;
                    }

                    _this.push(modelData);
                  });
                  this.trigger('reset');
                  this.trigger('loaded');
                  _context3.next = 28;
                  return Adapt.wait.queue();

                case 28:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[3, 9]]);
        }));

        function loadManifestFiles(_x2) {
          return _loadManifestFiles.apply(this, arguments);
        }

        return loadManifestFiles;
      }()
    }, {
      key: "triggerDataLoaded",
      value: function () {
        var _triggerDataLoaded = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  Adapt.log.debug('Firing app:dataLoaded');

                  try {
                    this.forEach(function (model) {
                      return model.setupModel && model.setupModel();
                    });
                    Adapt.trigger('app:dataLoaded');
                  } catch (e) {
                    Adapt.log.error('Error during app:dataLoading trigger', e);
                  }

                  _context4.next = 4;
                  return Adapt.wait.queue();

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function triggerDataLoaded() {
          return _triggerDataLoaded.apply(this, arguments);
        }

        return triggerDataLoaded;
      }()
    }, {
      key: "triggerDataReady",
      value: function () {
        var _triggerDataReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(newLanguage) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (newLanguage) {
                    Adapt.trigger('app:languageChanged', newLanguage);

                    _.defer(function () {
                      Adapt.startController.loadCourseData();
                      var hash = Adapt.startController.isEnabled() ? Adapt.startController.getStartHash(true) : '#/';
                      Adapt.router.navigate(hash, {
                        trigger: true,
                        replace: true
                      });
                    });
                  }

                  Adapt.log.debug('Firing app:dataReady');

                  try {
                    Adapt.trigger('app:dataReady');
                  } catch (e) {
                    Adapt.log.error('Error during app:dataReady trigger', e);
                  }

                  _context5.next = 5;
                  return Adapt.wait.queue();

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function triggerDataReady(_x3) {
          return _triggerDataReady.apply(this, arguments);
        }

        return triggerDataReady;
      }()
    }, {
      key: "triggerInit",
      value: function triggerInit() {
        this.isReady = true;
        this.trigger('ready');
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        var _this2 = this;

        if (this.isReady) return Promise.resolve();
        return new Promise(function (resolve) {
          _this2.once('ready', resolve);
        });
      }
    }, {
      key: "findById",
      value: function findById(id) {
        var model = this._byAdaptID[id];

        if (!model) {
          console.warn("Adapt.findById() unable to find collection type for id: ".concat(id));
          return;
        }

        return model;
      }
    }]);

    return Data;
  }(AdaptCollection);

  var Data$1 = __AMD("core/js/data", Adapt.data = new Data());

  var OfflineStorage = function (_Backbone$Controller) {
    _inherits(OfflineStorage, _Backbone$Controller);

    var _super = _createSuper(OfflineStorage);

    function OfflineStorage() {
      _classCallCheck(this, OfflineStorage);

      return _super.apply(this, arguments);
    }

    _createClass(OfflineStorage, [{
      key: "initialize",
      value: function initialize(handler) {
        this.ready = true;
        this._handler = undefined;

        if (!handler) {
          return;
        }

        this.ready = false;
        this._handler = handler;
      }
    }, {
      key: "hasHandler",
      value: function hasHandler() {
        return this._handler !== undefined;
      }
    }, {
      key: "save",
      value: function save() {
        Adapt.trigger('tracking:save');

        if (this._handler && this._handler.save) {
          return this._handler.save.apply(this._handler, arguments);
        }
      }
    }, {
      key: "serialize",
      value: function serialize(value) {
        if (this._handler && this._handler.serialize) {
          return this._handler.serialize.apply(this._handler, arguments);
        }

        return JSON.stringify(value);
      }
    }, {
      key: "deserialize",
      value: function deserialize(value) {
        if (this._handler && this._handler.deserialize) {
          return this._handler.deserialize.apply(this._handler, arguments);
        }

        return JSON.parse(value);
      }
    }, {
      key: "set",
      value: function set(name, value) {
        if (this._handler && this._handler.set) {
          return this._handler.set.apply(this._handler, arguments);
        }

        this[name] = value;
      }
    }, {
      key: "get",
      value: function get(name) {
        if (this._handler && this._handler.get) {
          return this._handler.get.apply(this._handler, arguments);
        }

        return this[name];
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.ready = true;
        Adapt.trigger('offlineStorage:ready');
      }
    }]);

    return OfflineStorage;
  }(Backbone.Controller);

  Adapt.offlineStorage = new OfflineStorage();
  __AMD("core/js/offlineStorage", Adapt.offlineStorage);

  var COMPLETION_STATE = ENUM(['INCOMPLETE', 'COMPLETED', 'PASSED', 'FAILED']);
  var COMPLETION_STATE$1 = __AMD("core/js/enums/completionStateEnum", COMPLETION_STATE);

  var Tracking = function (_Backbone$Controller) {
    _inherits(Tracking, _Backbone$Controller);

    var _super = _createSuper(Tracking);

    function Tracking() {
      _classCallCheck(this, Tracking);

      return _super.apply(this, arguments);
    }

    _createClass(Tracking, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _requireContentCompleted: true,
          _requireAssessmentCompleted: false
        };
        this._assessmentState = null;
        Adapt.once('configModel:dataLoaded', this.loadConfig.bind(this));
        Adapt.on('app:dataReady', this.setupEventListeners.bind(this));
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this._config._requireAssessmentCompleted) {
          this.listenTo(Adapt, {
            'assessment:complete': this.onAssessmentComplete,
            'assessment:restored': this.onAssessmentRestored
          });
        }

        if (this._config._requireContentCompleted) {
          this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);
        }
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(assessmentState) {
        this._assessmentState = assessmentState;
        this.checkCompletion();
      }
    }, {
      key: "onAssessmentRestored",
      value: function onAssessmentRestored(assessmentState) {
        this._assessmentState = assessmentState;
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var completionData = this.getCompletionData();

        if (completionData.status === COMPLETION_STATE$1.INCOMPLETE) {
          return;
        }

        Adapt.trigger('tracking:complete', completionData);
        Adapt.log.debug('tracking:complete', completionData);
      }
    }, {
      key: "getCompletionData",
      value: function getCompletionData() {
        var completionData = {
          status: COMPLETION_STATE$1.INCOMPLETE,
          assessment: null
        };

        if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {
          return completionData;
        }

        if (this._config._requireAssessmentCompleted) {
          if (!this._assessmentState) {
            return completionData;
          }

          completionData.status = this._assessmentState.isPass ? COMPLETION_STATE$1.PASSED : COMPLETION_STATE$1.FAILED;
          completionData.assessment = this._assessmentState;
          return completionData;
        }

        completionData.status = COMPLETION_STATE$1.COMPLETED;
        return completionData;
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt.config.has('_completionCriteria')) {
          this._config = Adapt.config.get('_completionCriteria');
        }
      }
    }]);

    return Tracking;
  }(Backbone.Controller);

  Adapt.tracking = new Tracking();
  __AMD("core/js/tracking", Adapt.tracking);

  var Device = function (_Backbone$Controller) {
    _inherits(Device, _Backbone$Controller);

    var _super = _createSuper(Device);

    function Device() {
      _classCallCheck(this, Device);

      return _super.apply(this, arguments);
    }

    _createClass(Device, [{
      key: "initialize",
      value: function initialize() {
        this.$html = $('html');
        this.$window = $(window);
        this.touch = Modernizr.touchevents;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();
        this.browser = (Bowser__default['default'].name || '').toLowerCase();
        this.version = (Bowser__default['default'].version || '').toLowerCase();
        this.OS = this.getOperatingSystem().toLowerCase();
        this.osVersion = Bowser__default['default'].osversion || '';
        this.renderingEngine = this.getRenderingEngine();
        this.onWindowResize = _.debounce(this.onWindowResize.bind(this), 100);
        this.listenTo(Adapt, {
          'app:dataReady': this.onDataReady
        });
        var browser = this.browser.toLowerCase();
        var browserString = browser.replace(/msie|internet explorer/, 'ie');
        browserString += " version-".concat(this.version, " OS-").concat(this.OS, " ").concat(this.getAppleDeviceType());
        browserString += browserString.replace('.', '-').toLowerCase();
        browserString += " pixel-density-".concat(this.pixelDensity());
        this.$html.addClass(browserString);
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        this.screenSize = this.checkScreenSize();
        this.$html.addClass('size-' + this.screenSize);

        if (this.orientation) {
          this.$html.addClass('orientation-' + this.orientation);
        }

        this.$window.on('resize orientationchange', this.onWindowResize);
      }
    }, {
      key: "checkScreenSize",
      value: function checkScreenSize() {
        var screenSizeConfig = Adapt.config.get('screenSize');
        var screenSize;
        var screensizeEmThreshold = 300;
        var baseFontSize = 16;
        var mediumEmBreakpoint = screenSizeConfig.medium > screensizeEmThreshold ? screenSizeConfig.medium / baseFontSize : screenSizeConfig.medium;
        var smallEmBreakpoint = screenSizeConfig.small > screensizeEmThreshold ? screenSizeConfig.small / baseFontSize : screenSizeConfig.small;
        var fontSize = parseFloat($('html').css('font-size'));
        var screenSizeEmWidth = this.screenWidth / fontSize;

        if (screenSizeEmWidth >= mediumEmBreakpoint) {
          screenSize = 'large';
        } else if (screenSizeEmWidth >= smallEmBreakpoint) {
          screenSize = 'medium';
        } else {
          screenSize = 'small';
        }

        return screenSize;
      }
    }, {
      key: "getScreenWidth",
      value: function getScreenWidth() {
        return this.isAppleDevice() ? this.getAppleScreenWidth() : window.innerWidth || this.$window.width();
      }
    }, {
      key: "getScreenHeight",
      value: function getScreenHeight() {
        return this.isAppleDevice() ? this.getAppleScreenHeight() : window.innerHeight || this.$window.height();
      }
    }, {
      key: "getOperatingSystem",
      value: function getOperatingSystem() {
        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android', 'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];
        var os = flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';

        if (os === '') {
          var platform = navigator.platform.toLowerCase();
          var match = platform.match(/win|mac|linux/);
          if (match) os = match[0];
          if (os === 'win') os = 'windows';
          if (!os) os = 'PlatformUnknown';
        }

        return os;
      }
    }, {
      key: "getRenderingEngine",
      value: function getRenderingEngine() {
        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];
        return flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';
      }
    }, {
      key: "onWindowResize",
      value: function onWindowResize() {
        var previousWidth = this.screenWidth;
        var previousHeight = this.screenHeight;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();

        if (previousWidth === this.screenWidth && previousHeight === this.screenHeight) {
          return;
        }

        var newScreenSize = this.checkScreenSize();

        if (newScreenSize !== this.screenSize) {
          this.screenSize = newScreenSize;
          this.$html.removeClass('size-small size-medium size-large').addClass('size-' + this.screenSize);

          if (this.orientation) {
            this.$html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + this.orientation);
          }

          Adapt.trigger('device:changed', this.screenSize);
        }

        Adapt.trigger('device:preResize device:resize device:postResize', this.screenWidth);
      }
    }, {
      key: "isAppleDevice",
      value: function isAppleDevice() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      }
    }, {
      key: "getAppleScreenWidth",
      value: function getAppleScreenWidth() {
        return Math.abs(window.orientation) === 90 ? window.screen.height : window.screen.width;
      }
    }, {
      key: "getAppleScreenHeight",
      value: function getAppleScreenHeight() {
        return Math.abs(window.orientation) === 90 ? window.screen.width : window.screen.height;
      }
    }, {
      key: "getAppleDeviceType",
      value: function getAppleDeviceType() {
        var flags = ['iphone', 'ipad', 'ipod'];
        return flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';
      }
    }, {
      key: "pixelDensity",
      value: function pixelDensity() {
        var pixelDensity = window.devicePixelRatio || 1;

        if (pixelDensity >= 3) {
          return 'ultra-high';
        } else if (pixelDensity >= 2) {
          return 'high';
        } else if (pixelDensity >= 1.5) {
          return 'medium';
        } else {
          return 'low';
        }
      }
    }, {
      key: "orientation",
      get: function () {
        return this.screenWidth >= this.screenHeight ? 'landscape' : 'portrait';
      }
    }, {
      key: "aspectRatio",
      get: function () {
        return this.screenWidth / this.screenHeight;
      }
    }]);

    return Device;
  }(Backbone.Controller);

  __AMD("core/js/device", Adapt.device = new Device());

  var DrawerItemView = function (_Backbone$View) {
    _inherits(DrawerItemView, _Backbone$View);

    var _super = _createSuper(DrawerItemView);

    function DrawerItemView() {
      _classCallCheck(this, DrawerItemView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerItemView, [{
      key: "className",
      value: function className() {
        return 'drawer__menu drawer__item';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'list'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'drawer:empty', this.remove);
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__item-btn': 'onDrawerItemClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['drawerItem'];
        $(this.el).html(template(data)).appendTo('.drawer__holder');
        return this;
      }
    }, {
      key: "onDrawerItemClicked",
      value: function onDrawerItemClicked(event) {
        event.preventDefault();
        var eventCallback = this.model.get('eventCallback');
        Adapt.trigger(eventCallback);
      }
    }]);

    return DrawerItemView;
  }(Backbone.View);

  DrawerItemView.type = 'drawerItem';
  var DrawerItemView$1 = __AMD("core/js/views/drawerItemView", DrawerItemView);

  var DrawerView = function (_Backbone$View) {
    _inherits(DrawerView, _Backbone$View);

    var _super = _createSuper(DrawerView);

    function DrawerView() {
      _classCallCheck(this, DrawerView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerView, [{
      key: "className",
      value: function className() {
        return 'drawer u-display-none';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'dialog',
          'aria-modal': 'true',
          'aria-labelledby': 'drawer-heading',
          'aria-hidden': 'true'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        this._isVisible = false;
        this.drawerDir = 'right';

        if (Adapt.config.get('_defaultDirection') === 'rtl') {
          this.drawerDir = 'left';
        }

        this.setupEventListeners();
        this.render();
        this.drawerDuration = Adapt.config.get('_drawer')._duration;
        this.drawerDuration = this.drawerDuration ? this.drawerDuration : 400;
        this.$wrapper = $('#wrapper');
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, {
          'navigation:toggleDrawer': this.toggleDrawer,
          'drawer:triggerCustomView': this.openCustomView,
          'drawer:closeDrawer': this.onCloseDrawer,
          'remove': this.onRemove,
          'drawer:remove': this.remove
        });
        this.onKeyUp = this.onKeyUp.bind(this);
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.onCloseDrawer();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__back': 'onBackButtonClicked',
          'click .drawer__close': 'onCloseClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates['drawer'];
        $(this.el).html(template({
          _globals: Adapt.course.get('_globals')
        })).prependTo('body');
        var shadowTemplate = Handlebars.templates['shadow'];
        $(shadowTemplate()).prependTo('body');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('a, button, input, select, textarea').attr('tabindex', -1);
        this.checkIfDrawerIsAvailable();
      }
    }, {
      key: "openCustomView",
      value: function openCustomView(view, hasBackButton) {
        this._hasBackButton = hasBackButton;
        this._isCustomViewVisible = true;
        Adapt.trigger('drawer:empty');
        this.showDrawer();
        this.$('.drawer__holder').html(view);
      }
    }, {
      key: "checkIfDrawerIsAvailable",
      value: function checkIfDrawerIsAvailable() {
        var isEmptyDrawer = this.collection.length === 0;
        $('.js-nav-drawer-btn').toggleClass('u-display-none', isEmptyDrawer);

        if (isEmptyDrawer) {
          Adapt.trigger('drawer:noItems');
        }
      }
    }, {
      key: "onBackButtonClicked",
      value: function onBackButtonClicked(event) {
        event.preventDefault();
        this.showDrawer(true);
      }
    }, {
      key: "onCloseClicked",
      value: function onCloseClicked(event) {
        event.preventDefault();
        this.hideDrawer();
      }
    }, {
      key: "onCloseDrawer",
      value: function onCloseDrawer($toElement) {
        this.hideDrawer($toElement);
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        this.hideDrawer();
      }
    }, {
      key: "toggleDrawer",
      value: function toggleDrawer() {
        if (this._isVisible && this._isCustomViewVisible === false) {
          this.hideDrawer();
        } else {
          this.showDrawer(true);
        }
      }
    }, {
      key: "showDrawer",
      value: function showDrawer(emptyDrawer) {
        var _this = this;

        this.$el.removeClass('u-display-none').removeAttr('aria-hidden');

        if (!this._isVisible) {
          Adapt.a11y.popupOpened(this.$el);
          Adapt.a11y.scrollDisable('body');
          this._isVisible = true;
        }

        this.$('a, button, input, select, textarea').attr('tabindex', 0);

        if (emptyDrawer) {
          this.$('.drawer__back').addClass('u-display-none');
          this._isCustomViewVisible = false;
          this.emptyDrawer();

          if (this.collection.models.length === 1) {
            Adapt.trigger(this.collection.models[0].get('eventCallback'));
            this._isCustomViewVisible = false;
          } else {
            this.renderItems();
            Adapt.trigger('drawer:openedItemView');
          }
        } else {
          var hideDrawerBackButton = !this._hasBackButton || this.collection.models.length <= 1;
          this.$('.drawer__back').toggleClass('u-display-none', hideDrawerBackButton);
          Adapt.trigger('drawer:openedCustomView');
        }

        var complete = function () {
          _this.addShadowEvent();

          Adapt.trigger('drawer:opened');
          Adapt.a11y.focusFirst(_this.$el, {
            defer: true
          });
        };

        var direction = {};

        if (this.disableAnimation) {
          $('.js-shadow').removeClass('u-display-none');
          $('.js-drawer-holder').scrollTop(0);
          direction[this.drawerDir] = 0;
          this.$el.css(direction);
          complete();
        } else {
          $('.js-shadow').velocity({
            opacity: 1
          }, {
            duration: this.drawerDuration,
            begin: function () {
              $('.js-shadow').removeClass('u-display-none');
              $('.js-drawer-holder').scrollTop(0);
              complete();
            }
          });

          var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;

          var easing = showEasingAnimation || 'easeOutQuart';
          direction[this.drawerDir] = 0;
          this.$el.velocity(direction, this.drawerDuration, easing);
        }
      }
    }, {
      key: "emptyDrawer",
      value: function emptyDrawer() {
        this.$('.drawer__holder').empty();
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        Adapt.trigger('drawer:empty');
        this.emptyDrawer();
        var models = this.collection.models;

        for (var i = 0, len = models.length; i < len; i++) {
          var item = models[i];
          new DrawerItemView$1({
            model: item
          });
        }
      }
    }, {
      key: "hideDrawer",
      value: function hideDrawer($toElement) {
        var direction = {};

        if (this._isVisible) {
          Adapt.a11y.popupClosed($toElement);
          this._isVisible = false;
          Adapt.a11y.scrollEnable('body');
        } else {
          return;
        }

        if (this.disableAnimation) {
          direction[this.drawerDir] = -this.$el.width();
          this.$el.css(direction).addClass('u-display-none').attr('aria-hidden', 'true');
          $('.js-shadow').addClass('u-display-none');
          Adapt.trigger('drawer:closed');
        } else {
          var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;

          var easing = showEasingAnimation || 'easeOutQuart';
          direction[this.drawerDir] = -this.$el.width();
          this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function () {
            this.$el.addClass('u-display-none').attr('aria-hidden', 'true');
            Adapt.trigger('drawer:closed');
          }, this));
          $('.js-shadow').velocity({
            opacity: 0
          }, {
            duration: this.drawerDuration,
            complete: function () {
              $('.js-shadow').addClass('u-display-none');
            }
          });
        }

        this._isCustomViewVisible = false;
        this.removeShadowEvent();
      }
    }, {
      key: "addShadowEvent",
      value: function addShadowEvent() {
        var _this2 = this;

        $('.js-shadow').one('click touchstart', function () {
          return _this2.onCloseDrawer();
        });
      }
    }, {
      key: "removeShadowEvent",
      value: function removeShadowEvent() {
        $('.js-shadow').off('click touchstart');
      }
    }, {
      key: "remove",
      value: function remove() {
        Backbone.View.prototype.remove.apply(this, arguments);
        $(window).off('keyup', this.onKeyUp);
        Adapt.trigger('drawer:empty');
        this.collection.reset();
        $('.js-shadow').remove();
      }
    }]);

    return DrawerView;
  }(Backbone.View);

  Object.assign(DrawerView, {
    childContainer: '.js-drawer-holder',
    childView: DrawerItemView$1
  });
  var DrawerView$1 = __AMD("core/js/views/drawerView", DrawerView);

  var DrawerCollection = new Backbone.Collection(null, {
    comparator: 'drawerOrder'
  });
  var Drawer = {};

  Drawer.addItem = function (drawerObject, eventCallback) {
    drawerObject.eventCallback = eventCallback;
    DrawerCollection.add(drawerObject);
  };

  Drawer.triggerCustomView = function (view, hasBackButton) {
    if (hasBackButton !== false) {
      hasBackButton = true;
    }

    Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);
  };

  Adapt.on({
    'adapt:start': function () {
      new DrawerView$1({
        collection: DrawerCollection
      });
    },
    'app:languageChanged': function () {
      Adapt.trigger('drawer:remove');
    }
  });
  __AMD("core/js/drawer", Adapt.drawer = Drawer);

  var NotifyPushView = __AMD("core/js/views/notifyPushView", function (_Backbone$View) {
    _inherits(NotifyPushView, _Backbone$View);

    var _super = _createSuper(NotifyPushView);

    function NotifyPushView() {
      _classCallCheck(this, NotifyPushView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushView, [{
      key: "className",
      value: function className() {
        var classes = 'notify-push ';
        classes += this.model.get('_classes') || '';
        return classes;
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'dialog',
          'aria-labelledby': 'notify-push-heading',
          'aria-modal': 'false'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, {
          'notify:pushShown notify:pushRemoved': this.updateIndexPosition,
          'remove': this.remove
        });
        this.listenTo(this.model.collection, {
          'remove': this.updateIndexPosition,
          'change:_index': this.updatePushPosition
        });
        this.preRender();
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-push-close-btn': 'closePush',
          'click .js-notify-push-inner': 'triggerEvent'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.hasBeenRemoved = false;
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['notifyPush'];
        this.$el.html(template(data)).appendTo('#wrapper');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.addClass('is-active');

        _.delay(this.closePush.bind(this), this.model.get('_timeout'));

        Adapt.trigger('notify:pushShown');
      }
    }, {
      key: "closePush",
      value: function closePush(event) {
        var _this = this;

        if (event) {
          event.preventDefault();
        }

        if (this.hasBeenRemoved === false) {
          this.hasBeenRemoved = true;
          this.$el.removeClass('is-active');

          _.delay(function () {
            _this.model.collection.remove(_this.model);

            Adapt.trigger('notify:pushRemoved', _this);

            _this.remove();
          }, 600);
        }
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        Adapt.trigger(this.model.get('_callbackEvent'));
        this.closePush();
      }
    }, {
      key: "updateIndexPosition",
      value: function updateIndexPosition() {
        var _this2 = this;

        if (this.hasBeenRemoved) return;
        var models = this.model.collection.models;
        models.forEach(function (model, index) {
          if (!model.get('_isActive')) return;
          model.set('_index', index);

          _this2.updatePushPosition();
        });
      }
    }, {
      key: "updatePushPosition",
      value: function updatePushPosition() {
        if (this.hasBeenRemoved) {
          return;
        }

        if (typeof this.model.get('_index') !== 'undefined') {
          var elementHeight = this.$el.height();
          var offset = 20;
          var navigationHeight = $('.nav').height();
          var currentIndex = this.model.get('_index');
          var flippedIndex = currentIndex === 0 ? 1 : 0;

          if (this.model.collection.where({
            _isActive: true
          }).length === 1) {
            flippedIndex = 0;
          }

          var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
          this.$el.css('top', positionLowerPush);
        }
      }
    }]);

    return NotifyPushView;
  }(Backbone.View));

  var NotifyModel = __AMD("core/js/models/notifyModel", function (_LockingModel) {
    _inherits(NotifyModel, _LockingModel);

    var _super = _createSuper(NotifyModel);

    function NotifyModel() {
      _classCallCheck(this, NotifyModel);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _showIcon: false,
          _timeout: 3000
        };
      }
    }]);

    return NotifyModel;
  }(LockingModel));

  var NotifyPushCollection = __AMD("core/js/collections/notifyPushCollection", function (_Backbone$Collection) {
    _inherits(NotifyPushCollection, _Backbone$Collection);

    var _super = _createSuper(NotifyPushCollection);

    function NotifyPushCollection() {
      _classCallCheck(this, NotifyPushCollection);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushCollection, [{
      key: "initialize",
      value: function initialize() {
        this.model = NotifyModel;
        this.listenTo(this, 'add', this.onPushAdded);
        this.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);
      }
    }, {
      key: "onPushAdded",
      value: function onPushAdded(model) {
        this.checkPushCanShow(model);
      }
    }, {
      key: "checkPushCanShow",
      value: function checkPushCanShow(model) {
        if (!this.canShowPush()) return;
        model.set('_isActive', true);
        this.showPush(model);
      }
    }, {
      key: "canShowPush",
      value: function canShowPush() {
        var availablePushNotifications = this.where({
          _isActive: true
        });
        return availablePushNotifications.length < 2;
      }
    }, {
      key: "showPush",
      value: function showPush(model) {
        new NotifyPushView({
          model: model
        });
      }
    }, {
      key: "onRemovePush",
      value: function onRemovePush(view) {
        var inactivePushNotifications = this.where({
          _isActive: false
        });

        if (inactivePushNotifications.length > 0) {
          this.checkPushCanShow(inactivePushNotifications[0]);
        }
      }
    }]);

    return NotifyPushCollection;
  }(Backbone.Collection));

  var ChildEvent = __AMD("core/js/childEvent", function (_Backbone$Controller) {
    _inherits(ChildEvent, _Backbone$Controller);

    var _super = _createSuper(ChildEvent);

    function ChildEvent() {
      _classCallCheck(this, ChildEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ChildEvent, [{
      key: "initialize",
      value: function initialize(type, target, model) {
        this.type = type;
        this.target = target;
        this.isForced = false;
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
        this.hasRequestChild = false;
        this._model = model;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
      }
    }, {
      key: "force",
      value: function force() {
        this.isForced = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!immediate) {
          return this.stopNext();
        }

        this.isStoppedImmediate = true;
      }
    }, {
      key: "stopNext",
      value: function stopNext() {
        this.isStoppedNext = true;
      }
    }, {
      key: "close",
      value: function close() {
        this.trigger('closed');
      }
    }, {
      key: "model",
      get: function () {
        return this._model;
      },
      set: function (model) {
        if (this.type !== 'requestChild') {
          Adapt.log.warn("Cannot change model in ".concat(this.type, " event."));
          return;
        }

        if (this._model) {
          Adapt.log.warn("Cannot inject two models in one sitting. ".concat(model.get('_id'), " attempts to overwrite ").concat(this._model.get('_id')));
          return;
        }

        this._model = model;
        this.hasRequestChild = true;
      }
    }]);

    return ChildEvent;
  }(Backbone.Controller));

  var AdaptView = function (_Backbone$View) {
    _inherits(AdaptView, _Backbone$View);

    var _super = _createSuper(AdaptView);

    function AdaptView() {
      _classCallCheck(this, AdaptView);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptView, [{
      key: "attributes",
      value: function attributes() {
        return {
          'data-adapt-id': this.model.get('_id')
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(this.model, {
          'change:_isVisible': this.toggleVisibility,
          'change:_isHidden': this.toggleHidden,
          'change:_isComplete': this.onIsCompleteChange
        });
        this.model.set({
          '_globals': Adapt.course.get('_globals'),
          '_isReady': false
        });
        this._isRemoved = false;

        if (Adapt.location._currentId === this.model.get('_id')) {
          Adapt.parentView = this;
        }

        this.preRender();
        this.render();
        this.setupOnScreenHandler();
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.addChildren();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRender view:preRender"), this);
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
        Adapt.trigger("".concat(type, "View:render view:render"), this);

        _.defer(function () {
          if (_this._isRemoved) return;

          _this.postRender();

          Adapt.trigger("".concat(type, "View:postRender view:postRender"), _this);
        });

        return this;
      }
    }, {
      key: "setupOnScreenHandler",
      value: function setupOnScreenHandler() {
        var _this2 = this;

        var onscreen = this.model.get('_onScreen');
        if (!onscreen || !onscreen._isEnabled) return;
        this.$el.addClass("has-animation ".concat(onscreen._classes, "-before"));
        this.$el.on('onscreen.adaptView', function (e, m) {
          if (!m.onscreen) return;
          var minVerticalInview = onscreen._percentInviewVertical || 33;
          if (m.percentInviewVertical < minVerticalInview) return;

          _this2.$el.addClass("".concat(onscreen._classes, "-after")).off('onscreen.adaptView');
        });
      }
    }, {
      key: "addChildren",
      value: function () {
        var _addChildren = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var addedCount, models, event, subsequentModels, model, ChildView, childView;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.nthChild = this.nthChild || 0;
                  _context.next = 3;
                  return this.addDescendants(false);

                case 3:
                  addedCount = _context.sent;

                case 4:

                  models = this.model.getAvailableChildModels();
                  event = this._getAddChildEvent(models[this.nthChild]);

                  if (event) {
                    _context.next = 9;
                    break;
                  }

                  return _context.abrupt("break", 26);

                case 9:
                  if (event.isForced) {
                    event.reset();
                  }

                  if (!(event.isStoppedImmediate || !event.model)) {
                    _context.next = 14;
                    break;
                  }

                  subsequentModels = models.slice(this.nthChild);
                  subsequentModels.forEach(function (model) {
                    return model.setOnChildren('_isRendered', false);
                  });
                  return _context.abrupt("break", 26);

                case 14:
                  model = event.model;
                  model.set({
                    '_isRendered': true,
                    '_nthChild': ++this.nthChild
                  });
                  ChildView = this.constructor.childView || Adapt.getViewClass(model);

                  if (ChildView) {
                    _context.next = 19;
                    break;
                  }

                  throw new Error("The component '".concat(model.attributes._id, "' ('").concat(model.attributes._component, "') has not been installed, and so is not available in your project."));

                case 19:
                  childView = new ChildView({
                    model: model
                  });
                  this.addChildView(childView);
                  addedCount++;

                  if (!event.isStoppedNext) {
                    _context.next = 24;
                    break;
                  }

                  return _context.abrupt("break", 26);

                case 24:
                  _context.next = 4;
                  break;

                case 26:
                  if (addedCount) {
                    _context.next = 28;
                    break;
                  }

                  return _context.abrupt("return", addedCount);

                case 28:
                  this.model.set('_isReady', false);
                  return _context.abrupt("return", addedCount);

                case 30:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function addChildren() {
          return _addChildren.apply(this, arguments);
        }

        return addChildren;
      }()
    }, {
      key: "addChildView",
      value: function addChildView(childView) {
        var childViews = this.getChildViews() || [];
        childViews.push(childView);
        this.setChildViews(childViews);
        var $parentContainer = this.$(this.constructor.childContainer);

        switch (childView.model.get('_renderPosition')) {
          case 'outer-append':
            this.$el.append(childView.$el);
            break;

          case 'inner-append':
          default:
            $parentContainer.append(childView.$el);
            break;
        }

        Adapt.trigger('view:childAdded', this, childView);
        return childView;
      }
    }, {
      key: "addDescendants",
      value: function () {
        var _addDescendants = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var addedDescendantCount, childViews, i, l, view;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  addedDescendantCount = 0;
                  childViews = this.getChildViews();

                  if (childViews) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return", addedDescendantCount);

                case 4:
                  i = 0, l = childViews.length;

                case 5:
                  if (!(i < l)) {
                    _context2.next = 20;
                    break;
                  }

                  view = childViews[i];

                  if (!view.addChildren) {
                    _context2.next = 13;
                    break;
                  }

                  _context2.next = 10;
                  return view.addChildren();

                case 10:
                  _context2.t0 = _context2.sent;
                  _context2.next = 14;
                  break;

                case 13:
                  _context2.t0 = 0;

                case 14:
                  addedDescendantCount = _context2.t0;

                  if (!addedDescendantCount) {
                    _context2.next = 17;
                    break;
                  }

                  return _context2.abrupt("break", 20);

                case 17:
                  i++;
                  _context2.next = 5;
                  break;

                case 20:
                  if (addedDescendantCount) {
                    _context2.next = 23;
                    break;
                  }

                  this.model.checkReadyStatus();
                  return _context2.abrupt("return", addedDescendantCount);

                case 23:
                  this.model.set('_isReady', false);
                  return _context2.abrupt("return", addedDescendantCount);

                case 25:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function addDescendants() {
          return _addDescendants.apply(this, arguments);
        }

        return addDescendants;
      }()
    }, {
      key: "whenReady",
      value: function () {
        var _whenReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var _this3 = this;

          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!this.model.get('_isReady')) {
                    _context3.next = 2;
                    break;
                  }

                  return _context3.abrupt("return");

                case 2:
                  return _context3.abrupt("return", new Promise(function (resolve) {
                    var onReadyChange = function (model, value) {
                      if (!value) return;

                      _this3.stopListening(_this3.model, 'change:_isReady', onReadyChange);

                      resolve();
                    };

                    _this3.listenTo(_this3.model, 'change:_isReady', onReadyChange);

                    _this3.model.checkReadyStatus();
                  }));

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function whenReady() {
          return _whenReady.apply(this, arguments);
        }

        return whenReady;
      }()
    }, {
      key: "_getAddChildEvent",
      value: function _getAddChildEvent(model) {
        var isRequestChild = !model;
        var event = new ChildEvent(null, this, model);

        if (isRequestChild) {
          var canRequestChild = this.model.get('_canRequestChild');

          if (!canRequestChild) {
            return;
          }

          event.type = 'requestChild';
          Adapt.trigger('view:requestChild', event);

          if (!event.hasRequestChild) {
            event.close();
            return;
          }
        }

        event.type = 'addChild';
        Adapt.trigger('view:addChild', event);
        event.close();
        return event;
      }
    }, {
      key: "findDescendantViews",
      value: function findDescendantViews(isParentFirst) {
        var descendants = [];
        var childViews = this.getChildViews();
        childViews && childViews.forEach(function (view) {
          if (isParentFirst) descendants.push(view);
          var children = view.findDescendantViews && view.findDescendantViews(isParentFirst);
          if (children) descendants.push.apply(descendants, _toConsumableArray(children));
          if (!isParentFirst) descendants.push(view);
        });
        return descendants;
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.model.set('_isReady', true);
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.model.get('_isVisible')) return;
        this.model.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "resetCompletionStatus",
      value: function resetCompletionStatus(type) {
        if (!this.model.get('_canReset')) return;
        var descendantComponents = this.model.findDescendantModels('component');

        if (descendantComponents.length === 0) {
          this.model.reset(type);
        } else {
          descendantComponents.forEach(function (model) {
            return model.reset(type);
          });
        }
      }
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this4 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt.trigger("".concat(type, "View:remove view:remove"), this);
        this._isRemoved = true;
        this.stopListening();
        Adapt.wait.for(function (end) {
          _this4.$el.off('onscreen.adaptView');

          _get(_getPrototypeOf(AdaptView.prototype), "remove", _this4).call(_this4);

          _.defer(function () {
            Adapt.trigger("".concat(type, "View:postRemove view:postRemove"), _this4);
          });

          end();
        });
        return this;
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        return this.model.get('_isVisible') ? '' : 'u-visibility-hidden';
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility() {
        this.$el.toggleClass('u-visibility-hidden', !this.model.get('_isVisible'));
      }
    }, {
      key: "setHidden",
      value: function setHidden() {
        return this.model.get('_isHidden') ? 'u-display-none' : '';
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden() {
        this.$el.toggleClass('u-display-none', this.model.get('_isHidden'));
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        this.$el.toggleClass('is-complete', isComplete);
      }
    }, {
      key: "getChildViews",
      value: function getChildViews() {
        return this._childViews;
      }
    }, {
      key: "setChildViews",
      value: function setChildViews(value) {
        this._childViews = value;
      }
    }, {
      key: "childViews",
      get: function () {
        Adapt.log.deprecated("view.childViews use view.getChildViews()");
        return _.indexBy(this.getChildViews(), function (view) {
          return view.model.get('_id');
        });
      }
    }]);

    return AdaptView;
  }(Backbone.View);

  AdaptView.className = '';
  var AdaptView$1 = __AMD("core/js/views/adaptView", AdaptView);

  var NotifyView = __AMD("core/js/views/notifyView", function (_Backbone$View) {
    _inherits(NotifyView, _Backbone$View);

    var _super = _createSuper(NotifyView);

    function NotifyView() {
      _classCallCheck(this, NotifyView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyView, [{
      key: "className",
      value: function className() {
        return "notify ".concat(this.model.get('_classes') || '');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return Object.assign({
          role: 'dialog',
          'aria-labelledby': 'notify-heading',
          'aria-modal': 'true'
        }, this.model.get('_attributes'));
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-btn-alert': 'onAlertButtonClicked',
          'click .js-notify-btn-prompt': 'onPromptButtonClicked',
          'click .js-notify-close-btn': 'onCloseButtonClicked',
          'click .js-notify-shadow-click': 'onShadowClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'resetNotifySize', 'onKeyUp');

        this.disableAnimation = Adapt.config.get('_disableAnimation') || false;
        this.isOpen = false;
        this.hasOpened = false;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, {
          'remove page:scrollTo': this.closeNotify,
          'notify:resize': this.resetNotifySize,
          'notify:cancel': this.cancelNotify,
          'notify:close': this.closeNotify,
          'device:resize': this.resetNotifySize
        });
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates.notify;
        this.$el.css('visibility', 'hidden');
        this.$el.html(template(data)).appendTo('body');
        this.$('.notify__popup').css('visibility', 'hidden');
        this.$el.css('visibility', 'visible');
        this.showNotify();
        return this;
      }
    }, {
      key: "onAlertButtonClicked",
      value: function onAlertButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt.trigger(this.model.get('_callbackEvent'), this);
      }
    }, {
      key: "onPromptButtonClicked",
      value: function onPromptButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt.trigger($(event.currentTarget).attr('data-event'), this);
      }
    }, {
      key: "onCloseButtonClicked",
      value: function onCloseButtonClicked(event) {
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "onShadowClicked",
      value: function onShadowClicked(event) {
        event.preventDefault();
        if (this.model.get('_closeOnShadowClick') === false) return;
        this.cancelNotify();
      }
    }, {
      key: "cancelNotify",
      value: function cancelNotify() {
        if (this.model.get('_isCancellable') === false) return;
        this.closeNotify();
        Adapt.trigger('notify:cancelled', this);
      }
    }, {
      key: "resetNotifySize",
      value: function resetNotifySize() {
        if (!this.hasOpened) return;
        this.resizeNotify();
      }
    }, {
      key: "resizeNotify",
      value: function resizeNotify() {
        var windowHeight = $(window).height();
        var notifyHeight = this.$('.notify__popup-inner').outerHeight();
        var isFullWindow = notifyHeight >= windowHeight;
        this.$('.notify__popup').css({
          'height': isFullWindow ? '100%' : 'auto',
          'top': isFullWindow ? 0 : '',
          'margin-top': isFullWindow ? '' : -(notifyHeight / 2),
          'overflow-y': isFullWindow ? 'scroll' : '',
          '-webkit-overflow-scrolling': isFullWindow ? 'touch' : ''
        });
      }
    }, {
      key: "showNotify",
      value: function () {
        var _showNotify = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.isOpen = true;
                  _context.next = 3;
                  return this.addSubView();

                case 3:
                  Adapt.notify.stack.push(this);
                  this.$previousActiveElement = $(document.activeElement);
                  Adapt.trigger('notify:opened', this);
                  this.$el.imageready(this.onLoaded.bind(this));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function showNotify() {
          return _showNotify.apply(this, arguments);
        }

        return showNotify;
      }()
    }, {
      key: "onLoaded",
      value: function onLoaded() {
        var _this = this;

        if (this.disableAnimation) {
          this.$('.notify__shadow').css('display', 'block');
        } else {
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__shadow').css('display', 'block');
            }
          });
        }

        this.resizeNotify();

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'visible');
          this.onOpened();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__popup').css('visibility', 'visible');

              _this.onOpened();
            }
          });
        }
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        $.inview();
        this.hasOpened = true;
        Adapt.a11y.popupOpened(this.$('.notify__popup'));
        Adapt.a11y.scrollDisable('body');
        $('html').addClass('notify');
        Adapt.a11y.focusFirst(this.$('.notify__popup'), {
          defer: false
        });
      }
    }, {
      key: "addSubView",
      value: function () {
        var _addSubView = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var model, View;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.subView = this.model.get('_view');

                  if (this.model.get('_id')) {
                    model = Adapt.findById(this.model.get('_id'));
                    View = Adapt.getViewClass(model);
                    this.subView = new View({
                      model: model
                    });
                  }

                  if (this.subView) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  this.subView.$el.on('resize', this.resetNotifySize);
                  this.$('.notify__content-inner').prepend(this.subView.$el);

                  if (!(!(this.subView instanceof AdaptView$1) || this.subView.model.get('_isReady'))) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return");

                case 8:
                  return _context2.abrupt("return", new Promise(function (resolve) {
                    var check = function (model, value) {
                      if (!value) return;

                      _this2.subView.model.off('change:_isReady', check);

                      resolve();
                    };

                    _this2.subView.model.on('change:_isReady', check);
                  }));

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function addSubView() {
          return _addSubView.apply(this, arguments);
        }

        return addSubView;
      }()
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        var _this3 = this;

        var stackItem = Adapt.notify.stack[Adapt.notify.stack.length - 1];
        if (this !== stackItem) return;
        Adapt.notify.stack.pop();
        if (!this.isOpen) return;
        this.isOpen = false;

        if (this.hasOpened) {
          this.onCloseReady();
          return;
        }

        this.listenToOnce(Adapt, 'popup:opened', function () {
          _.defer(_this3.onCloseReady.bind(_this3));
        });
      }
    }, {
      key: "onCloseReady",
      value: function onCloseReady() {
        var _this4 = this;

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'hidden');
          this.$el.css('visibility', 'hidden');
          this.remove();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$('.notify__popup').css('visibility', 'hidden');
            }
          });
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$el.css('visibility', 'hidden');

              _this4.remove();
            }
          });
        }

        Adapt.a11y.scrollEnable('body');
        $('html').removeClass('notify');
        Adapt.a11y.popupClosed(this.$previousActiveElement);
        Adapt.trigger('notify:closed', this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _get2;

        this.removeSubView();
        $(window).off('keyup', this.onKeyUp);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NotifyView.prototype), "remove", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "removeSubView",
      value: function removeSubView() {
        if (!this.subView) return;
        this.subView.$el.off('resize', this.resetNotifySize);

        if (this.subView instanceof AdaptView$1) {
          var views = [].concat(_toConsumableArray(this.subView.findDescendantViews()), [this.subView]);
          views.forEach(function (view) {
            view.model.set('_isReady', false);
            view.remove();
          });
        } else {
          this.subView.remove();
        }

        this.subView = null;
      }
    }]);

    return NotifyView;
  }(Backbone.View));

  var Notify = function (_Backbone$Controller) {
    _inherits(Notify, _Backbone$Controller);

    var _super = _createSuper(Notify);

    function Notify() {
      _classCallCheck(this, Notify);

      return _super.apply(this, arguments);
    }

    _createClass(Notify, [{
      key: "initialize",
      value: function initialize() {
        this._stack = [];
        this.notifyPushes = new NotifyPushCollection();
        this.listenTo(Adapt, {
          'notify:popup': this._deprecated.bind(this, 'popup'),
          'notify:alert': this._deprecated.bind(this, 'alert'),
          'notify:prompt': this._deprecated.bind(this, 'prompt'),
          'notify:push': this._deprecated.bind(this, 'push')
        });
      }
    }, {
      key: "_deprecated",
      value: function _deprecated(type, notifyObject) {
        Adapt.log.deprecated("NOTIFY DEPRECATED: Adapt.trigger('notify:".concat(type, "', notifyObject); is no longer supported, please use Adapt.notify.").concat(type, "(notifyObject);"));
        return this.create(notifyObject, {
          _type: type
        });
      }
    }, {
      key: "create",
      value: function create(notifyObject, defaults) {
        notifyObject = _.defaults({}, notifyObject, defaults, {
          _type: 'popup',
          _isCancellable: true,
          _showCloseButton: true,
          _closeOnShadowClick: true
        });

        if (notifyObject._type === 'push') {
          this.notifyPushes.push(notifyObject);
          return;
        }

        return new NotifyView({
          model: new NotifyModel(notifyObject)
        });
      }
    }, {
      key: "popup",
      value: function popup(notifyObject) {
        return this.create(notifyObject, {
          _type: 'popup'
        });
      }
    }, {
      key: "alert",
      value: function alert(notifyObject) {
        return this.create(notifyObject, {
          _type: 'alert'
        });
      }
    }, {
      key: "prompt",
      value: function prompt(notifyObject) {
        return this.create(notifyObject, {
          _type: 'prompt'
        });
      }
    }, {
      key: "push",
      value: function push(notifyObject) {
        return this.create(notifyObject, {
          _type: 'push'
        });
      }
    }, {
      key: "stack",
      get: function () {
        return this._stack;
      }
    }]);

    return Notify;
  }(Backbone.Controller);

  __AMD("core/js/notify", Adapt.notify = new Notify());

  var RouterModel = __AMD("core/js/models/routerModel", function (_LockingModel) {
    _inherits(RouterModel, _LockingModel);

    var _super = _createSuper(RouterModel);

    function RouterModel() {
      _classCallCheck(this, RouterModel);

      return _super.apply(this, arguments);
    }

    _createClass(RouterModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _canNavigate: true,
          _shouldNavigateFocus: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canNavigate: false,
          _shouldNavigateFocus: false
        };
      }
    }]);

    return RouterModel;
  }(LockingModel));

  var Router = function (_Backbone$Router) {
    _inherits(Router, _Backbone$Router);

    var _super = _createSuper(Router);

    function Router() {
      _classCallCheck(this, Router);

      return _super.apply(this, arguments);
    }

    _createClass(Router, [{
      key: "routes",
      value: function routes() {
        return {
          '': 'handleRoute',
          'id/:id': 'handleRoute',
          ':pluginName(/*location)(/*action)': 'handleRoute'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(_ref) {
        var model = _ref.model;
        this.model = model;
        this._navigationRoot = null;
        this._isCircularNavigationInProgress = false;
        this.showLoading();
        this.$wrapper = $('#wrapper');
        this.$html = $('html');
        this.listenToOnce(Adapt, 'app:dataReady', this.setDocumentTitle);
        this.listenTo(Adapt, 'router:navigateTo', this.navigateToArguments);
      }
    }, {
      key: "showLoading",
      value: function showLoading() {
        $('.js-loading').show();
      }
    }, {
      key: "hideLoading",
      value: function hideLoading() {
        $('.js-loading').hide();
      }
    }, {
      key: "setDocumentTitle",
      value: function setDocumentTitle() {
        var currentModel = Adapt.location._currentModel;
        var hasSubTitle = currentModel && currentModel !== Adapt.router.rootModel && currentModel.get('title');
        var title = [this.rootModel.get('title'), hasSubTitle && currentModel.get('title')].filter(Boolean).join(' | ');
        this.listenToOnce(Adapt, 'contentObjectView:preRender', function () {
          var escapedTitle = $("<div>".concat(title, "</div>")).text();
          document.title = escapedTitle;
        });
      }
    }, {
      key: "navigateToArguments",
      value: function navigateToArguments(args) {
        args = args.filter(function (v) {
          return v !== null;
        });
        var options = {
          trigger: false,
          replace: false
        };

        if (args.length === 1 && Adapt.findById(args[0])) {
          this.navigate('#/id/' + args[0], options);
          return;
        }

        if (args.length <= 3) {
          this.navigate('#/' + args.join('/'), options);
          return;
        }

        Adapt.log.deprecated("Use Backbone.history.navigate or window.location.href instead of Adapt.trigger('router:navigateTo')");
        this.handleRoute.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "handleRoute",
      value: function handleRoute() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        args = args.filter(function (v) {
          return v !== null;
        });

        if (this.model.get('_canNavigate')) {
          this._isCircularNavigationInProgress = false;
        }

        if (this._isCircularNavigationInProgress === false) {
          Adapt.trigger('router:navigate', args);
        }

        if (this.model.get('_canNavigate')) {
          this.model.set('_canNavigate', false, {
            pluginName: 'adapt'
          });

          if (args.length <= 1) {
            return this.handleId.apply(this, _toConsumableArray(args));
          }

          return this.handlePluginRouter.apply(this, _toConsumableArray(args));
        }

        if (this._isCircularNavigationInProgress) {
          this._isCircularNavigationInProgress = false;
          return;
        }

        this._isCircularNavigationInProgress = true;
        Adapt.trigger('router:navigationCancelled', args);
        this.navigateToCurrentRoute(true);
      }
    }, {
      key: "handlePluginRouter",
      value: function () {
        var _handlePluginRouter = _asyncToGenerator(regeneratorRuntime.mark(function _callee(pluginName, location, action) {
          var pluginLocation;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  pluginLocation = [pluginName, location && "-".concat(location), action && "-".concat(action)].filter(Boolean).join('');
                  _context.next = 3;
                  return this.updateLocation(pluginLocation, null, null, null);

                case 3:
                  Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);
                  Adapt.trigger('router:plugin', pluginName, location, action);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handlePluginRouter(_x, _x2, _x3) {
          return _handlePluginRouter.apply(this, arguments);
        }

        return handlePluginRouter;
      }()
    }, {
      key: "handleId",
      value: function () {
        var _handleId = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(id) {
          var _this = this;

          var rootModel, model, isContentObject, navigateToId, isRoot, startController, isCourse, type, location, ViewClass, isMenu;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  rootModel = Adapt.router.rootModel;
                  model = !id ? rootModel : Adapt.findById(id);

                  if (model) {
                    _context2.next = 5;
                    break;
                  }

                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });
                  return _context2.abrupt("return");

                case 5:
                  isContentObject = model instanceof ContentObjectModel;
                  navigateToId = model.get('_id');
                  model = isContentObject ? model : model.findAncestor('contentobject');
                  id = model.get('_id');
                  isRoot = model === rootModel;

                  if (!(isRoot && Adapt.course.has('_start'))) {
                    _context2.next = 14;
                    break;
                  }

                  startController = Adapt.course.get('_start');

                  if (!(startController._isEnabled === true && startController._isMenuDisabled === true)) {
                    _context2.next = 14;
                    break;
                  }

                  return _context2.abrupt("return");

                case 14:
                  if (!(model.get('_isLocked') && Adapt.config.get('_forceRouteLocking'))) {
                    _context2.next = 20;
                    break;
                  }

                  Adapt.log.warn('Unable to navigate to locked id: ' + id);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                  if (!(Adapt.location._previousId === undefined)) {
                    _context2.next = 19;
                    break;
                  }

                  return _context2.abrupt("return", this.navigate('#/', {
                    trigger: true,
                    replace: true
                  }));

                case 19:
                  return _context2.abrupt("return", this.navigateBack());

                case 20:
                  this.showLoading();
                  _context2.next = 23;
                  return Adapt.remove();

                case 23:
                  isCourse = model instanceof CourseModel$1;
                  type = isCourse ? 'menu' : model.get('_type');
                  location = isCourse ? 'course' : "".concat(type, "-").concat(id);
                  model.set('_isVisited', true);
                  _context2.next = 29;
                  return this.updateLocation(location, type, id, model);

                case 29:
                  Adapt.once('contentObjectView:ready', function () {
                    _this.model.set('_canNavigate', true, {
                      pluginName: 'adapt'
                    });

                    _this.handleNavigationFocus();
                  });
                  Adapt.trigger("router:".concat(type, " router:contentObject"), model);
                  ViewClass = Adapt.getViewClass(model);
                  isMenu = model instanceof MenuModel$1;

                  if (!(!ViewClass && isMenu)) {
                    _context2.next = 36;
                    break;
                  }

                  Adapt.log.deprecated("Using event based menu view instantiation for '".concat(Adapt.getViewName(model), "'"));
                  return _context2.abrupt("return");

                case 36:
                  if (isMenu) {
                    _context2.next = 40;
                    break;
                  }

                  _.invoke(model.getAllDescendantModels(), 'checkIfResetOnRevisit');

                  _context2.next = 40;
                  return Adapt.deferUntilCompletionChecked();

                case 40:
                  this.$wrapper.append(new ViewClass({
                    model: model
                  }).$el);

                  if (!(!isContentObject && !this.isScrolling)) {
                    _context2.next = 44;
                    break;
                  }

                  _context2.next = 44;
                  return Adapt.navigateToElement('.' + navigateToId, {
                    replace: true,
                    duration: 400
                  });

                case 44:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function handleId(_x4) {
          return _handleId.apply(this, arguments);
        }

        return handleId;
      }()
    }, {
      key: "updateLocation",
      value: function () {
        var _updateLocation = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(currentLocation, type, id, currentModel) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  Adapt.location._previousModel = Adapt.location._currentModel;
                  Adapt.location._previousId = Adapt.location._currentId;
                  Adapt.location._previousContentType = Adapt.location._contentType;
                  Adapt.location._currentModel = currentModel;
                  Adapt.location._currentId = id;
                  Adapt.location._contentType = type;
                  Adapt.location._currentLocation = currentLocation;

                  if (type === 'menu') {
                    Adapt.location._lastVisitedType = 'menu';
                    Adapt.location._lastVisitedMenu = id;
                  } else if (type === 'page') {
                    Adapt.location._lastVisitedType = 'page';
                    Adapt.location._lastVisitedPage = id;
                  }

                  this.setDocumentTitle();
                  this.setGlobalClasses();
                  Adapt.trigger('router:location', Adapt.location);
                  _context3.next = 13;
                  return Adapt.wait.queue();

                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function updateLocation(_x5, _x6, _x7, _x8) {
          return _updateLocation.apply(this, arguments);
        }

        return updateLocation;
      }()
    }, {
      key: "setGlobalClasses",
      value: function setGlobalClasses() {
        var currentModel = Adapt.location._currentModel;
        var htmlClasses = currentModel && currentModel.get('_htmlClasses') || '';
        var classes = Adapt.location._currentId ? "location-".concat(Adapt.location._contentType, " location-id-").concat(Adapt.location._currentId) : "location-".concat(Adapt.location._currentLocation);
        var currentClasses = "".concat(classes, " ").concat(htmlClasses);
        this.$html.removeClass(Adapt.location._previousClasses).addClass(currentClasses).attr('data-location', Adapt.location._currentLocation);
        this.$wrapper.removeClass().addClass(classes).attr('data-location', Adapt.location._currentLocation);
        Adapt.location._previousClasses = currentClasses;
      }
    }, {
      key: "handleNavigationFocus",
      value: function handleNavigationFocus() {
        if (!this.model.get('_shouldNavigateFocus')) return;
        Adapt.a11y.focus('body');
      }
    }, {
      key: "navigateBack",
      value: function navigateBack() {
        Backbone.history.history.back();
      }
    }, {
      key: "navigateToCurrentRoute",
      value: function navigateToCurrentRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        if (!Adapt.location._currentId) {
          return;
        }

        var currentId = Adapt.location._currentModel.get('_id');

        var isRoot = Adapt.location._currentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + currentId;
        this.navigate(route, {
          trigger: true,
          replace: true
        });
      }
    }, {
      key: "navigateToPreviousRoute",
      value: function navigateToPreviousRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var currentModel = Adapt.location._currentModel;
        var previousModel = Adapt.location._previousModel;

        if (!currentModel) {
          return this.navigateBack();
        }

        if (Adapt.location._currentModel instanceof MenuModel$1) {
          return this.navigateToParent();
        }

        if (previousModel) {
          return this.navigateBack();
        }

        this.navigateToParent();
      }
    }, {
      key: "navigateToParent",
      value: function navigateToParent(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var parentId = Adapt.location._currentModel.get('_parentId');

        var parentModel = Adapt.findById(parentId);
        var isRoot = parentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + parentId;
        this.navigate(route, {
          trigger: true
        });
      }
    }, {
      key: "navigateToHomeRoute",
      value: function navigateToHomeRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        this.navigate('#/', {
          trigger: true
        });
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(selector) {
          var _this2 = this;

          var settings,
              currentModelId,
              currentModel,
              shouldReplace,
              contentObject,
              contentObjectId,
              isInCurrentContentObject,
              location,
              disableScrollToAnimation,
              offsetTop,
              _args4 = arguments;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  settings = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                  currentModelId = selector.replace(/\./g, '').split(' ')[0];
                  currentModel = Adapt.findById(currentModelId);

                  if (!(currentModel && (!currentModel.get('_isRendered') || !currentModel.get('_isReady')))) {
                    _context4.next = 17;
                    break;
                  }

                  shouldReplace = settings.replace || false;
                  contentObject = currentModel instanceof ContentObjectModel ? currentModel : currentModel.findAncestor('contentobject');
                  contentObjectId = contentObject.get('_id');
                  isInCurrentContentObject = contentObjectId !== Adapt.location._currentId;

                  if (!isInCurrentContentObject) {
                    _context4.next = 15;
                    break;
                  }

                  this.isScrolling = true;
                  this.navigate("#/id/".concat(currentModelId), {
                    trigger: true,
                    replace: shouldReplace
                  });
                  this.model.set('_shouldNavigateFocus', false, {
                    pluginName: 'adapt'
                  });
                  _context4.next = 14;
                  return new Promise(function (resolve) {
                    return Adapt.once('contentObjectView:ready', _.debounce(function () {
                      _this2.model.set('_shouldNavigateFocus', true, {
                        pluginName: 'adapt'
                      });

                      resolve();
                    }, 1));
                  });

                case 14:
                  this.isScrolling = false;

                case 15:
                  _context4.next = 17;
                  return Adapt.parentView.renderTo(currentModelId);

                case 17:
                  if (currentModel && selector === currentModel.get('_id')) {
                    selector = ".".concat(selector);
                  }

                  location = Adapt.location._contentType ? Adapt.location._contentType : Adapt.location._currentLocation;
                  Adapt.trigger("".concat(location, ":scrollTo"), selector);
                  disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;

                  if (disableScrollToAnimation) {
                    settings.duration = 0;
                  } else if (!settings.duration) {
                    settings.duration = $.scrollTo.defaults.duration;
                  }

                  offsetTop = 0;

                  if (Adapt.scrolling.isLegacyScrolling) {
                    offsetTop = -$('.nav').outerHeight();

                    if ($(selector).hasClass('component')) {
                      offsetTop -= $(selector).find('.aria-label').height() || 0;
                    }
                  }

                  if (!settings.offset) settings.offset = {
                    top: offsetTop,
                    left: 0
                  };
                  if (settings.offset.top === undefined) settings.offset.top = offsetTop;
                  if (settings.offset.left === undefined) settings.offset.left = 0;
                  if (settings.offset.left === 0) settings.axis = 'y';

                  if (Adapt.get('_canScroll') !== false) {
                    $.scrollTo(selector, settings);
                  }

                  _context4.next = 31;
                  return new Promise(function (resolve) {
                    _.delay(function () {
                      Adapt.a11y.focusNext(selector);
                      Adapt.trigger("".concat(location, ":scrolledTo"), selector);
                      resolve();
                    }, settings.duration + 300);
                  });

                case 31:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function navigateToElement(_x9) {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "get",
      value: function get() {
        var _this$model;

        Adapt.log.deprecated('Adapt.router.get, please use Adapt.router.model.get');
        return (_this$model = this.model).get.apply(_this$model, arguments);
      }
    }, {
      key: "set",
      value: function set() {
        var _this$model2;

        Adapt.log.deprecated('Adapt.router.set, please use Adapt.router.model.set');
        return (_this$model2 = this.model).set.apply(_this$model2, arguments);
      }
    }, {
      key: "rootModel",
      get: function () {
        return this._navigationRoot || Adapt.course;
      },
      set: function (model) {
        this._navigationRoot = model;
      }
    }]);

    return Router;
  }(Backbone.Router);

  Adapt.router = new Router({
    model: new RouterModel(null, {
      reset: true
    })
  });
  Adapt.navigateToElement = Adapt.router.navigateToElement.bind(Adapt.router);
  __AMD("core/js/router", Adapt.router);

  var AdaptSubsetCollection = __AMD("core/js/collections/adaptSubsetCollection", function (_AdaptCollection) {
    _inherits(AdaptSubsetCollection, _AdaptCollection);

    var _super = _createSuper(AdaptSubsetCollection);

    function AdaptSubsetCollection() {
      _classCallCheck(this, AdaptSubsetCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSubsetCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        _get(_getPrototypeOf(AdaptSubsetCollection.prototype), "initialize", this).call(this, models, options);

        this.parent = options.parent;
        this.listenTo(this.parent, 'reset', this.loadSubset);
      }
    }, {
      key: "loadSubset",
      value: function loadSubset() {
        var _this = this;

        this.set(this.parent.filter(function (model) {
          return model instanceof _this.model;
        }));
        this._byAdaptID = this.groupBy('_id');
      }
    }]);

    return AdaptSubsetCollection;
  }(AdaptCollection));

  var ArticleModel = function (_AdaptModel) {
    _inherits(ArticleModel, _AdaptModel);

    var _super = _createSuper(ArticleModel);

    function ArticleModel() {
      _classCallCheck(this, ArticleModel);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleModel, [{
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'article';
      }
    }, {
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('articleModel._parent, use articleModel.getParent() instead, parent models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('articleModel._siblings, use articleModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('articleModel._children, use articleModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'blocks';
      }
    }]);

    return ArticleModel;
  }(AdaptModel);

  Adapt.register('article', {
    model: ArticleModel
  });
  var ArticleModel$1 = __AMD("core/js/models/articleModel", ArticleModel);

  var BlockModel = function (_AdaptModel) {
    _inherits(BlockModel, _AdaptModel);

    var _super = _createSuper(BlockModel);

    function BlockModel() {
      _classCallCheck(this, BlockModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlockModel, [{
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'block';
      }
    }, {
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('blockModel._parent, use blockModel.getParent() instead, parent models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('blockModel._siblings, use blockModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('blockModel._children, use blockModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'components';
      }
    }]);

    return BlockModel;
  }(AdaptModel);

  Adapt.register('block', {
    model: BlockModel
  });
  var BlockModel$1 = __AMD("core/js/models/blockModel", BlockModel);

  var ComponentModel = function (_AdaptModel) {
    _inherits(ComponentModel, _AdaptModel);

    var _super = _createSuper(ComponentModel);

    function ComponentModel() {
      _classCallCheck(this, ComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentModel, [{
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'component';
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return AdaptModel.resultExtend('defaults', {
          _isA11yComponentDescriptionEnabled: true,
          _userAnswer: null,
          _attemptStates: null
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return AdaptModel.resultExtend('trackable', ['_userAnswer', '_attemptStates']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return AdaptModel.resultExtend('trackableType', [Array, Array]);
      }
    }, {
      key: "init",
      value: function init() {
        if (Adapt.get('_isStarted')) {
          this.onAdaptInitialize();
          return;
        }

        this.listenToOnce(Adapt, 'adapt:initialize', this.onAdaptInitialize);
      }
    }, {
      key: "onAdaptInitialize",
      value: function onAdaptInitialize() {
        this.restoreUserAnswers();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {}
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {}
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', null);
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        if (!this.get('_canReset') && !force) return;
        this.resetUserAnswer();

        _get(_getPrototypeOf(ComponentModel.prototype), "reset", this).call(this, type, force);
      }
    }, {
      key: "getAttemptState",
      value: function getAttemptState() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toJSON();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var values = trackables.map(function (n) {
          return object[n];
        });
        var booleans = values.filter(function (v, i) {
          return types[i] === Boolean;
        }).map(Boolean);
        var numbers = values.filter(function (v, i) {
          return types[i] === Number;
        }).map(function (v) {
          return Number(v) || 0;
        });
        var arrays = values.filter(function (v, i) {
          return types[i] === Array;
        });
        return [numbers, booleans, arrays];
      }
    }, {
      key: "getAttemptObject",
      value: function getAttemptObject() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptState();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var numbers = (state[0] || []).slice(0);
        var booleans = (state[1] || []).slice(0);
        var arrays = (state[2] || []).slice(0);
        var object = {};
        trackables.forEach(function (n, i) {
          if (n === '_id') return;

          switch (types[i]) {
            case Number:
              object[n] = numbers.shift();
              break;

            case Boolean:
              object[n] = booleans.shift();
              break;

            case Array:
              object[n] = arrays.shift();
              break;
          }
        });
        return object;
      }
    }, {
      key: "setAttemptObject",
      value: function setAttemptObject(object) {
        var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.set(object, {
          silent: silent
        });
      }
    }, {
      key: "addAttemptObject",
      value: function addAttemptObject() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptObject();
        var attemptStates = this.get('_attemptStates') || [];
        var state = this.getAttemptState(object);
        attemptStates.push(state);
        this.set('_attemptStates', attemptStates);
      }
    }, {
      key: "getAttemptObjects",
      value: function getAttemptObjects() {
        var _this = this;

        var states = this.get('_attemptStates') || [];
        return states.map(function (state) {
          return _this.getAttemptObject(state);
        });
      }
    }, {
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('componentModel._parent, use componentModel.getParent() instead, parent models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('componentModel._siblings, use componentModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return false;
      }
    }]);

    return ComponentModel;
  }(AdaptModel);

  Adapt.register('component', {
    model: ComponentModel
  });
  var ComponentModel$1 = __AMD("core/js/models/componentModel", ComponentModel);

  var PageModel = function (_ContentObjectModel) {
    _inherits(PageModel, _ContentObjectModel);

    var _super = _createSuper(PageModel);

    function PageModel() {
      _classCallCheck(this, PageModel);

      return _super.apply(this, arguments);
    }

    _createClass(PageModel, [{
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'page';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('pageModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'articles';
      }
    }]);

    return PageModel;
  }(ContentObjectModel);

  Adapt.register('page', {
    model: PageModel
  });
  __AMD("core/js/models/pageModel", PageModel);

  var ContentObjectView = __AMD("core/js/views/contentObjectView", function (_AdaptView) {
    _inherits(ContentObjectView, _AdaptView);

    var _super = _createSuper(ContentObjectView);

    function ContentObjectView() {
      _classCallCheck(this, ContentObjectView);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'main',
          'aria-labelledby': "".concat(this.model.get('_id'), "-heading")
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return [this.constructor.type, 'contentobject', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].filter(Boolean).join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        $.inview.lock(this.constructor.type + 'View');
        this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        this.$el.css('opacity', 0);
        this.listenTo(this.model, 'change:_isReady', this.isReady);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRender contentObjectView:preRender view:preRender"), this);
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
        Adapt.trigger("".concat(type, "View:render contentObjectView:render view:render"), this);

        _.defer(function () {
          if (_this._isRemoved) return;

          _this.postRender();

          Adapt.trigger("".concat(type, "View:postRender contentObjectView:postRender view:postRender"), _this);
        });

        return this;
      }
    }, {
      key: "isReady",
      value: function () {
        var _isReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var type, performIsReady;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!this.model.get('_isReady') || this._isTriggeredReady)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  this._isTriggeredReady = true;
                  type = this.constructor.type;

                  performIsReady = function () {
                    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                      var styleOptions;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              Adapt.trigger("".concat(type, "View:preReady contentObjectView:preReady view:preReady"), _this2);
                              _context.next = 3;
                              return Adapt.wait.queue();

                            case 3:
                              $('.js-loading').hide();

                              if (Adapt.get('_shouldContentObjectScrollTop') !== false) {
                                $(window).scrollTop(0);
                              }

                              Adapt.trigger("".concat(type, "View:ready contentObjectView:ready view:ready"), _this2);
                              $.inview.unlock("".concat(type, "View"));
                              styleOptions = {
                                opacity: 1
                              };

                              if (_this2.disableAnimation) {
                                _this2.$el.css(styleOptions);

                                $.inview();

                                _.defer(function () {
                                  Adapt.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                });
                              } else {
                                _this2.$el.velocity(styleOptions, {
                                  duration: 'fast',
                                  complete: function () {
                                    $.inview();
                                    Adapt.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                  }
                                });
                              }

                              $(window).scroll();

                            case 10:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function performIsReady() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  _.defer(performIsReady);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function isReady() {
          return _isReady.apply(this, arguments);
        }

        return isReady;
      }()
    }, {
      key: "renderTo",
      value: function () {
        var _renderTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(id) {
          var isRenderToSelf, models, index, model, ids, forceUntilId;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  isRenderToSelf = id === this.model.get('_id');

                  if (!isRenderToSelf) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return");

                case 3:
                  models = this.model.getAllDescendantModels(true).filter(function (model) {
                    return model.get('_isAvailable');
                  });
                  index = models.findIndex(function (model) {
                    return model.get('_id') === id;
                  });

                  if (!(index === -1)) {
                    _context3.next = 7;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\" as it isn't a descendant."));

                case 7:
                  model = models[index];

                  if (!(model.get('_isRendered') && model.get('_isReady'))) {
                    _context3.next = 10;
                    break;
                  }

                  return _context3.abrupt("return");

                case 10:
                  models = models.slice(0, index + 1);
                  ids = _.indexBy(models, function (model) {
                    return model.get('_id');
                  });

                  forceUntilId = function (event) {
                    var addingId = event.model.get('_id');
                    if (!ids[addingId]) return;
                    event.force();
                    if (addingId !== id) return;
                    Adapt.off('view:addChild', forceUntilId);
                  };

                  Adapt.on('view:addChild', forceUntilId);
                  _context3.next = 16;
                  return this.addChildren();

                case 16:
                  _context3.next = 18;
                  return this.whenReady();

                case 18:
                  if (!(!model.get('_isRendered') || !model.get('_isReady'))) {
                    _context3.next = 20;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\"."));

                case 20:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function renderTo(_x) {
          return _renderTo.apply(this, arguments);
        }

        return renderTo;
      }()
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRemove contentObjectView:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this3 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt.trigger("".concat(type, "View:remove contentObjectView:remove view:remove"), this);
        this._isRemoved = true;
        Adapt.wait.for(function (end) {
          _this3.$el.off('onscreen.adaptView');

          _this3.findDescendantViews().reverse().forEach(function (view) {
            view.remove();
          });

          _this3.setChildViews(null);

          _get(_getPrototypeOf(ContentObjectView.prototype), "remove", _this3).call(_this3);

          _.defer(function () {
            Adapt.trigger("".concat(type, "View:postRemove contentObjectView:postRemove view:postRemove"), _this3);

            _this3.trigger('postRemove');
          });

          end();
        });
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.remove();

        if (Adapt.parentView === this) {
          Adapt.parentView = null;
        }
      }
    }]);

    return ContentObjectView;
  }(AdaptView$1));

  var PageView = function (_ContentObjectView) {
    _inherits(PageView, _ContentObjectView);

    var _super = _createSuper(PageView);

    function PageView() {
      _classCallCheck(this, PageView);

      return _super.apply(this, arguments);
    }

    _createClass(PageView, [{
      key: "remove",
      value: function remove() {
        if (this.$pageLabel) {
          this.$pageLabel.remove();
        }

        _get(_getPrototypeOf(PageView.prototype), "remove", this).call(this);
      }
    }]);

    return PageView;
  }(ContentObjectView);

  Object.assign(PageView, {
    childContainer: '.article__container',
    type: 'page',
    template: 'page'
  });
  Adapt.register('page', {
    view: PageView
  });
  __AMD("core/js/views/pageView", PageView);

  var ArticleView = function (_AdaptView) {
    _inherits(ArticleView, _AdaptView);

    var _super = _createSuper(ArticleView);

    function ArticleView() {
      _classCallCheck(this, ArticleView);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleView, [{
      key: "className",
      value: function className() {
        return ['article', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return ArticleView;
  }(AdaptView$1);

  Object.assign(ArticleView, {
    childContainer: '.block__container',
    type: 'article',
    template: 'article'
  });
  Adapt.register('article', {
    view: ArticleView
  });
  var ArticleView$1 = __AMD("core/js/views/articleView", ArticleView);

  var BlockView = function (_AdaptView) {
    _inherits(BlockView, _AdaptView);

    var _super = _createSuper(BlockView);

    function BlockView() {
      _classCallCheck(this, BlockView);

      return _super.apply(this, arguments);
    }

    _createClass(BlockView, [{
      key: "className",
      value: function className() {
        return ['block', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return BlockView;
  }(AdaptView$1);

  Object.assign(BlockView, {
    childContainer: '.component__container',
    type: 'block',
    template: 'block'
  });
  Adapt.register('block', {
    view: BlockView
  });
  __AMD("core/js/views/blockView", BlockView);

  var MPABC = function (_Backbone$Controller) {
    _inherits(MPABC, _Backbone$Controller);

    var _super = _createSuper(MPABC);

    function MPABC() {
      _classCallCheck(this, MPABC);

      return _super.apply(this, arguments);
    }

    _createClass(MPABC, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Data$1, {
          loading: this.waitForDataLoaded,
          loaded: this.onDataLoaded
        });
        this.setupSubsetCollections();
      }
    }, {
      key: "waitForDataLoaded",
      value: function waitForDataLoaded() {
        Adapt.wait.begin();
      }
    }, {
      key: "onDataLoaded",
      value: function onDataLoaded() {
        Adapt.wait.end();
      }
    }, {
      key: "setupSubsetCollections",
      value: function setupSubsetCollections() {
        Adapt.contentObjects = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: ContentObjectModel
        });
        Adapt.articles = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: ArticleModel$1
        });
        Adapt.blocks = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: BlockModel$1
        });
        Adapt.components = new AdaptSubsetCollection(null, {
          parent: Data$1,
          model: ComponentModel$1
        });
      }
    }]);

    return MPABC;
  }(Backbone.Controller);

  __AMD("core/js/mpabc", Adapt.mpabc = new MPABC());

  var defaultAriaLevels = {
    '_menu': 1,
    '_menuGroup': 2,
    '_menuItem': 2,
    '_page': 1,
    '_article': 2,
    '_block': 3,
    '_component': 4,
    '_componentItem': 5,
    '_notify': 1
  };
  var helpers = {
    lowercase: function (text) {
      return text.toLowerCase();
    },
    capitalise: function (text) {
      return text.charAt(0).toUpperCase() + text.slice(1);
    },
    inc: function (index) {
      return index + 1;
    },
    dec: function (index) {
      return index - 1;
    },
    odd: function (index) {
      return (index + 1) % 2 === 0 ? 'even' : 'odd';
    },
    equals: function (value, text, block) {
      return helpers.compare.call(this, value, '==', text, block);
    },
    compare: function (value, operator, text, block) {
      switch (operator) {
        case '===':
          if (value === text) return block.fn(this);
          break;

        case '=':
        case '==':
          if (value == text) return block.fn(this);
          break;

        case '>=':
          if (value >= text) return block.fn(this);
          break;

        case '<=':
          if (value <= text) return block.fn(this);
          break;

        case '>':
          if (value > text) return block.fn(this);
          break;

        case '<':
          if (value < text) return block.fn(this);
          break;
      }

      return block.inverse(this);
    },
    math: function (lvalue, operator, rvalue, options) {
      lvalue = parseFloat(lvalue);
      rvalue = parseFloat(rvalue);

      switch (operator) {
        case '+':
          return lvalue + rvalue;

        case '-':
          return lvalue - rvalue;

        case '*':
          return lvalue * rvalue;

        case '/':
          return lvalue / rvalue;

        case '%':
          return lvalue % rvalue;
      }
    },
    any: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    all: function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.every(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    none: function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return !specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    compile: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      var data = this;

      if (context) {
        data = !context.data || !context.data.root ? context : context.data.root;
      }

      return Handlebars.compile(template)(data);
    },
    compile_a11y_text: function (template, context) {
      Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return helpers.compile.call(this, template, context);
    },
    compile_a11y_normalize: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));
    },
    compile_a11y_remove_breaks: function (template, context) {
      if (!template) {
        return '';
      }

      return Handlebars.helpers.a11y_remove_breaks.call(this, helpers.compile.call(this, template, context));
    },
    import_globals: function (context) {
      if (context.data.root._globals) {
        return '';
      }

      context.data.root._globals = Adapt.course.get('_globals');
      return '';
    },
    import_adapt: function (context) {
      if (context.data.root.Adapt) {
        return;
      }

      var adapt = context.data.root.Adapt = {};
      var i, l, name;
      var directImport = ['config', 'course'];

      for (i = 0, l = directImport.length; i < l; i++) {
        name = directImport[i];
        adapt[name] = Adapt[name].toJSON();
      }

      var indexedImport = ['contentObjects', 'articles', 'blocks', 'components'];

      for (i = 0, l = indexedImport.length; i < l; i++) {
        name = indexedImport[i];
        var importArray = Adapt[name].toJSON();
        var importIndex = {};

        for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {
          var item = importArray[i1];
          importIndex[item._id] = item;
        }

        adapt[name] = importIndex;
      }

      return '';
    },
    component_description: function (override, context) {
      if (!this._isA11yComponentDescriptionEnabled) {
        return;
      }

      var isNotDefined = !this._globals._components || !this._globals._components['_' + this._component];

      if (isNotDefined) {
        return;
      }

      var hasOverride = arguments.length > 1;
      var description;

      if (hasOverride) {
        description = override;
        description = helpers.compile(description, context);
      } else {
        description = this._globals._components['_' + this._component].ariaRegion;
        description = helpers.compile(description, override);
      }

      if (!description) {
        return;
      }

      return new Handlebars.SafeString('<div class="aria-label">' + description + '</div>');
    },
    a11y_text: function (text) {
      Adapt.a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_normalize: function (htmls) {
      return Adapt.a11y.normalize.apply(Adapt.a11y, arguments);
    },
    a11y_remove_breaks: function (htmls) {
      return Adapt.a11y.removeBreaks.apply(Adapt.a11y, arguments);
    },
    a11y_aria_label: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label">' + values.join(' ') + '</div>');
    },
    a11y_aria_label_relative: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label relative">' + values.join(' ') + '</div>');
    },
    a11y_aria_image: function (texts) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label" role="img" aria-label="' + values.join(' ') + '"></div>');
    },
    a11y_wrap_focus: function () {
      var cfg = Adapt.config.get('_accessibility');
      if (cfg._isPopupWrapFocusEnabled === false) return '';
      return new Handlebars.SafeString('<a class="a11y-focusguard a11y-ignore a11y-ignore-focus" role="presentation">&nbsp;</a>');
    },
    a11y_attrs_heading: function (levelOrType) {
      var cfg = Adapt.config.get('_accessibility');
      var level = 1;

      if (this._ariaLevel) {
        levelOrType = this._ariaLevel;
      }

      if (isNaN(levelOrType) === false) {
        level = levelOrType;
      } else if (_.isString(levelOrType)) {
        cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;

        if (cfg._ariaLevels && cfg._ariaLevels['_' + levelOrType] !== undefined) {
          level = cfg._ariaLevels['_' + levelOrType];
        }
      }

      return new Handlebars.SafeString(' role="heading" aria-level="' + level + '" ');
    },
    a11y_attrs_tabbable: function () {
      Adapt.a11y.log.deprecated('a11y_attrs_tabbable should not be used. tabbable elements should be natively tabbable.');
      return new Handlebars.SafeString(' role="region" tabindex="0" ');
    },
    a11y_alt_text: function (visible, alternatives) {
      var values = Array.prototype.slice.call(arguments, 1, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<span aria-hidden="true">' + visible + '</span><span class="aria-label">' + values.join(' ') + '</span>');
    }
  };
  Object.assign(helpers, {
    if_value_equals: function () {
      Adapt.a11y.log.deprecated('if_value_equals, use equals instead.');
      return helpers.equals.apply(this, arguments);
    },
    numbers: function () {
      Adapt.a11y.log.deprecated('numbers, use inc instead.');
      return helpers.inc.apply(this, arguments);
    },
    lowerCase: function () {
      Adapt.a11y.log.deprecated('lowerCase, use lowercase instead.');
      return helpers.lowercase.apply(this, arguments);
    }
  });

  for (var name in helpers) {
    if (!helpers.hasOwnProperty(name)) continue;
    Handlebars.registerHelper(name, helpers[name]);
  }

  __AMD("core/js/helpers", helpers);

  var Scrolling = function (_Backbone$Controller) {
    _inherits(Scrolling, _Backbone$Controller);

    var _super = _createSuper(Scrolling);

    function Scrolling() {
      _classCallCheck(this, Scrolling);

      return _super.apply(this, arguments);
    }

    _createClass(Scrolling, [{
      key: "initialize",
      value: function initialize() {
        this.$html = null;
        this.$app = null;
        this.isLegacyScrolling = true;

        this._checkApp();

        Adapt.once('configModel:dataLoaded', this._loadConfig.bind(this));
      }
    }, {
      key: "_checkApp",
      value: function _checkApp() {
        this.$html = $('html');
        this.$app = $('#app');
        if (this.$app.length) return;
        this.$app = $('<div id="app">');
        $('body').append(this.$app);
        this.$app.append($('#wrapper'));
        Adapt.log.warn('UPDATE - Your html file needs to have #app adding. See https://github.com/adaptlearning/adapt_framework/issues/2168');
      }
    }, {
      key: "_loadConfig",
      value: function _loadConfig() {
        var config = Adapt.config.get('_scrollingContainer');
        if (!config || !config._isEnabled) return;
        var limitTo = config._limitToSelector;
        var isIncluded = !limitTo || this.$html.is(limitTo) || this.$html.hasClass(limitTo);
        if (!isIncluded) return;
        this.isLegacyScrolling = false;

        this._addStyling();

        this._fixJQuery();

        this._fixScrollTo();

        this._fixBrowser();
      }
    }, {
      key: "_addStyling",
      value: function _addStyling() {
        this.$html.addClass('adapt-scrolling');
      }
    }, {
      key: "_fixJQuery",
      value: function _fixJQuery() {
        var selectorScrollTop = $.fn.scrollTop;
        var $app = Adapt.scrolling.$app;

        $.fn.scrollTop = function () {
          if (this[0] === window || this[0] === document.body) {
            return selectorScrollTop.apply($app, arguments);
          }

          return selectorScrollTop.apply(this, arguments);
        };

        var selectorOffset = $.fn.offset;

        $.fn.offset = function (coordinates) {
          if (coordinates) {
            return selectorOffset.apply(this, arguments);
          }

          var $app = Adapt.scrolling.$app;
          var $element = this;
          var elementOffset = selectorOffset.call($element);
          var isCorrectedContainer = $element.is('html, body, #app') || $element.parents().is('#app');

          if (!isCorrectedContainer) {
            return elementOffset;
          }

          var scrollTop = parseInt($app.scrollTop());
          var scrollLeft = parseInt($app.scrollLeft());
          var appOffset = selectorOffset.call($app);
          elementOffset.top += scrollTop - appOffset.top;
          elementOffset.left += scrollLeft - appOffset.left;
          return elementOffset;
        };
      }
    }, {
      key: "_fixScrollTo",
      value: function _fixScrollTo() {
        var selectorScrollTo = $.fn.scrollTo;
        var scrollTo = $.scrollTo;
        var $app = Adapt.scrolling.$app;

        $.fn.scrollTo = function (target, duration, settings) {
          if (this[0] === window || this[0] === document.body) {
            return selectorScrollTo.apply($app, arguments);
          }

          return selectorScrollTo.apply(this, arguments);
        };

        $.scrollTo = function (target, duration, settings) {
          return selectorScrollTo.apply($app, arguments);
        };

        Object.assign($.scrollTo, scrollTo);
      }
    }, {
      key: "_fixBrowser",
      value: function _fixBrowser() {
        var app = Adapt.scrolling.$app[0];

        window.scrollTo = function (x, y) {
          app.scrollTop = y || 0;
          app.scrollLeft = x || 0;
        };

        var $window = $(window);
        this.$app.on('scroll', function () {
          $window.scroll();
        });
      }
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee(selector) {
          var settings,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  settings = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  Adapt.log.deprecated('Adapt.scrollTo and Adapt.scrolling.scrollTo, use Adapt.navigateToElement instead.');
                  return _context.abrupt("return", Adapt.router.navigateToElement(selector, settings));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function scrollTo(_x) {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }]);

    return Scrolling;
  }(Backbone.Controller);

  Adapt.scrolling = new Scrolling();
  Adapt.scrollTo = Adapt.scrolling.scrollTo.bind(Adapt.scrolling);
  __AMD("core/js/scrolling", Adapt.scrolling);

  var HeadingView = function (_Backbone$View) {
    _inherits(HeadingView, _Backbone$View);

    var _super = _createSuper(HeadingView);

    function HeadingView() {
      _classCallCheck(this, HeadingView);

      return _super.apply(this, arguments);
    }

    _createClass(HeadingView, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, 'change:_isComplete', this.render);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var customHeadingType = this.$el.attr('data-a11y-heading-type');
        if (customHeadingType) data._type = customHeadingType;
        this.$el.html(template(data));
        this.checkCompletion();
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var isComplete = this.model.get('_isComplete');
        this.$el.toggleClass('is-complete', isComplete).toggleClass('is-incomplete', !isComplete);
      }
    }]);

    return HeadingView;
  }(Backbone.View);

  HeadingView.template = 'heading';
  var HeadingView$1 = __AMD("core/js/views/headingView", HeadingView);

  var Headings = function (_Backbone$Controller) {
    _inherits(Headings, _Backbone$Controller);

    var _super = _createSuper(Headings);

    function Headings() {
      _classCallCheck(this, Headings);

      return _super.apply(this, arguments);
    }

    _createClass(Headings, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'view:render', this.onViewRender);
      }
    }, {
      key: "onViewRender",
      value: function onViewRender(view) {
        var $headingSeats = view.$('.js-heading');
        $headingSeats.each(function (index, el) {
          return new HeadingView$1({
            el: el,
            model: view.model
          });
        });
      }
    }]);

    return Headings;
  }(Backbone.Controller);

  __AMD("core/js/headings", new Headings());

  var NavigationView = function (_Backbone$View) {
    _inherits(NavigationView, _Backbone$View);

    var _super = _createSuper(NavigationView);

    function NavigationView() {
      _classCallCheck(this, NavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationView, [{
      key: "className",
      value: function className() {
        return 'nav';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click [data-event]': 'triggerEvent'
        };
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'navigation'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenToOnce(Adapt, {
          'courseModel:dataLoading': this.remove
        });
        this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);
        this.preRender();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        Adapt.trigger('navigationView:preRender', this);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template({
          _globals: Adapt.course.get('_globals'),
          _accessibility: Adapt.config.get('_accessibility')
        })).insertBefore('#app');

        _.defer(function () {
          Adapt.trigger('navigationView:postRender', _this);
        });

        return this;
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        event.preventDefault();
        var currentEvent = $(event.currentTarget).attr('data-event');
        Adapt.trigger('navigation:' + currentEvent);

        switch (currentEvent) {
          case 'backButton':
            Adapt.router.navigateToPreviousRoute();
            break;

          case 'homeButton':
            Adapt.router.navigateToHomeRoute();
            break;

          case 'parentButton':
            Adapt.router.navigateToParent();
            break;

          case 'skipNavigation':
            this.skipNavigation();
            break;

          case 'returnToStart':
            Adapt.startController.returnToStartLocation();
            break;
        }
      }
    }, {
      key: "skipNavigation",
      value: function skipNavigation() {
        Adapt.a11y.focusFirst('.' + Adapt.location._contentType);
      }
    }, {
      key: "hideNavigationButton",
      value: function hideNavigationButton(model) {
        var shouldHide = model.get('_type') === 'course';
        this.$('.nav__back-btn, .nav__home-btn').toggleClass('u-display-none', shouldHide);
      }
    }, {
      key: "showNavigationButton",
      value: function showNavigationButton() {
        this.$('.nav__back-btn, .nav__home-btn').removeClass('u-display-none');
      }
    }]);

    return NavigationView;
  }(Backbone.View);

  NavigationView.template = 'nav';
  var NavigationView$1 = __AMD("core/js/views/navigationView", NavigationView);

  var NavigationController = function (_Backbone$Controller) {
    _inherits(NavigationController, _Backbone$Controller);

    var _super = _createSuper(NavigationController);

    function NavigationController() {
      _classCallCheck(this, NavigationController);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationController, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'adapt:preInitialize', this.addNavigationBar);
      }
    }, {
      key: "addNavigationBar",
      value: function addNavigationBar() {
        var adaptConfig = Adapt.course.get('_navigation');

        if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {
          Adapt.trigger('navigation:initialize');
          return;
        }

        Adapt.navigation = new NavigationView$1();
      }
    }]);

    return NavigationController;
  }(Backbone.Controller);

  __AMD("core/js/navigation", new NavigationController());

  var ItemModel = __AMD("core/js/models/itemModel", function (_LockingModel) {
    _inherits(ItemModel, _LockingModel);

    var _super = _createSuper(ItemModel);

    function ItemModel() {
      _classCallCheck(this, ItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _isVisited: false
        };
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set({
          _isActive: false,
          _isVisited: false
        });
      }
    }, {
      key: "toggleActive",
      value: function toggleActive() {
        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isActive');
        this.set('_isActive', isActive);
      }
    }, {
      key: "toggleVisited",
      value: function toggleVisited() {
        var isVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isVisited');
        this.set('_isVisited', isVisited);
      }
    }]);

    return ItemModel;
  }(LockingModel));

  var ItemsComponentModel = __AMD("core/js/models/itemsComponentModel", function (_ComponentModel) {
    _inherits(ItemsComponentModel, _ComponentModel);

    var _super = _createSuper(ItemsComponentModel);

    function ItemsComponentModel() {
      _classCallCheck(this, ItemsComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemsComponentModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(ItemsComponentModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "init",
      value: function init() {
        this.setUpItems();
        this.listenTo(this.getChildren(), {
          'all': this.onAll,
          'change:_isVisited': this.checkCompletionStatus
        });

        _get(_getPrototypeOf(ItemsComponentModel.prototype), "init", this).call(this);
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        var booleanArray = this.get('_userAnswer');
        if (!booleanArray) return;
        this.getChildren().forEach(function (child, index) {
          return child.set('_isVisited', booleanArray[index]);
        });
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var booleanArray = this.getChildren().map(function (child) {
          return child.get('_isVisited');
        });
        this.set('_userAnswer', booleanArray);
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          return item._index = index;
        });
        this.setChildren(new Backbone.Collection(items, {
          model: ItemModel
        }));
      }
    }, {
      key: "getItem",
      value: function getItem(index) {
        return this.getChildren().findWhere({
          _index: index
        });
      }
    }, {
      key: "getVisitedItems",
      value: function getVisitedItems() {
        return this.getChildren().where({
          _isVisited: true
        });
      }
    }, {
      key: "getActiveItems",
      value: function getActiveItems() {
        return this.getChildren().where({
          _isActive: true
        });
      }
    }, {
      key: "getActiveItem",
      value: function getActiveItem() {
        return this.getChildren().findWhere({
          _isActive: true
        });
      }
    }, {
      key: "areAllItemsCompleted",
      value: function areAllItemsCompleted() {
        return this.getVisitedItems().length === this.getChildren().length;
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        this.storeUserAnswer();
        if (!this.areAllItemsCompleted()) return;
        this.setCompletionStatus();
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        this.getChildren().each(function (item) {
          return item.reset();
        });

        _get(_getPrototypeOf(ItemsComponentModel.prototype), "reset", this).call(this, type, force);
      }
    }, {
      key: "resetActiveItems",
      value: function resetActiveItems() {
        this.getChildren().each(function (item) {
          return item.toggleActive(false);
        });
      }
    }, {
      key: "setActiveItem",
      value: function setActiveItem(index) {
        var item = this.getItem(index);
        if (!item) return;
        var activeItem = this.getActiveItem();
        if (activeItem) activeItem.toggleActive(false);
        item.toggleActive(true);
      }
    }]);

    return ItemsComponentModel;
  }(ComponentModel$1));

  var AccordionModel = function (_ItemsComponentModel) {
    _inherits(AccordionModel, _ItemsComponentModel);

    var _super = _createSuper(AccordionModel);

    function AccordionModel() {
      _classCallCheck(this, AccordionModel);

      return _super.apply(this, arguments);
    }

    _createClass(AccordionModel, [{
      key: "defaults",
      value: function defaults() {
        return ItemsComponentModel.resultExtend('defaults', {
          _shouldCollapseItems: true,
          _toggleSpeed: 200
        }, this);
      }
    }, {
      key: "toggleItemsState",
      value: function toggleItemsState(index) {
        var item = this.getItem(index);
        var previousActiveItem = this.getActiveItem();
        item.toggleActive();
        item.toggleVisited(true);

        if (previousActiveItem && this.get('_shouldCollapseItems')) {
          previousActiveItem.toggleActive(false);
        }
      }
    }]);

    return AccordionModel;
  }(ItemsComponentModel);

  var AccordionModel$1 = __AMD("components/adapt-contrib-accordion/js/accordionModel", AccordionModel);

  var ComponentView = function (_AdaptView) {
    _inherits(ComponentView, _AdaptView);

    var _super = _createSuper(ComponentView);

    function ComponentView() {
      _classCallCheck(this, ComponentView);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentView, [{
      key: "attributes",
      value: function attributes() {
        if (!this.model.get('_isA11yRegionEnabled')) {
          return AdaptView$1.resultExtend('attributes', {}, this);
        }

        return AdaptView$1.resultExtend('attributes', {
          'aria-labelledby': this.model.get('_id') + '-heading',
          'role': 'region'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['component', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "renderState",
      value: function renderState() {
        Adapt.log.removed('renderState is removed and moved to item title');
      }
    }, {
      key: "setupInviewCompletion",
      value: function setupInviewCompletion() {
        var inviewElementSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.component__inner';
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.setCompletionStatus;
        this.$inviewElement = this.$(inviewElementSelector);
        this.inviewCallback = callback;
        this.$inviewElement.on('inview.componentView', this.onInview.bind(this));
      }
    }, {
      key: "removeInviewListener",
      value: function removeInviewListener() {
        if (!this.$inviewElement) return;
        this.$inviewElement.off('inview.componentView');
        this.$inviewElement = null;
      }
    }, {
      key: "onInview",
      value: function onInview(event, visible, visiblePartX, visiblePartY) {
        if (!visible) return;

        switch (visiblePartY) {
          case 'top':
            this.hasSeenTop = true;
            break;

          case 'bottom':
            this.hasSeenBottom = true;
            break;

          case 'both':
            this.hasSeenTop = this.hasSeenBottom = true;
        }

        if (!this.hasSeenTop || !this.hasSeenBottom) return;
        this.inviewCallback();

        if (this.model.get('_isComplete')) {
          this.removeInviewListener();
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {}
    }, {
      key: "remove",
      value: function remove() {
        this.removeInviewListener();

        _get(_getPrototypeOf(ComponentView.prototype), "remove", this).call(this);
      }
    }]);

    return ComponentView;
  }(AdaptView$1);

  ComponentView.type = 'component';
  var ComponentView$1 = __AMD("core/js/views/componentView", ComponentView);

  var AccordionView = function (_ComponentView) {
    _inherits(AccordionView, _ComponentView);

    var _super = _createSuper(AccordionView);

    function AccordionView() {
      _classCallCheck(this, AccordionView);

      return _super.apply(this, arguments);
    }

    _createClass(AccordionView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-toggle-item': 'onClick'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.checkIfResetOnRevisit();
        this.model.resetActiveItems();
        this.listenTo(this.model.get('_children'), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();

        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion();
        }
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        this.model.toggleItemsState($(event.currentTarget).parent().data('index'));
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, isActive) {
        this.toggleItem(item, isActive);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, isVisited) {
        if (!isVisited) return;
        var $item = this.getItemElement(item);
        $item.children('.accordion__item-btn').addClass('is-visited');
      }
    }, {
      key: "toggleItem",
      value: function toggleItem(item, shouldExpand) {
        var $item = this.getItemElement(item);
        var $body = $item.children('.accordion__item-content').stop(true, true);
        $item.children('.accordion__item-btn').toggleClass('is-selected is-open', shouldExpand).toggleClass('is-closed', !shouldExpand).attr('aria-expanded', shouldExpand);

        if (!shouldExpand) {
          $body.slideUp(this.model.get('_toggleSpeed'));
          return;
        }

        $body.slideDown(this.model.get('_toggleSpeed'));
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(item) {
        var index = item.get('_index');
        return this.$('.accordion__item').filter("[data-index=\"".concat(index, "\"]"));
      }
    }]);

    return AccordionView;
  }(ComponentView$1);

  AccordionView.template = 'accordion';
  var AccordionView$1 = __AMD("components/adapt-contrib-accordion/js/accordionView", AccordionView);

  __AMD("components/adapt-contrib-accordion/js/adapt-contrib-accordion", Adapt.register('accordion', {
    model: AccordionModel$1,
    view: AccordionView$1
  }));

  var AssessmentResultsModel = function (_ComponentModel) {
    _inherits(AssessmentResultsModel, _ComponentModel);

    var _super = _createSuper(AssessmentResultsModel);

    function AssessmentResultsModel() {
      _classCallCheck(this, AssessmentResultsModel);

      return _super.apply(this, arguments);
    }

    _createClass(AssessmentResultsModel, [{
      key: "init",
      value: function init() {
        var _get2;

        this.set('originalBody', this.get('body'));
        this.listenTo(Adapt, {
          'assessments:complete': this.onAssessmentComplete,
          'assessments:reset': this.onAssessmentReset
        });

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(AssessmentResultsModel.prototype), "init", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "checkIfAssessmentComplete",
      value: function checkIfAssessmentComplete() {
        if (!Adapt.assessment || this.get('_assessmentId') === undefined) {
          return;
        }

        var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));
        if (!assessmentModel || assessmentModel.length === 0) return;
        var state = assessmentModel.getState();

        var isResetOnRevisit = assessmentModel.get('_assessment')._isResetOnRevisit;

        if (state.isComplete && (!state.allowResetIfPassed || !isResetOnRevisit)) {
          this.onAssessmentComplete(state);
          return;
        }

        this.setVisibility();
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(state) {
        if (this.get('_assessmentId') === undefined || this.get('_assessmentId') != state.id) return;
        this.set({
          _state: state,
          attempts: state.attempts,
          attemptsSpent: state.attemptsSpent,
          attemptsLeft: state.attemptsLeft,
          score: state.score,
          scoreAsPercent: state.scoreAsPercent,
          maxScore: state.maxScore,
          isPass: state.isPass
        });
        this.setFeedbackBand(state);
        this.checkRetryEnabled(state);
        this.setFeedbackText();
        this.toggleVisibility(true);
      }
    }, {
      key: "setFeedbackBand",
      value: function setFeedbackBand(state) {
        var scoreProp = state.isPercentageBased ? 'scoreAsPercent' : 'score';

        var bands = _.sortBy(this.get('_bands'), '_score');

        for (var i = bands.length - 1; i >= 0; i--) {
          var isScoreInBandRange = state[scoreProp] >= bands[i]._score;
          if (!isScoreInBandRange) continue;
          this.set('_feedbackBand', bands[i]);
          break;
        }
      }
    }, {
      key: "checkRetryEnabled",
      value: function checkRetryEnabled(state) {
        var assessmentModel = Adapt.assessment.get(state.id);
        if (!assessmentModel.canResetInPage()) return false;
        var feedbackBand = this.get('_feedbackBand');
        var isRetryEnabled = (feedbackBand && feedbackBand._allowRetry) !== false;
        var isAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
        var showRetry = isRetryEnabled && isAttemptsLeft && (!state.isPass || state.allowResetIfPassed);
        this.set({
          _isRetryEnabled: showRetry,
          retryFeedback: showRetry ? this.get('_retry').feedback : ''
        });
      }
    }, {
      key: "setFeedbackText",
      value: function setFeedbackText() {
        var feedbackBand = this.get('_feedbackBand');
        var feedback = feedbackBand ? Handlebars.compile(feedbackBand.feedback)(this.toJSON()) : '';
        this.set({
          feedback: feedback,
          body: this.get('_completionBody')
        });
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        if (!Adapt.assessment) return;
        var isVisibleBeforeCompletion = this.get('_isVisibleBeforeCompletion') || false;
        var wasVisible = this.get('_isVisible');
        var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));
        if (!assessmentModel || assessmentModel.length === 0) return;
        var state = assessmentModel.getState();
        var isComplete = state.isComplete;
        var isAttemptInProgress = state.attemptInProgress;
        var attemptsSpent = state.attemptsSpent;
        var hasHadAttempt = !isAttemptInProgress && attemptsSpent > 0;
        var isVisible = isVisibleBeforeCompletion && !isComplete || hasHadAttempt;
        if (!wasVisible && isVisible) isVisible = (_readOnlyError("isVisible"), false);
        this.toggleVisibility(isVisible);
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility(isVisible) {
        if (isVisible === undefined) {
          isVisible = !this.get('_isVisible');
        }

        this.set('_isVisible', isVisible, {
          pluginName: 'assessmentResults'
        });
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        if (this.get('_setCompletionOn') === 'pass' && !this.get('isPass')) {
          return;
        }

        this.setCompletionStatus();
      }
    }, {
      key: "onAssessmentReset",
      value: function onAssessmentReset(state) {
        if (this.get('_assessmentId') === undefined || this.get('_assessmentId') != state.id) return;
        var resetType = this.get('_resetType');

        if (!resetType || resetType === 'inherit') {
          resetType = state.resetType || 'hard';
        }

        this.reset(resetType, true);
      }
    }, {
      key: "reset",
      value: function reset() {
        var _get3;

        this.set({
          body: this.get('originalBody'),
          state: null,
          feedback: '',
          _feedbackBand: null,
          retryFeedback: '',
          _isRetryEnabled: false
        });

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get3 = _get(_getPrototypeOf(AssessmentResultsModel.prototype), "reset", this)).call.apply(_get3, [this].concat(args));
      }
    }]);

    return AssessmentResultsModel;
  }(ComponentModel$1);

  var AssessmentResultsModel$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsModel", AssessmentResultsModel);

  var AssessmentResultsView = function (_ComponentView) {
    _inherits(AssessmentResultsView, _ComponentView);

    var _super = _createSuper(AssessmentResultsView);

    function AssessmentResultsView() {
      _classCallCheck(this, AssessmentResultsView);

      return _super.apply(this, arguments);
    }

    _createClass(AssessmentResultsView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-assessment-retry-btn': 'onRetryClicked'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.model.setLocking('_isVisible', false);
        this.listenTo(Adapt.parentView, 'preRemove', function () {
          this.model.unsetLocking('_isVisible');
        });
        this.listenTo(this.model, {
          'change:_feedbackBand': this.addClassesToArticle,
          'change:body': this.render
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.model.checkIfAssessmentComplete();
        this.setReadyStatus();
        this.setupInviewCompletion('.component__inner', this.model.checkCompletion.bind(this.model));
      }
    }, {
      key: "onRetryClicked",
      value: function onRetryClicked() {
        var _this = this;

        var state = this.model.get('_state');
        Adapt.assessment.get(state.id).reset(null, function (wasReset) {
          if (!wasReset) {
            return;
          }

          if (_this.model.get('_retry')._routeToAssessment === true) {
            Adapt.navigateToElement('.' + state.articleId);
          }
        });
      }
    }, {
      key: "addClassesToArticle",
      value: function addClassesToArticle(model, value) {
        if (!value || !value._classes) return;
        this.$el.parents('.article').addClass(value._classes);
      }
    }]);

    return AssessmentResultsView;
  }(ComponentView$1);

  AssessmentResultsView.template = 'assessmentResults';
  var AssessmentResultsView$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsView", AssessmentResultsView);

  __AMD("components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults", Adapt.register("assessmentResults", {
    model: AssessmentResultsModel$1,
    view: AssessmentResultsView$1
  }));

  var BlankView = function (_ComponentView) {
    _inherits(BlankView, _ComponentView);

    var _super = _createSuper(BlankView);

    function BlankView() {
      _classCallCheck(this, BlankView);

      return _super.apply(this, arguments);
    }

    _createClass(BlankView, [{
      key: "preRender",
      value: function preRender() {
        this.checkIfResetOnRevisit();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
        this.setupInviewCompletion();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }]);

    return BlankView;
  }(ComponentView$1);

  BlankView.template = 'blank';
  __AMD("components/adapt-contrib-blank/js/adapt-contrib-blank", Adapt.register('blank', {
    model: ComponentModel$1.extend({}),
    view: BlankView
  }));

  var BUTTON_STATE = ENUM(['SUBMIT', 'CORRECT', 'INCORRECT', 'SHOW_CORRECT_ANSWER', 'HIDE_CORRECT_ANSWER', 'SHOW_FEEDBACK', 'RESET']);
  var BUTTON_STATE$1 = __AMD("core/js/enums/buttonStateEnum", BUTTON_STATE);

  var textPropertyName = {
    'SUBMIT': 'submit',
    'CORRECT': 'correct',
    'INCORRECT': 'incorrect',
    'SHOW_CORRECT_ANSWER': 'showCorrectAnswer',
    'HIDE_CORRECT_ANSWER': 'hideCorrectAnswer',
    'SHOW_FEEDBACK': 'showFeedback',
    'RESET': 'reset'
  };
  var ButtonsView = __AMD("core/js/views/buttonsView", function (_Backbone$View) {
    _inherits(ButtonsView, _Backbone$View);

    var _super = _createSuper(ButtonsView);

    function ButtonsView() {
      _classCallCheck(this, ButtonsView);

      return _super.apply(this, arguments);
    }

    _createClass(ButtonsView, [{
      key: "initialize",
      value: function initialize(options) {
        this.parent = options.parent;
        this.listenTo(Adapt.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, {
          'change:_buttonState': this.onButtonStateChanged,
          'change:feedbackMessage': this.onFeedbackMessageChanged,
          'change:_attemptsLeft': this.onAttemptsChanged,
          'change:_canSubmit': this.onCanSubmitChange
        });
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-btn-action': 'onActionClicked',
          'click .js-btn-feedback': 'onFeedbackClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var data = this.model.toJSON();
        var template = Handlebars.templates['buttons'];

        _.defer(function () {
          _this.postRender();

          Adapt.trigger('buttonsView:postRender', _this);
        });

        this.$el.html(template(data));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.refresh();
      }
    }, {
      key: "checkResetSubmittedState",
      value: function checkResetSubmittedState() {
        var isSubmitted = this.model.get('_isSubmitted');

        if (!isSubmitted) {
          this.$('.js-btn-marking').removeClass('is-incorrect is-correct').addClass('u-display-none');
          this.$el.removeClass('is-submitted');
          this.model.set('feedbackMessage', undefined);
          Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), false);
        } else {
          this.$el.addClass('is-submitted');
        }
      }
    }, {
      key: "onActionClicked",
      value: function onActionClicked() {
        var buttonState = this.model.get('_buttonState');
        this.trigger('buttons:stateUpdate', BUTTON_STATE$1(buttonState));
        this.checkResetSubmittedState();
      }
    }, {
      key: "onFeedbackClicked",
      value: function onFeedbackClicked() {
        this.trigger('buttons:stateUpdate', BUTTON_STATE$1.SHOW_FEEDBACK);
      }
    }, {
      key: "onFeedbackMessageChanged",
      value: function onFeedbackMessageChanged(model, changedAttribute) {
        if (changedAttribute && this.model.get('_canShowFeedback')) {
          Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), true);
        } else {
          Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), false);
        }
      }
    }, {
      key: "onCanSubmitChange",
      value: function onCanSubmitChange() {
        this.onButtonStateChanged(this.model, this.model.get('_buttonState'));
      }
    }, {
      key: "onButtonStateChanged",
      value: function onButtonStateChanged(model, changedAttribute) {
        this.updateAttemptsCount();
        var $buttonsAction = this.$('.js-btn-action');
        var buttonState = BUTTON_STATE$1(changedAttribute);

        if (changedAttribute === BUTTON_STATE$1.CORRECT || changedAttribute === BUTTON_STATE$1.INCORRECT) {
          Adapt.a11y.toggleEnabled($buttonsAction, false);
        } else {
          var propertyName = textPropertyName[buttonState.asString];
          var ariaLabel = this.model.get('_buttons')['_' + propertyName].ariaLabel;
          var buttonText = this.model.get('_buttons')['_' + propertyName].buttonText;
          Adapt.a11y.toggleEnabled($buttonsAction, this.model.get('_canSubmit'));
          $buttonsAction.html(buttonText).attr('aria-label', ariaLabel);

          switch (changedAttribute) {
            case BUTTON_STATE$1.SHOW_CORRECT_ANSWER:
            case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
              Adapt.a11y.toggleAccessible($buttonsAction, false);
          }
        }
      }
    }, {
      key: "checkFeedbackState",
      value: function checkFeedbackState() {
        var canShowFeedback = this.model.get('_canShowFeedback');
        this.$('.js-btn-action').toggleClass('is-full-width', !canShowFeedback);
        this.$('.js-btn-feedback').toggleClass('u-display-none', !canShowFeedback);
        this.$('.js-btn-marking').toggleClass('is-full-width u-display-none', !canShowFeedback);
      }
    }, {
      key: "updateAttemptsCount",
      value: function updateAttemptsCount(model, changedAttribute) {
        var isInteractionComplete = this.model.get('_isInteractionComplete');
        var attemptsLeft = this.model.get('_attemptsLeft') ? this.model.get('_attemptsLeft') : this.model.get('_attempts');
        var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');
        var attemptsString;
        this.checkResetSubmittedState();

        if (!isInteractionComplete && attemptsLeft !== 0) {
          attemptsString = attemptsLeft + ' ';

          if (attemptsLeft > 1) {
            attemptsString += this.model.get('_buttons').remainingAttemptsText;
          } else if (attemptsLeft === 1) {
            attemptsString += this.model.get('_buttons').remainingAttemptText;
          }
        } else {
          this.$('.js-display-attempts').addClass('u-visibility-hidden');
          this.showMarking();
        }

        if (shouldDisplayAttempts) {
          this.$('.js-insert-attempts-string').html(attemptsString);
        }
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.shouldShowMarking) return;
        var isCorrect = this.model.get('_isCorrect');

        var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

        this.$('.js-btn-marking').removeClass('u-display-none').addClass(isCorrect ? 'is-correct' : 'is-incorrect').attr('aria-label', isCorrect ? ariaLabels.answeredCorrectly : ariaLabels.answeredIncorrectly);
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.updateAttemptsCount();
        this.checkResetSubmittedState();
        this.checkFeedbackState();
        this.onButtonStateChanged(null, this.model.get('_buttonState'));
        this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));
      }
    }]);

    return ButtonsView;
  }(Backbone.View));

  var QuestionModel = function (_ComponentModel) {
    _inherits(QuestionModel, _ComponentModel);

    var _super = _createSuper(QuestionModel);

    function QuestionModel() {
      _classCallCheck(this, QuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {
          _isQuestionType: true,
          _shouldDisplayAttempts: false,
          _canShowModelAnswer: true,
          _canShowFeedback: true,
          _canShowMarking: true,
          _canSubmit: true,
          _isSubmitted: false,
          _questionWeight: Adapt.config.get('_questionWeight'),
          _items: []
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ComponentModel$1.resultExtend('trackable', ['_isSubmitted', '_score', '_isCorrect', '_attemptsLeft']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return ComponentModel$1.resultExtend('trackableType', [Boolean, Number, Boolean, Number]);
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'question';
      }
    }, {
      key: "init",
      value: function init() {
        this.setupDefaultSettings();
        this.setLocking('_canSubmit', true);

        _get(_getPrototypeOf(QuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        this.setupWeightSettings();
        this.setupButtonSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        var globalButtons = Adapt.course.get('_buttons');

        if (!this.has('_buttons')) {
          this.set('_buttons', globalButtons);
        } else {
          var componentButtons = this.get('_buttons');

          for (var key in componentButtons) {
            if (_typeof(componentButtons[key]) === 'object') {
              if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {
                componentButtons[key].buttonText = globalButtons[key].buttonText;
              }

              if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {
                componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;
              }
            }

            if (!componentButtons[key] && globalButtons[key]) {
              componentButtons[key] = globalButtons[key];
            }
          }
        }
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {}
    }, {
      key: "canSubmit",
      value: function canSubmit() {}
    }, {
      key: "checkCanSubmit",
      value: function checkCanSubmit() {
        this.set('_canSubmit', this.canSubmit(), {
          pluginName: 'adapt'
        });
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        if (!this.get('_attemptsLeft')) {
          this.set('_attemptsLeft', this.get('_attempts'));
        }

        this.set('_attemptsLeft', this.get('_attemptsLeft') - 1);
      }
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.set({
          _isEnabled: false,
          _isSubmitted: true
        });
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this.isCorrect()) {
          this.set('_isCorrect', true);
        } else {
          this.set('_isCorrect', false);
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {}
    }, {
      key: "setScore",
      value: function setScore() {}
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.get('_isCorrect') || this.get('_attemptsLeft') === 0;

        if (isComplete) {
          this.setCompletionStatus();
        }

        return isComplete;
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        var isInteractionComplete = this.get('_isInteractionComplete');
        var isCorrect = this.get('_isCorrect');
        var isEnabled = this.get('_isEnabled');
        var buttonState = this.get('_buttonState');
        var canShowModelAnswer = this.get('_canShowModelAnswer');

        if (isInteractionComplete) {
          if (isCorrect || !canShowModelAnswer) {
            this.set('_buttonState', BUTTON_STATE$1.CORRECT);
          } else {
            switch (buttonState) {
              case BUTTON_STATE$1.SUBMIT:
              case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
                this.set('_buttonState', BUTTON_STATE$1.SHOW_CORRECT_ANSWER);
                break;

              default:
                this.set('_buttonState', BUTTON_STATE$1.HIDE_CORRECT_ANSWER);
            }
          }
        } else {
          if (isEnabled) {
            this.set('_buttonState', BUTTON_STATE$1.SUBMIT);
          } else {
            this.set('_buttonState', BUTTON_STATE$1.RESET);
          }
        }
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
        } else if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {}
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: this.get('_feedback').correct
        });
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        var feedback = this.get('_feedback')._partlyCorrect;

        if (feedback && feedback.final) {
          this.setAttemptSpecificFeedback(feedback);
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);
      }
    }, {
      key: "setAttemptSpecificFeedback",
      value: function setAttemptSpecificFeedback(feedback) {
        var body = this.get('_attemptsLeft') && feedback.notFinal || feedback.final;
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: body
        });
      }
    }, {
      key: "getFeedbackTitle",
      value: function getFeedbackTitle() {
        return this.get('_feedback').title || this.get('displayTitle') || this.get('title') || '';
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        return !this.get('_isComplete') || this.get('_isEnabled') && !this.get('_isSubmitted');
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        if (!this.get('_canReset') && !force) return;
        type = type || true;

        _get(_getPrototypeOf(QuestionModel.prototype), "reset", this).call(this, type, force);

        var attempts = this.get('_attempts');
        this.set({
          _attemptsLeft: attempts,
          _isCorrect: undefined,
          _isSubmitted: false,
          _buttonState: BUTTON_STATE$1.SUBMIT
        });
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.set({
          _isEnabled: true,
          _isSubmitted: false
        });
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.trigger('question:refresh');
      }
    }, {
      key: "getButtonState",
      value: function getButtonState() {
        if (this.get('_isCorrect')) {
          return BUTTON_STATE$1.CORRECT;
        }

        if (this.get('_attemptsLeft') === 0) {
          return this.get('_canShowModelAnswer') ? BUTTON_STATE$1.SHOW_CORRECT_ANSWER : BUTTON_STATE$1.INCORRECT;
        }

        return this.get('_isSubmitted') ? BUTTON_STATE$1.RESET : BUTTON_STATE$1.SUBMIT;
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        return {};
      }
    }, {
      key: "getResponse",
      value: function getResponse() {}
    }, {
      key: "getResponseType",
      value: function getResponseType() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {
        this.addAttemptObject();
      }
    }, {
      key: "shouldShowMarking",
      get: function () {
        if (!this.get('_canShowMarking')) {
          return false;
        }

        return this.get('_isInteractionComplete');
      }
    }]);

    return QuestionModel;
  }(ComponentModel$1);

  Adapt.register('question', {
    model: QuestionModel
  });
  var QuestionModel$1 = __AMD("core/js/models/questionModel", QuestionModel);

  var QuestionView = function (_ComponentView) {
    _inherits(QuestionView, _ComponentView);

    var _super = _createSuper(QuestionView);

    function QuestionView() {
      _classCallCheck(this, QuestionView);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionView, [{
      key: "className",
      value: function className() {
        return ['component', 'is-question', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : '', this.model.get('_canShowModelAnswer') ? 'can-show-model-answer' : '', this.model.get('_canShowFeedback') ? 'can-show-feedback' : '', this.model.get('_canShowMarking') ? 'can-show-marking' : ''].join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);
        this.listenTo(this.model, 'question:refresh', this.refresh);
        this.checkIfResetOnRevisit();

        this._runModelCompatibleFunction('setupDefaultSettings');

        this.setupQuestion();
      }
    }, {
      key: "onEnabledChanged",
      value: function onEnabledChanged(model, changedAttribute) {
        if (!changedAttribute) {
          this.$('.component__widget').addClass('is-disabled');
          this.disableQuestion();
        } else {
          this.$('.component__widget').removeClass('is-disabled');
          this.enableQuestion();
        }
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {}
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {}
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var _this = this;

        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit, true);

          _.defer(function () {
            _this.resetQuestionOnRevisit(isResetOnRevisit);
          });

          return;
        }

        var isInteractionComplete = this.model.get('_isInteractionComplete');

        if (isInteractionComplete) {
          this.model.set('_buttonState', BUTTON_STATE$1.HIDE_CORRECT_ANSWER);

          _.defer(function () {
            _this.onHideCorrectAnswerClicked();
          });

          return;
        }

        this.model.set('_buttonState', BUTTON_STATE$1.SUBMIT);

        _.defer(function () {
          _this.onResetClicked();
        });
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit(type) {}
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.addButtonsView();
        this.onQuestionRendered();
      }
    }, {
      key: "addButtonsView",
      value: function addButtonsView() {
        this.buttonsView = new ButtonsView({
          model: this.model,
          el: this.$('.btn__container')
        });
        this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);
      }
    }, {
      key: "onButtonStateUpdate",
      value: function onButtonStateUpdate(buttonState) {
        switch (buttonState) {
          case BUTTON_STATE$1.SUBMIT:
            this.onSubmitClicked();
            break;

          case BUTTON_STATE$1.RESET:
            this.onResetClicked();
            break;

          case BUTTON_STATE$1.SHOW_CORRECT_ANSWER:
            this.onShowCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
            this.onHideCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.SHOW_FEEDBACK:
            this.showFeedback();
            break;
        }
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {}
    }, {
      key: "onSubmitClicked",
      value: function onSubmitClicked() {
        var canSubmit = this._runModelCompatibleFunction('canSubmit');

        if (!canSubmit) {
          this.showInstructionError();
          this.onCannotSubmit();
          return;
        }

        this._runModelCompatibleFunction('updateAttempts');

        this._runModelCompatibleFunction('setQuestionAsSubmitted');

        this.removeInstructionError();

        this._runModelCompatibleFunction('storeUserAnswer');

        this._runModelCompatibleFunction('markQuestion', 'isCorrect');

        this._runModelCompatibleFunction('setScore');

        this._runModelCompatibleFunction('checkQuestionCompletion');

        if (this.model.shouldShowMarking) {
          this.showMarking();
        }

        this.recordInteraction();

        this._runModelCompatibleFunction('setupFeedback');

        this.showFeedback();
        $(window).resize();

        this._runModelCompatibleFunction('updateButtons');

        this.model.onSubmitted();
        this.onSubmitted();
      }
    }, {
      key: "showInstructionError",
      value: function showInstructionError() {
        Adapt.trigger('questionView:showInstructionError', this);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {}
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.model.setQuestionAsSubmitted();
        this.$('.component__widget').addClass('is-submitted');
      }
    }, {
      key: "removeInstructionError",
      value: function removeInstructionError() {
        this.$('.component__instruction-inner').removeClass('validation-error');
      }
    }, {
      key: "showMarking",
      value: function showMarking() {}
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.model.checkQuestionCompletion();

        if (isComplete) {
          this.$('.component__widget').addClass('is-complete show-user-answer');
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {
          Adapt.trigger('questionView:recordInteraction', this);
        }
      }
    }, {
      key: "showFeedback",
      value: function showFeedback() {
        if (this.model.get('_canShowFeedback')) {
          Adapt.trigger('questionView:showFeedback', this);
        } else {
          Adapt.trigger('questionView:disabledFeedback', this);
        }
      }
    }, {
      key: "onResetClicked",
      value: function onResetClicked() {
        this.setQuestionAsReset();

        this._runModelCompatibleFunction('resetUserAnswer');

        this.resetQuestion();
        this.model.checkCanSubmit();

        this._runModelCompatibleFunction('updateButtons');

        if (!this.model.get('_isReady')) return;
        var currentModel = Adapt.findById(Adapt.location._currentId);
        if (!currentModel || !currentModel.get('_isReady')) return;
        Adapt.a11y.focusNext(this.$el);
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.model.setQuestionAsReset();
        this.$('.component__widget').removeClass('is-submitted');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {}
    }, {
      key: "refresh",
      value: function refresh() {
        this.model.set('_buttonState', this.model.getButtonState());

        if (this.model.shouldShowMarking && this.model.get('_isSubmitted')) {
          this.showMarking();
        }

        if (this.buttonsView) {
          _.defer(this.buttonsView.refresh.bind(this.buttonsView));
        }
      }
    }, {
      key: "onShowCorrectAnswerClicked",
      value: function onShowCorrectAnswerClicked() {
        this.setQuestionAsShowCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.showCorrectAnswer();
      }
    }, {
      key: "setQuestionAsShowCorrect",
      value: function setQuestionAsShowCorrect() {
        this.$('.component__widget').addClass('is-submitted show-correct-answer').removeClass('show-user-answer');
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {}
    }, {
      key: "onHideCorrectAnswerClicked",
      value: function onHideCorrectAnswerClicked() {
        this.setQuestionAsHideCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.hideCorrectAnswer();
      }
    }, {
      key: "setQuestionAsHideCorrect",
      value: function setQuestionAsHideCorrect() {
        this.$('.component__widget').addClass('is-submitted show-user-answer').removeClass('show-correct-answer');
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {}
    }, {
      key: "getLatency",
      value: function getLatency() {
        return null;
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        return this.model[name]();
      }
    }]);

    return QuestionView;
  }(ComponentView$1);

  QuestionView._isQuestionType = true;

  var ViewOnlyQuestionViewCompatibilityLayer = function (_QuestionView) {
    _inherits(ViewOnlyQuestionViewCompatibilityLayer, _QuestionView);

    var _super2 = _createSuper(ViewOnlyQuestionViewCompatibilityLayer);

    function ViewOnlyQuestionViewCompatibilityLayer() {
      _classCallCheck(this, ViewOnlyQuestionViewCompatibilityLayer);

      return _super2.apply(this, arguments);
    }

    _createClass(ViewOnlyQuestionViewCompatibilityLayer, [{
      key: "getInteractionObject",
      value: function getInteractionObject() {
        Adapt.log.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getInteractionObject();
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        Adapt.log.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getResponse();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        Adapt.log.deprecated('QuestionView.getResponseType, please use QuestionModel.getResponseType');
        return this.model.getResponseType();
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        Adapt.log.deprecated('QuestionView.setupDefaultSettings, please use QuestionModel.setupDefaultSettings');
        return this.model.setupDefaultSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        Adapt.log.deprecated('QuestionView.setupButtonSettings, please use QuestionModel.setupButtonSettings');
        return this.model.setupButtonSettings();
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {
        Adapt.log.deprecated('QuestionView.setupWeightSettings, please use QuestionModel.setupWeightSettings');
        return this.model.setupWeightSettings();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        Adapt.log.deprecated('QuestionView.canSubmit, please use QuestionModel.canSubmit');
        return this.model.canSubmit();
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        Adapt.log.deprecated('QuestionView.updateAttempts, please use QuestionModel.updateAttempts');
        return this.model.updateAttempts();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        Adapt.log.deprecated('QuestionView.storeUserAnswer, please use QuestionModel.storeUserAnswer');
        return this.model.storeUserAnswer();
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        Adapt.log.deprecated('QuestionView.resetUserAnswer, please use QuestionModel.resetUserAnswer');
        return this.model.resetUserAnswer();
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this._isInViewOnlyCompatibleMode('isCorrect')) {
          if (this.isCorrect()) {
            this.model.set('_isCorrect', true);
          } else {
            this.model.set('_isCorrect', false);
          }
        } else {
          return this.model.markQuestion();
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        Adapt.log.deprecated('QuestionView.isCorrect, please use QuestionModel.isCorrect');
        return this.model.isCorrect();
      }
    }, {
      key: "setScore",
      value: function setScore() {
        Adapt.log.deprecated('QuestionView.setScore, please use QuestionModel.setScore');
        return this.model.setScore();
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        Adapt.log.deprecated('QuestionView.updateButtons, please use QuestionModel.updateButtons');
        return this.model.updateButtons();
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (this._isInViewOnlyCompatibleMode('isPartlyCorrect')) {
          if (this.model.get('_isCorrect')) {
            this._runModelCompatibleFunction('setupCorrectFeedback');
          } else if (this.isPartlyCorrect()) {
            this._runModelCompatibleFunction('setupPartlyCorrectFeedback');
          } else {
            this._runModelCompatibleFunction('setupIncorrectFeedback');
          }
        } else {
          this.model.setupFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        Adapt.log.deprecated('QuestionView.isPartlyCorrect, please use QuestionModel.isPartlyCorrect');
        return this.model.isPartlyCorrect();
      }
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        Adapt.log.deprecated('QuestionView.setupCorrectFeedback, please use QuestionModel.setupCorrectFeedback');
        return this.model.setupCorrectFeedback();
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        Adapt.log.deprecated('QuestionView.setupPartlyCorrectFeedback, please use QuestionModel.setupPartlyCorrectFeedback');
        return this.model.setupPartlyCorrectFeedback();
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        Adapt.log.deprecated('QuestionView.setupIncorrectFeedback, please use QuestionModel.setupIncorrectFeedback');
        return this.model.setupIncorrectFeedback();
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {
          return this[name]();
        } else {
          return this.model[name]();
        }
      }
    }, {
      key: "_isInViewOnlyCompatibleMode",
      value: function _isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction) {
        var checkForFunction = lookForViewOnlyFunction || name;
        if (!this.constructor.prototype[checkForFunction]) return false;
        var hasCompatibleVersion = ViewOnlyQuestionViewCompatibilityLayer.prototype.hasOwnProperty(checkForFunction);
        var usingCompatibleVersion = this.constructor.prototype[checkForFunction] === ViewOnlyQuestionViewCompatibilityLayer.prototype[checkForFunction];

        if (hasCompatibleVersion && usingCompatibleVersion) {
          switch (checkForFunction) {
            case 'setupFeedback':
            case 'markQuestion':
              return true;
          }

          return false;
        }

        return true;
      }
    }]);

    return ViewOnlyQuestionViewCompatibilityLayer;
  }(QuestionView);
  var QuestionView$1 = __AMD("core/js/views/questionView", ViewOnlyQuestionViewCompatibilityLayer);

  var McqView = QuestionView$1.extend({
    events: {
      'focus .js-item-input': 'onItemFocus',
      'blur .js-item-input': 'onItemBlur',
      'change .js-item-input': 'onItemSelect',
      'keyup .js-item-input': 'onKeyPress'
    },
    isCorrectAnswerShown: false,
    initialize: function () {
      QuestionView$1.prototype.initialize.apply(this, arguments);
      this.update = _.debounce(this.update.bind(this), 1);
      this.listenTo(this.model, {
        "change:_isEnabled change:_isComplete change:_isSubmitted": this.update
      });
      this.listenTo(this.model.getChildren(), {
        "change:_isActive": this.update
      });
    },
    resetQuestionOnRevisit: function () {
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.model.setupRandomisation();
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
      this.update();
    },
    onKeyPress: function (event) {
      if (event.which !== 13) return;
      this.onItemSelect(event);
    },
    onItemFocus: function (event) {
      if (!this.model.isInteractive()) return;
      this.$('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').addClass('is-highlighted');
    },
    onItemBlur: function (event) {
      this.$('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').removeClass('is-highlighted');
    },
    onItemSelect: function (event) {
      if (!this.model.isInteractive()) return;
      var index = $(event.currentTarget).data('adapt-index');
      var itemModel = this.model.getItem(index);
      var shouldSelect = !itemModel.get("_isActive");

      if (this.model.isSingleSelect()) {
        shouldSelect = true;
        this.model.resetActiveItems();
      } else if (shouldSelect && this.model.isAtActiveLimit()) {
        this.model.getLastActiveItem().toggleActive(false);
      }

      itemModel.toggleActive(shouldSelect);
    },
    onCannotSubmit: function () {},
    showMarking: function () {
      this.update();
    },
    resetQuestion: function () {
      this.model.resetActiveItems();
      this.model.resetItems();
    },
    showCorrectAnswer: function () {
      this.isCorrectAnswerShown = true;
      this.update();
    },
    hideCorrectAnswer: function () {
      this.isCorrectAnswerShown = false;
      this.update();
    },
    update: function () {
      this.updateSelection();
      this.updateMarking();
    },
    updateSelection: function () {
      var isEnabled = this.model.get("_isEnabled");
      this.model.getChildren().each(function (itemModel) {
        var isSelected = this.isCorrectAnswerShown ? itemModel.get("_shouldBeSelected") : itemModel.get("_isActive");
        var index = itemModel.get('_index');
        this.$('.js-item-label').filter('[data-adapt-index="' + index + '"]').toggleClass('is-selected', isSelected).toggleClass('is-disabled', !isEnabled);
        this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]').prop('checked', isSelected).prop('disabled', !isEnabled);
      }.bind(this));
    },
    updateMarking: function () {
      var isInteractive = this.model.isInteractive();
      var canShowMarking = this.model.get('_canShowMarking');

      var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

      this.model.getChildren().each(function (itemModel) {
        var index = itemModel.get('_index');
        var $itemInput = this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]');
        var $item = $itemInput.parents('.js-mcq-item');

        if (isInteractive || !canShowMarking) {
          $item.removeClass('is-correct is-incorrect');
          $itemInput.attr('aria-label', $.a11y_normalize(itemModel.get("text")));
          return;
        }

        var shouldBeSelected = itemModel.get("_shouldBeSelected");
        var isCorrect = Boolean(itemModel.get("_isCorrect"));
        var isActive = Boolean(itemModel.get("_isActive"));
        $item.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect);
        $itemInput.attr('aria-label', [shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ", ", isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, ". ", $.a11y_normalize(itemModel.get("text"))].join(""));
      }.bind(this));
    }
  });
  var McqView$1 = __AMD("components/adapt-contrib-mcq/js/mcqView", McqView);

  var BlendedItemsComponentQuestionModel = function (_QuestionModel) {
    _inherits(BlendedItemsComponentQuestionModel, _QuestionModel);

    var _super = _createSuper(BlendedItemsComponentQuestionModel);

    function BlendedItemsComponentQuestionModel() {
      _classCallCheck(this, BlendedItemsComponentQuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlendedItemsComponentQuestionModel, [{
      key: "init",
      value: function init() {
        ItemsComponentModel.prototype.init.call(this);

        _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "reset",
      value: function reset(type, force) {
        ItemsComponentModel.prototype.reset.call(this, type, force);

        _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "reset", this).call(this, type, force);
      }
    }]);

    return BlendedItemsComponentQuestionModel;
  }(QuestionModel$1);

  Object.getOwnPropertyNames(ItemsComponentModel.prototype).forEach(function (name) {
    if (name === 'constructor' || name === 'init' || name === 'reset') return;
    Object.defineProperty(BlendedItemsComponentQuestionModel.prototype, name, {
      value: ItemsComponentModel.prototype[name]
    });
  });
  var ItemsQuestionModel = __AMD("core/js/models/itemsQuestionModel", function (_BlendedItemsComponen) {
    _inherits(ItemsQuestionModel, _BlendedItemsComponen);

    var _super2 = _createSuper(ItemsQuestionModel);

    function ItemsQuestionModel() {
      _classCallCheck(this, ItemsQuestionModel);

      return _super2.apply(this, arguments);
    }

    _createClass(ItemsQuestionModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(ItemsQuestionModel.prototype), "init", this).call(this);

        this.set('_isRadio', this.isSingleSelect());
        this.listenTo(this.getChildren(), 'change:_isActive', this.checkCanSubmit);
        this.checkCanSubmit();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var itemModels = this.getChildren();
        var userAnswer = this.get('_userAnswer');
        itemModels.each(function (item) {
          item.toggleActive(userAnswer[item.get('_index')]);
        });
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        var children = this.getChildren();
        children.set(children.shuffle());
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var activeItems = this.getActiveItems();
        return activeItems.length > 0;
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.getChildren().slice(0);
        items.sort(function (a, b) {
          return a.get('_index') - b.get('_index');
        });
        var userAnswer = items.map(function (itemModel) {
          return itemModel.get('_isActive');
        });
        this.set('_userAnswer', userAnswer);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var props = {
          _numberOfRequiredAnswers: 0,
          _numberOfIncorrectAnswers: 0,
          _isAtLeastOneCorrectSelection: false,
          _numberOfCorrectAnswers: 0
        };
        this.getChildren().each(function (itemModel) {
          var itemShouldBeActive = itemModel.get('_shouldBeSelected');

          if (itemShouldBeActive) {
            props._numberOfRequiredAnswers++;
          }

          if (!itemModel.get('_isActive')) return;

          if (!itemShouldBeActive) {
            props._numberOfIncorrectAnswers++;
            return;
          }

          props._isAtLeastOneCorrectSelection = true;
          props._numberOfCorrectAnswers++;
          itemModel.set('_isCorrect', true);
        });
        this.set(props);
        var hasRightNumberOfCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasNoIncorrectAnswers = !props._numberOfIncorrectAnswers;
        return hasRightNumberOfCorrectAnswers && hasNoIncorrectAnswers;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');
        var answeredCorrectly = this.get('_isCorrect');
        var score = answeredCorrectly ? questionWeight : 0;
        this.set('_score', score);
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
          return;
        }

        if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
          return;
        }

        var activeItem = this.getActiveItem();

        if (this.isSingleSelect() && activeItem.get('feedback')) {
          this.setupIndividualFeedback(activeItem);
          return;
        }

        this.setupIncorrectFeedback();
      }
    }, {
      key: "setupIndividualFeedback",
      value: function setupIndividualFeedback(selectedItem) {
        this.set({
          feedbackTitle: this.getFeedbackTitle(this.get('_feedback')),
          feedbackMessage: selectedItem.get('feedback')
        });
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "isAtActiveLimit",
      value: function isAtActiveLimit() {
        var selectedItems = this.getActiveItems();
        return selectedItems.length === this.get('_selectable');
      }
    }, {
      key: "isSingleSelect",
      value: function isSingleSelect() {
        return this.get('_selectable') === 1;
      }
    }, {
      key: "getLastActiveItem",
      value: function getLastActiveItem() {
        var selectedItems = this.getActiveItems();
        return selectedItems[selectedItems.length - 1];
      }
    }, {
      key: "resetItems",
      value: function resetItems() {
        this.resetActiveItems();
        this.set('_isAtLeastOneCorrectSelection', false);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var interactions = {
          correctResponsesPattern: [],
          choices: []
        };
        interactions.choices = this.getChildren().map(function (itemModel) {
          return {
            id: (itemModel.get('_index') + 1).toString(),
            description: itemModel.get('text')
          };
        });
        var correctItems = this.getChildren().filter(function (itemModel) {
          return itemModel.get('_shouldBeSelected');
        });
        interactions.correctResponsesPattern = [correctItems.map(function (itemModel) {
          return String(itemModel.get('_index') + 1);
        }).join('[,]')];
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var activeItems = this.getActiveItems();
        var activeIndexes = activeItems.map(function (itemModel) {
          return itemModel.get('_index') + 1;
        });
        return activeIndexes.join(',');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'choice';
      }
    }]);

    return ItemsQuestionModel;
  }(BlendedItemsComponentQuestionModel));

  var Mcq = __AMD("components/adapt-contrib-mcq/js/adapt-contrib-mcq", Adapt.register("mcq", {
    view: McqView$1,
    model: ItemsQuestionModel.extend({})
  }));

  var Gmcq = Mcq.view.extend({
    setupQuestion: function () {
      Mcq.view.prototype.setupQuestion.call(this);
      this.listenTo(Adapt, {
        'device:changed': this.resizeImage,
        'device:resize': this.onDeviceResize
      });
    },
    onQuestionRendered: function () {
      this.resizeImage(Adapt.device.screenSize);
      this.setUpColumns();
      this.$('.js-item-label').imageready(this.setReadyStatus.bind(this));
    },
    onDeviceResize: function () {
      this.setUpColumns();
    },
    resizeImage: function (width) {
      var imageWidth = width === 'medium' ? 'small' : width;
      this.$('.js-item-label').each(function (index) {
        var $img = $(this).find('img');
        var newSrc = $img.attr('data-' + imageWidth);
        if (!newSrc) return;
        $img.attr('src', newSrc);
      });
    },
    setUpColumns: function () {
      var columns = this.model.get('_columns');
      if (!columns) return;
      var isLarge = Adapt.device.screenSize === 'large';
      this.$el.toggleClass('has-column-layout', isLarge);
      this.$('.js-mcq-item').css('width', isLarge ? 100 / columns + '%' : '');
    }
  }, {
    template: 'gmcq'
  });
  __AMD("components/adapt-contrib-gmcq/js/adapt-contrib-gmcq", Adapt.register("gmcq", {
    view: Gmcq,
    model: Mcq.model.extend({})
  }));

  var GraphicView = function (_ComponentView) {
    _inherits(GraphicView, _ComponentView);

    var _super = _createSuper(GraphicView);

    function GraphicView() {
      _classCallCheck(this, GraphicView);

      return _super.apply(this, arguments);
    }

    _createClass(GraphicView, [{
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt, 'device:changed', this.resizeImage);
        this.checkIfResetOnRevisit();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.resizeImage(Adapt.device.screenSize, true);
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "resizeImage",
      value: function resizeImage(width, setupInView) {
        var _this = this;

        var imageWidth = width === 'medium' ? 'small' : width;
        var imageSrc = this.model.get('_graphic') ? this.model.get('_graphic')[imageWidth] : '';
        this.$('.js-graphic-set-image-src').attr('src', imageSrc);
        this.$('.graphic__widget').imageready(function () {
          _this.setReadyStatus();

          if (setupInView) {
            _this.setupInviewCompletion('.graphic__widget');
          }
        });
      }
    }]);

    return GraphicView;
  }(ComponentView$1);

  GraphicView.template = 'graphic';
  __AMD("components/adapt-contrib-graphic/js/adapt-contrib-graphic", Adapt.register('graphic', {
    model: ComponentModel$1.extend({}),
    view: GraphicView
  }));

  var HotgraphicPopupView = function (_Backbone$View) {
    _inherits(HotgraphicPopupView, _Backbone$View);

    var _super = _createSuper(HotgraphicPopupView);

    function HotgraphicPopupView() {
      _classCallCheck(this, HotgraphicPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(HotgraphicPopupView, [{
      key: "className",
      value: function className() {
        return 'hotgraphic-popup';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphic-popup-close': 'closePopup',
          'click .js-hotgraphic-controls-click': 'onControlClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(HotgraphicPopupView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.onControlClick = _.debounce(this.onControlClick.bind(this), 100);
        this.listenToOnce(Adapt, 'notify:opened', this.onOpened);
        this.listenTo(this.model.get('_children'), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.render();
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        this.applyNavigationClasses(this.model.getActiveItem().get('_index'));
        this.updatePageCount();
        this.handleTabs();
      }
    }, {
      key: "applyNavigationClasses",
      value: function applyNavigationClasses(index) {
        var itemCount = this.model.get('_items').length;
        var canCycleThroughPagination = this.model.get('_canCycleThroughPagination');
        var shouldEnableBack = index > 0 || canCycleThroughPagination;
        var shouldEnableNext = index < itemCount - 1 || canCycleThroughPagination;
        var $controls = this.$('.hotgraphic-popup__controls');
        this.$('hotgraphic-popup__nav').toggleClass('first', !shouldEnableBack).toggleClass('last', !shouldEnableNext);
        Adapt.a11y.toggleAccessibleEnabled($controls.filter('.back'), shouldEnableBack);
        Adapt.a11y.toggleAccessibleEnabled($controls.filter('.next'), shouldEnableNext);
      }
    }, {
      key: "updatePageCount",
      value: function updatePageCount() {
        var template = Adapt.course.get('_globals')._components._hotgraphic.popupPagination || '{{itemNumber}} / {{totalItems}}';
        var labelText = Handlebars.compile(template)({
          itemNumber: this.model.getActiveItem().get('_index') + 1,
          totalItems: this.model.get('_items').length
        });
        this.$('.hotgraphic-popup__count').html(labelText);
      }
    }, {
      key: "handleTabs",
      value: function handleTabs() {
        Adapt.a11y.toggleHidden(this.$('.hotgraphic-popup__item:not(.is-active)'), true);
        Adapt.a11y.toggleHidden(this.$('.hotgraphic-popup__item.is-active'), false);
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (!_isActive) return;
        var index = item.get('_index');
        this.updatePageCount();
        this.applyItemClasses(index);
        this.handleTabs();
        this.handleFocus(index);
      }
    }, {
      key: "applyItemClasses",
      value: function applyItemClasses(index) {
        this.$(".hotgraphic-popup__item[data-index=\"".concat(index, "\"]")).addClass('is-active').removeAttr('aria-hidden');
        this.$(".hotgraphic-popup__item[data-index=\"".concat(index, "\"] .hotgraphic-popup__item-title")).attr('id', 'notify-heading');
        this.$(".hotgraphic-popup__item:not([data-index=\"".concat(index, "\"])")).removeClass('is-active').attr('aria-hidden', 'true');
        this.$(".hotgraphic-popup__item:not([data-index=\"".concat(index, "\"]) .hotgraphic-popup__item-title")).removeAttr('id');
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(index) {
        Adapt.a11y.focusFirst(this.$('.hotgraphic-popup__inner .is-active'));
        this.applyNavigationClasses(index);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, _isVisited) {
        if (!_isVisited) return;
        this.$('.hotgraphic-popup__item').filter("[data-index=\"".concat(item.get('_index'), "\"]")).addClass('is-visited');
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "closePopup",
      value: function closePopup() {
        Adapt.trigger('notify:close');
      }
    }, {
      key: "onControlClick",
      value: function onControlClick(event) {
        var direction = $(event.currentTarget).data('direction');
        var index = this.getNextIndex(direction);
        if (index === -1) return;
        this.setItemState(index);
      }
    }, {
      key: "getNextIndex",
      value: function getNextIndex(direction) {
        var index = this.model.getActiveItem().get('_index');
        var lastIndex = this.model.get('_items').length - 1;

        switch (direction) {
          case 'back':
            if (index > 0) return --index;
            if (this.model.get('_canCycleThroughPagination')) return lastIndex;
            break;

          case 'next':
            if (index < lastIndex) return ++index;
            if (this.model.get('_canCycleThroughPagination')) return 0;
        }

        return -1;
      }
    }, {
      key: "setItemState",
      value: function setItemState(index) {
        this.model.getActiveItem().toggleActive();
        var nextItem = this.model.getItem(index);
        nextItem.toggleActive();
        nextItem.toggleVisited(true);
      }
    }]);

    return HotgraphicPopupView;
  }(Backbone.View);
  HotgraphicPopupView.template = 'hotgraphicPopup';
  var HotgraphicPopupView$1 = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicPopupView", HotgraphicPopupView);

  var HotGraphicView = function (_ComponentView) {
    _inherits(HotGraphicView, _ComponentView);

    var _super = _createSuper(HotGraphicView);

    function HotGraphicView() {
      _classCallCheck(this, HotGraphicView);

      return _super.apply(this, arguments);
    }

    _createClass(HotGraphicView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphic-item-click': 'onPinClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(HotGraphicView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.setUpViewData();
        this.setUpModelData();
        this.setUpEventListeners();
        this.checkIfResetOnRevisit();
      }
    }, {
      key: "setUpViewData",
      value: function setUpViewData() {
        this.popupView = null;
        this._isPopupOpen = false;
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        if (this.model.get('_canCycleThroughPagination') === undefined) {
          this.model.set('_canCycleThroughPagination', false);
        }
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt, 'device:changed', this.reRender);
        this.listenTo(this.model.get('_children'), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (Adapt.device.screenSize === 'large' || this.model.get('_isNarrativeOnMobile') === false) return;
        this.replaceWithNarrative();
      }
    }, {
      key: "replaceWithNarrative",
      value: function replaceWithNarrative() {
        var NarrativeView = Adapt.getViewClass('narrative');
        if (!NarrativeView) return;
        var model = this.prepareNarrativeModel();
        var newNarrative = new NarrativeView({
          model: model
        });
        var $container = Adapt.findViewByModelId(model.get('_parentId')).$el.find('.component__container');
        $container.append(newNarrative.$el);
        this.remove();

        _.defer(function () {
          Adapt.trigger('device:resize');
        });
      }
    }, {
      key: "prepareNarrativeModel",
      value: function prepareNarrativeModel() {
        this.model.set({
          _component: 'narrative',
          _wasHotgraphic: true,
          originalBody: this.model.get('body'),
          originalInstruction: this.model.get('instruction')
        });
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          this.model.getItem(0).toggleActive(true);
        }

        if (this.model.get('mobileBody')) {
          this.model.set('body', this.model.get('mobileBody'));
        }

        if (this.model.get('mobileInstruction')) {
          this.model.set('instruction', this.model.get('mobileInstruction'));
        }

        return this.model;
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive);
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-hotgraphic-item-click').filter("[data-index=\"".concat(index, "\"]"));
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $pin = this.getItemElement(model);
        var visitedLabel = " ".concat(this.model.get('_globals')._accessibility._ariaLabels.visited, ".");
        $pin.find('.aria-label').each(function (index, el) {
          el.innerHTML += visitedLabel;
        });
        $pin.addClass('is-visited');
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "preRender",
      value: function preRender() {
        if (Adapt.device.screenSize === 'large') {
          this.render();
          return;
        }

        this.reRender();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('.hotgraphic__widget').imageready(this.setReadyStatus.bind(this));

        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }
      }
    }, {
      key: "onPinClicked",
      value: function onPinClicked(event) {
        var item = this.model.getItem($(event.currentTarget).data('index'));
        item.toggleActive(true);
        item.toggleVisited(true);
        this.openPopup();
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        this.popupView = new HotgraphicPopupView$1({
          model: this.model
        });
        Adapt.notify.popup({
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: false,
          _classes: 'hotgraphic ' + this.model.get('_classes')
        });
        this.listenToOnce(Adapt, {
          'popup:closed': this.onPopupClosed
        });
      }
    }, {
      key: "onPopupClosed",
      value: function onPopupClosed() {
        this.model.getActiveItem().toggleActive();
        this._isPopupOpen = false;
      }
    }]);

    return HotGraphicView;
  }(ComponentView$1);

  HotGraphicView.template = 'hotgraphic';
  var HotgraphicView = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicView", HotGraphicView);

  __AMD("components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic", Adapt.register('hotgraphic', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicView
  }));

  var DropDownItem = Backbone.View.extend({
    events: {
      'click': 'onClick',
      'click *': 'onClick'
    },
    initialize: function (settings) {
      this.settings = settings;
      this.$inner = this.$('.js-dropdown-list-item-inner');
    },
    isPlaceholder: function () {
      return this.$el.is('[hidden]');
    },
    parent: function () {
      return this.settings.parent;
    },
    onClick: function (event) {
      var parent = this.parent();
      event.preventDefault();
      this.select().scrollTo();
      parent.$button.focus();
    },
    getValue: function () {
      return this.$el.attr('value').trim();
    },
    select: function () {
      var parent = this.parent();
      parent.deselectAll();
      parent.setActiveDescendantId(this.el.id);
      this.$el.attr({
        selected: '',
        'aria-selected': 'true'
      });
      parent.$inner.html(this.$el.attr('text'));
      var value = this.isPlaceholder() ? '' : this.getValue();
      parent.$input.val(value).trigger('change');
      parent.trigger('change', parent);
      return this;
    },
    deselect: function () {
      if (!this.isSelected()) return this;
      var parent = this.parent();
      parent.removeActiveDescendantId();
      this.$el.removeAttr('selected');
      this.$el.attr('aria-selected', 'false');
      parent.$inner.html('');
      parent.$input.val('').trigger('change');
      parent.trigger('change', parent);
      return this;
    },
    reselect: function () {
      var parent = this.parent();
      parent.setActiveDescendantId(this.$el[0].id);
      if (this.isSelected()) return this;
      this.select();
      return this;
    },
    isSelected: function () {
      return Boolean(this.$el.attr('selected'));
    },
    getIndex: function () {
      var parent = this.parent();
      return _.findIndex(parent.options, function (option) {
        return option === this;
      }.bind(this));
    },
    getNext: function () {
      var parent = this.parent();
      return parent.options[this.getIndex() + 1];
    },
    getPrevious: function () {
      var parent = this.parent();
      return parent.options[this.getIndex() - 1];
    },
    getFirst: function () {
      var parent = this.parent();
      return parent.options[0];
    },
    getLast: function () {
      var parent = this.parent();
      return parent.options[parent.options.length - 1];
    },
    scrollTo: function () {
      var parent = this.parent();
      parent.settings.scrollToItem.call(parent, this);
    },
    destroy: function () {
      var parent = this.parent();
      this.remove();

      if (this.isPlaceholder()) {
        parent.placeholder = null;
      } else {
        for (var i = 0, l = parent.options.length; i < l; i++) {
          var item = parent.options[i];
          if (item !== this) continue;
          parent.options.splice(i, 1);
          break;
        }
      }

      delete this.settings;
    }
  });
  var DropDownOption = __AMD("components/adapt-contrib-matching/js/dropdownOption", DropDownItem);

  var DropDown = Backbone.View.extend({
    initialize: function (settings) {
      _.bindAll(this, 'onStartInteraction', 'onButtonClick', 'onListBlur', 'onKeyDown');

      this.settings = _.defaults(settings, this.getDefaults());
      this.placeholder = null;
      this.options = [];
      this.setUpElements();
      this.setUpItems();
      this.select(this.settings.value);
      this.addEventListeners();
      this.toggleOpen(false);
      this.settings.load.call(this, this);
      this.trigger('load', this);
    },
    getDefaults: function () {
      return {
        load: DropDown.defaults.load,
        openList: DropDown.defaults.openList,
        closeList: DropDown.defaults.closeList,
        scrollToItem: DropDown.defaults.scrollToItem
      };
    },
    setUpElements: function () {
      this.$list = this.$('.js-dropdown-list');
      this.$button = this.$('.js-dropdown-btn');
      this.$inner = this.$button.find('.js-dropdown-inner');
      this.$input = this.$('.js-data-output');
    },
    setUpItems: function () {
      var $options = this.$('.js-dropdown-list-item');
      $options.each(function (index, el) {
        var option = new DropDownOption({
          parent: this,
          el: el
        });

        if (option.isPlaceholder()) {
          this.placeholder = option;
          return;
        }

        this.options.push(option);
      }.bind(this));
    },
    addEventListeners: function () {
      this.$button.on({
        'mousedown touchstart': this.onStartInteraction,
        click: this.onButtonClick
      });
      this.$list.on('blur', this.onListBlur);
      $(document).on('keydown', this.onKeyDown);
    },
    onStartInteraction: function () {
      this.wasOpen = this.isOpen();
    },
    deselectAll: function () {
      this.placeholder.deselect();
      this.options.forEach(function (option) {
        option.deselect();
      });
    },
    onButtonClick: function (event) {
      if (this.wasOpen || this.isOpen()) {
        this.wasOpen = false;
        return;
      }

      this.toggleOpen();
      var option = this.getFirstSelectedItem() || this.placeholder;
      if (!option) return;
      option.reselect();
      option.scrollTo();
      this.$list.focus();
    },
    isOpen: function () {
      return !this.$list.hasClass('u-display-none');
    },
    toggleOpen: function (open) {
      if (open === undefined) open = !this.isOpen();
      if (open) clearTimeout(this.blurTimeout);
      this.$button.attr('aria-expanded', open ? 'true' : 'false');
      var name = open ? 'openList' : 'closeList';
      this.settings[name].call(this, this);
      this.trigger(name, this);
    },
    onListBlur: function (event) {
      var handleBlur = function () {
        this.toggleOpen(false);
        this.removeActiveDescendantId();
      }.bind(this);

      this.blurTimeout = setTimeout(handleBlur, 100);
    },
    onKeyDown: function (event) {
      if (!this.isOpen()) return;
      var option = this.getFirstSelectedItem() || this.placeholder;

      switch (event.keyCode) {
        case 38:
          event.preventDefault();
          option = option.getPrevious() || option.getLast();
          break;

        case 40:
          event.preventDefault();
          option = option.getNext() || option.getFirst();
          break;

        case 13:
        case 32:
        case 27:
          event.preventDefault();
          this.$button.focus();
          return;

        default:
          return;
      }

      option.select().scrollTo();
    },
    getFirstSelectedItem: function () {
      return _.find(this.options, function (option) {
        return option.isSelected();
      });
    },
    setActiveDescendantId: function (id) {
      this.$list.attr('aria-activedescendant', id);
    },
    removeActiveDescendantId: function () {
      this.$list.removeAttr('aria-activedescendant');
    },
    select: function (value) {
      value = String(value);

      var option = _.find(this.options, function (option) {
        return option.getValue() === value;
      });

      if (option) {
        option.select();
        return;
      }

      this.placeholder.select();
    },
    toggleDisabled: function (value) {
      if (value === undefined) {
        value = !this.$input.attr('disabled');
      }

      if (value === false) {
        this.$input.removeAttr('disabled');
        this.$button.removeAttr('disabled').removeClass('is-disabled');
        this.$el.removeAttr('disabled');
        return;
      }

      this.$input.attr('disabled', '');
      this.$button.attr('disabled', '').addClass('is-disabled');
      this.$el.attr('disabled', '');
    },
    isEmpty: function () {
      return !this.getFirstSelectedItem();
    },
    val: function () {
      return this.$input.val();
    },
    destroy: function () {
      this.removeEventListeners();
      this.$el.remove();
      delete this.options;
      delete this.$input;
      delete this.$inner;
      delete this.$button;
      delete this.$list;
      delete this.$el;
    },
    removeEventListeners: function () {
      this.$button.off({
        'mousedown touchstart': this.onStartInteraction,
        click: this.onButtonClick
      });
      this.$list.off('blur', this.onListBlur);
      $(document).off('keydown', this.onKeyDown);
    }
  }, {
    defaults: {
      load: function () {},
      openList: function () {
        this.$list.css({
          top: '',
          left: this.$button[0].offsetLeft,
          width: this.$button.outerWidth()
        }).addClass('u-visibility-hidden').removeClass('u-display-none');
        var offset = this.$list[0].getBoundingClientRect();
        var height = this.$list.height();
        var windowHeight = $(window).height();
        var isOffscreen = offset.top + height > windowHeight;
        this.$list.css('top', isOffscreen ? -height : '').removeClass('u-visibility-hidden').focus();
      },
      closeList: function () {
        this.$list.removeClass('u-visibility-hidden').addClass('u-display-none').css('top', '');
      },
      scrollToItem: function (option) {
        var height = this.$list[0].clientHeight;
        var pos = option.$el[0].offsetTop - height / 2;
        this.$list[0].scrollTop = pos;
      }
    }
  });
  var DropDown$1 = __AMD("components/adapt-contrib-matching/js/dropdown", DropDown);

  var MatchingView = QuestionView$1.extend({
    dropdowns: null,
    disableQuestion: function () {
      this.dropdowns.forEach(function (dropdown) {
        dropdown.toggleDisabled(true);
      });
    },
    enableQuestion: function () {
      this.dropdowns.forEach(function (dropdown) {
        dropdown.toggleDisabled(false);
      });
    },
    resetQuestionOnRevisit: function () {
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.listenToOnce(Adapt.parentView, 'postRemove', this.onPostRemove);
      this.model.setupRandomisation();
    },
    onPostRemove: function () {
      this.dropdowns.forEach(function (dropdown) {
        dropdown.off('change', this.onOptionSelected);
        dropdown.destroy();
      }, this);
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
      this.setUpDropdowns();
    },
    setUpDropdowns: function () {
      _.bindAll(this, 'onOptionSelected');

      this.dropdowns = [];
      var items = this.model.get('_items');
      this.$('.matching__item').each(function (i, el) {
        var item = items[i];

        var selectedOption = _.find(item._options, function (option) {
          return option._isSelected;
        });

        var value = selectedOption ? selectedOption._index : null;
        var dropdown = new DropDown$1({
          el: $(el).find('.dropdown')[0],
          placeholder: this.model.get('placeholder'),
          value: value
        });
        this.dropdowns.push(dropdown);
        dropdown.on('change', this.onOptionSelected);
      }.bind(this));
      this.enableQuestion();

      if (this.model.get('_isEnabled') !== true) {
        this.disableQuestion();
      }
    },
    onCannotSubmit: function () {
      this.dropdowns.forEach(function (dropdown) {
        if (!dropdown.isEmpty()) return;
        dropdown.$el.parents('.matching__select-container').addClass('has-error');
      });
    },
    onOptionSelected: function (dropdown) {
      if (this.model.get('_isInteractionComplete')) return;
      var $container = dropdown.$el.parents('.matching__select-container');
      $container.removeClass('error');
      var itemIndex = dropdown.$el.parents('.matching__item').index();
      if (dropdown.isEmpty()) return;
      var optionIndex = parseInt(dropdown.val());
      this.model.setOptionSelected(itemIndex, optionIndex, true);
    },
    showMarking: function () {
      if (!this.model.get('_canShowMarking')) return;
      this.model.get('_items').forEach(function (item, i) {
        var $item = this.$('.matching__item').eq(i);
        $item.removeClass('is-correct is-incorrect').addClass(item._isCorrect ? 'is-correct' : 'is-incorrect');
      }, this);
    },
    resetQuestion: function () {
      this.$('.matching__item').removeClass('is-correct is-incorrect');
      this.model.set('_isAtLeastOneCorrectSelection', false);
      var resetAll = this.model.get('_shouldResetAllAnswers');
      this.model.get('_items').forEach(function (item, index) {
        if (item._isCorrect && resetAll === false) return;
        this.selectValue(index, null);

        item._options.forEach(function (option, index) {
          option._isSelected = false;
        });

        item._selected = null;
      }, this);
    },
    showCorrectAnswer: function () {
      this.model.get('_items').forEach(function (item, index) {
        var correctOption = _.findWhere(item._options, {
          _isCorrect: true
        });

        this.selectValue(index, correctOption._index);
      }, this);
    },
    hideCorrectAnswer: function () {
      var answerArray = this.model.has('_tempUserAnswer') ? this.model.get('_tempUserAnswer') : this.model.get('_userAnswer');
      this.model.get('_items').forEach(function (item, index) {
        var key = answerArray[index];
        var value = item._options[key]._index;
        this.selectValue(index, value);
      }, this);
    },
    selectValue: function (index, optionIndex) {
      if (!this.dropdowns) return;
      var dropdown = this.dropdowns[index];
      if (!dropdown) return;
      dropdown.select(optionIndex);
    }
  });
  var MatchingView$1 = __AMD("components/adapt-contrib-matching/js/matchingView", MatchingView);

  var MatchingModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.setupQuestionItemIndexes();
    },
    setupQuestionItemIndexes: function () {
      this.get('_items').forEach(function (item, index) {
        if (item._index === undefined) {
          item._index = index;
          item._selected = false;
        }

        item._options.forEach(function (option, index) {
          if (option._index === undefined) {
            option._index = index;
            option._isSelected = false;
          }
        });
      });
    },
    setupRandomisation: function () {
      if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
      this.get('_items').forEach(function (item) {
        item._options = _.shuffle(item._options);
      });
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      this.get('_items').forEach(function (item, index) {
        item._options.forEach(function (option, index) {
          if (option._index === userAnswer[item._index]) {
            option._isSelected = true;
            item._selected = option;
          }
        });
      });
      this.setQuestionAsSubmitted();
      this.checkCanSubmit();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    canSubmit: function () {
      var canSubmit = _.every(this.get('_items'), function (item) {
        return _.findWhere(item._options, {
          '_isSelected': true
        }) !== undefined;
      });

      return canSubmit;
    },
    setOptionSelected: function (itemIndex, optionIndex, isSelected) {
      var item = this.get('_items')[itemIndex];

      var option = _.findWhere(item._options, {
        '_index': optionIndex
      });

      option._isSelected = isSelected;
      item._selected = option;
      this.checkCanSubmit();
    },
    storeUserAnswer: function () {
      var userAnswer = new Array(this.get('_items').length);
      var tempUserAnswer = new Array(this.get('_items').length);
      this.get('_items').forEach(function (item, index) {
        var optionIndex = _.findIndex(item._options, function (o) {
          return o._isSelected;
        });

        tempUserAnswer[item._index] = optionIndex;
        userAnswer[item._index] = item._options[optionIndex]._index;
      }, this);
      this.set({
        _userAnswer: userAnswer,
        _tempUserAnswer: tempUserAnswer
      });
    },
    isCorrect: function () {
      var numberOfCorrectAnswers = 0;
      this.get('_items').forEach(function (item, index) {
        var isCorrect = item._selected && item._selected._isCorrect;

        if (!isCorrect) {
          item._isCorrect = false;
          return;
        }

        numberOfCorrectAnswers++;
        item._isCorrect = true;
        this.set({
          _numberOfCorrectAnswers: numberOfCorrectAnswers,
          _isAtLeastOneCorrectSelection: true
        });
      }, this);
      this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);

      if (numberOfCorrectAnswers === this.get('_items').length) {
        return true;
      }

      return false;
    },
    setScore: function () {
      var questionWeight = this.get('_questionWeight');

      if (this.get('_isCorrect')) {
        this.set('_score', questionWeight);
        return;
      }

      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    resetUserAnswer: function () {
      this.set('_userAnswer', []);
    },
    getInteractionObject: function () {
      var interactions = {
        correctResponsesPattern: null,
        source: null,
        target: null
      };
      var items = this.get('_items');
      interactions.correctResponsesPattern = [items.map(function (item, questionIndex) {
        questionIndex = questionIndex + 1;
        return [questionIndex, item._options.filter(function (item) {
          return item._isCorrect;
        }).map(function (item) {
          return questionIndex + '_' + (item._index + 1).toString();
        })].join('[.]');
      }).join('[,]')];
      interactions.source = _.flatten(items.map(function (item) {
        return {
          id: (item._index + 1).toString(),
          description: item.text
        };
      }));
      interactions.target = _.flatten(items.map(function (item, index) {
        index = index + 1;
        return item._options.map(function (option) {
          return {
            id: index + '_' + (option._index + 1),
            description: option.text
          };
        });
      }));
      return interactions;
    },
    getResponse: function () {
      var responses = [];
      this.get('_userAnswer').forEach(function (userAnswer, index) {
        responses.push(index + 1 + '.' + (userAnswer + 1));
      });
      return responses.join('#');
    },
    getResponseType: function () {
      return 'matching';
    }
  });
  var MatchingModel$1 = __AMD("components/adapt-contrib-matching/js/matchingModel", MatchingModel);

  __AMD("components/adapt-contrib-matching/js/adapt-contrib-matching", Adapt.register('matching', {
    view: MatchingView$1,
    model: MatchingModel$1
  }));

  var mepPrototype = $.extend({}, mejs.MediaElementPlayer.prototype);
  $.extend(mejs.MediaElementPlayer.prototype, {
    detectFullscreenMode: function () {
      var vendorPrefix = this.getVendorPrefix();
      var fsEventName = 'on' + vendorPrefix + 'fullscreenchange';

      if (document[fsEventName] === null) {
        document[fsEventName] = function fullScreenEventHandler() {
          var elementName = vendorPrefix === '' ? 'fullscreenElement' : vendorPrefix + 'FullscreenElement';

          if (document[elementName] !== null) {
            $.inview.lock('mediaelement');
            Adapt.trigger('media:fullscreen:enter');
          } else {
            $.inview.unlock('mediaelement');
            Adapt.trigger('media:fullscreen:exit');
          }
        };
      }

      return mepPrototype.detectFullscreenMode.apply(this, arguments);
    },
    getVendorPrefix: function () {
      var browser = Adapt.device.browser;

      if (browser === 'internet explorer') {
        return 'ms';
      }

      if (browser === 'microsoft edge' || browser === 'safari') {
        return 'webkit';
      }

      return '';
    }
  });

  var froogaloopAdded = false;

  function purge(d) {
    var a = d.attributes;

    if (a) {
      for (var i = a.length - 1; i >= 0; i -= 1) {
        var n = a[i].name;

        if (typeof d[n] === 'function') {
          d[n] = null;
        }
      }
    }

    a = d.childNodes;

    if (a) {
      for (var _i = 0, count = a.length; _i < count; _i += 1) {
        purge(d.childNodes[_i]);
      }
    }
  }

  _.extend(window.mejs.MepDefaults, {
    keyActions: [],
    defaultSeekForwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    },
    defaultSeekBackwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    }
  });

  var MediaView = ComponentView$1.extend({
    events: {
      'click .js-media-inline-transcript-toggle': 'onToggleInlineTranscript',
      'click .js-media-external-transcript-click': 'onExternalTranscriptClicked',
      'click .js-skip-to-transcript': 'onSkipToTranscript'
    },
    className: function () {
      var classes = ComponentView$1.prototype.className.call(this);
      var playerOptions = this.model.get('_playerOptions');

      if (playerOptions && playerOptions.toggleCaptionsButtonWhenOnlyOne) {
        classes += ' toggle-captions';
      }

      return classes;
    },
    preRender: function () {
      this.listenTo(Adapt, {
        'device:resize': this.onScreenSizeChanged,
        'device:changed': this.onDeviceChanged,
        'media:stop': this.onMediaStop
      });

      _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking');

      this.model.set({
        '_isMediaEnded': false,
        '_isMediaPlaying': false
      });

      if (this.model.get('_media').source) {
        var media = this.model.get('_media');

        if (window.location.protocol === 'https:' && media.source.indexOf('http:') === 0) {
          media.source = media.source.replace(/^http:/, 'https:');
        }

        this.model.set('_media', media);
      }

      this.checkIfResetOnRevisit();
    },
    postRender: function () {
      this.setupPlayer();
      this.addMejsButtonClass();
    },
    addMejsButtonClass: function () {
      this.$('.mejs-overlay-button').addClass('icon');
    },
    setupPlayer: function () {
      if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});
      var modelOptions = this.model.get('_playerOptions');

      if (modelOptions.pluginPath === undefined) {
        _.extend(modelOptions, {
          pluginPath: 'https://cdnjs.cloudflare.com/ajax/libs/mediaelement/2.21.2/',
          flashName: 'flashmediaelement-cdn.swf',
          flashScriptAccess: 'always'
        });
      }

      if (modelOptions.features === undefined) {
        modelOptions.features = ['playpause', 'progress', 'current', 'duration'];

        if (this.model.get('_useClosedCaptions')) {
          modelOptions.features.unshift('tracks');
        }

        if (this.model.get('_allowFullScreen')) {
          modelOptions.features.push('fullscreen');
        }

        if (this.model.get('_showVolumeControl')) {
          modelOptions.features.push('volume');
        }
      }

      modelOptions.success = _.debounce(this.onPlayerReady.bind(this), 100);

      if (this.model.get('_useClosedCaptions')) {
        var startLanguage = this.model.get('_startLanguage') || 'en';

        if (!Adapt.offlineStorage.get('captions')) {
          Adapt.offlineStorage.set('captions', startLanguage);
        }

        modelOptions.startLanguage = this.checkForSupportedCCLanguage(Adapt.offlineStorage.get('captions'));
      }

      if (modelOptions.alwaysShowControls === undefined) {
        modelOptions.alwaysShowControls = false;
      }

      if (modelOptions.hideVideoControlsOnLoad === undefined) {
        modelOptions.hideVideoControlsOnLoad = true;
      }

      this.addMediaTypeClass();
      this.addThirdPartyFixes(modelOptions, function createPlayer() {
        this.$('audio, video').mediaelementplayer(modelOptions);
        this.cleanUpPlayer();

        var _media = this.model.get('_media');

        if (!_media.mp3 && !_media.mp4 && !_media.ogv && !_media.webm && !_media.source) {
          Adapt.log.warn('ERROR! No media is selected in components.json for component ' + this.model.get('_id'));
          this.setReadyStatus();
          return;
        }

        if (_media.source) {
          this.$('.media__widget').addClass('external-source');
        }
      }.bind(this));
    },
    addMediaTypeClass: function () {
      var media = this.model.get('_media');

      if (media && media.type) {
        var typeClass = media.type.replace(/\//, '-');
        this.$('.media__widget').addClass(typeClass);
      }
    },
    addThirdPartyFixes: function (modelOptions, callback) {
      var media = this.model.get('_media');
      if (!media) return callback();

      switch (media.type) {
        case 'video/vimeo':
          modelOptions.alwaysShowControls = false;
          modelOptions.hideVideoControlsOnLoad = true;
          modelOptions.features = [];
          if (froogaloopAdded) return callback();
          $.getScript('assets/froogaloop.js').done(function () {
            froogaloopAdded = true;
            callback();
          }).fail(function () {
            froogaloopAdded = false;
            console.log('Could not load froogaloop.js');
          });
          break;

        default:
          callback();
      }
    },
    cleanUpPlayer: function () {
      this.$('.media__widget').children('.mejs-offscreen').remove();
      this.$('[role=application]').removeAttr('role tabindex');
      this.$('[aria-controls]').removeAttr('aria-controls');
    },
    setupEventListeners: function () {
      this.completionEvent = this.model.get('_setCompletionOn') || 'play';

      if (this.completionEvent === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }

      if (this.model.get('_preventForwardScrubbing') && !this.model.get('_isComplete')) {
        $(this.mediaElement).on({
          'seeking': this.onMediaElementSeeking,
          'timeupdate': this.onMediaElementTimeUpdate
        });
      }

      $(this.mediaElement).on({
        'play': this.onMediaElementPlay,
        'pause': this.onMediaElementPause,
        'ended': this.onMediaElementEnded
      });

      _.delay(this.listenForCaptionsChange.bind(this), 250);
    },
    listenForCaptionsChange: function () {
      if (!this.model.get('_useClosedCaptions')) return;
      var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
      this.$(selector).on('click.mediaCaptionsChange', _.debounce(function () {
        var srclang = this.mediaElement.player.selectedTrack ? this.mediaElement.player.selectedTrack.srclang : 'none';
        Adapt.offlineStorage.set('captions', srclang);
        Adapt.trigger('media:captionsChange', this, srclang);
      }.bind(this), 250));
      this.listenTo(Adapt, 'media:captionsChange', this.onCaptionsChanged);
    },
    onCaptionsChanged: function (view, lang) {
      if (view && view.cid === this.cid) return;
      lang = this.checkForSupportedCCLanguage(lang);
      this.mediaElement.player.setTrack(lang);
      var $inputs = this.$('.mejs-captions-selector input');
      $inputs.filter(':checked').prop('checked', false);
      $inputs.filter('[value="' + lang + '"]').prop('checked', true);
    },
    checkForSupportedCCLanguage: function (lang) {
      if (!lang || lang === 'none') return 'none';
      if (_.findWhere(this.model.get('_media').cc, {
        srclang: lang
      })) return lang;
      return this.model.get('_startLanguage') || 'none';
    },
    onMediaElementPlay: function (event) {
      this.queueGlobalEvent('play');
      Adapt.trigger('media:stop', this);
      if (this.model.get('_pauseWhenOffScreen')) $(this.mediaElement).on('inview', this.onMediaElementInview);
      this.model.set({
        '_isMediaPlaying': true,
        '_isMediaEnded': false
      });

      if (this.completionEvent === 'play') {
        this.setCompletionStatus();
      }
    },
    onMediaElementPause: function (event) {
      this.queueGlobalEvent('pause');
      $(this.mediaElement).off('inview', this.onMediaElementInview);
      this.model.set('_isMediaPlaying', false);
    },
    onMediaElementEnded: function (event) {
      this.queueGlobalEvent('ended');
      this.model.set('_isMediaEnded', true);

      if (this.completionEvent === 'ended') {
        this.setCompletionStatus();
      }
    },
    onMediaElementInview: function (event, isInView) {
      if (!isInView && !event.currentTarget.paused) event.currentTarget.pause();
    },
    onMediaElementSeeking: function (event) {
      var maxViewed = this.model.get('_maxViewed');

      if (!maxViewed) {
        maxViewed = 0;
      }

      if (event.target.currentTime > maxViewed) {
        event.target.currentTime = maxViewed;
      }
    },
    onMediaElementTimeUpdate: function (event) {
      var maxViewed = this.model.get('_maxViewed');

      if (!maxViewed) {
        maxViewed = 0;
      }

      if (event.target.currentTime > maxViewed) {
        this.model.set('_maxViewed', event.target.currentTime);
      }
    },
    setupPlayPauseToggle: function () {
      var player = this.mediaElement.player;

      if (!player) {
        console.log("Media.setupPlayPauseToggle: OOPS! there's no player reference.");
        return;
      }

      player.options.clickToPlayPause = false;
      this.onOverlayClick = this.onOverlayClick.bind(this);
      this.onMediaElementClick = this.onMediaElementClick.bind(this);
      this.$('.mejs-overlay-button').on('click', this.onOverlayClick);
      this.$('.mejs-mediaelement').on('click', this.onMediaElementClick);
    },
    onMediaStop: function (view) {
      if (view && view.cid === this.cid) return;
      if (!this.mediaElement || !this.mediaElement.player) return;
      this.mediaElement.player.pause();
    },
    onOverlayClick: function () {
      var player = this.mediaElement.player;
      if (!player) return;
      player.play();
    },
    onMediaElementClick: function (event) {
      var player = this.mediaElement.player;
      if (!player) return;
      var isPaused = player.media.paused;
      if (!isPaused) player.pause();
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');

      if (isResetOnRevisit) {
        this.model.reset(isResetOnRevisit);
      }
    },
    remove: function () {
      this.$('.mejs-overlay-button').off('click', this.onOverlayClick);
      this.$('.mejs-mediaelement').off('click', this.onMediaElementClick);

      if (this.model.get('_useClosedCaptions')) {
        var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
        this.$(selector).off('click.mediaCaptionsChange');
      }

      var modelOptions = this.model.get('_playerOptions');
      delete modelOptions.success;
      var media = this.model.get('_media');

      if (media) {
        switch (media.type) {
          case 'video/vimeo':
            this.$('iframe')[0].isRemoved = true;
        }
      }

      if (this.mediaElement && this.mediaElement.player) {
        var playerId = this.mediaElement.player.id;
        purge(this.$el[0]);
        this.mediaElement.player.remove();

        if (window.mejs.players[playerId]) {
          delete window.mejs.players[playerId];
        }
      }

      if (this.mediaElement) {
        $(this.mediaElement).off({
          'play': this.onMediaElementPlay,
          'pause': this.onMediaElementPause,
          'ended': this.onMediaElementEnded,
          'seeking': this.onMediaElementSeeking,
          'timeupdate': this.onMediaElementTimeUpdate,
          'inview': this.onMediaElementInview
        });
        this.mediaElement.src = '';
        $(this.mediaElement.pluginElement).remove();
        delete this.mediaElement;
      }

      ComponentView$1.prototype.remove.call(this);
    },
    onDeviceChanged: function () {
      if (this.model.get('_media').source) {
        this.$('.mejs-container').width(this.$('.component__widget').width());
      }
    },
    onPlayerReady: function (mediaElement, domObject) {
      this.mediaElement = mediaElement;
      var player = this.mediaElement.player;
      if (!player) player = window.mejs.players[this.$('.mejs-container').attr('id')];
      var hasTouch = window.mejs.MediaFeatures.hasTouch;

      if (hasTouch) {
        this.setupPlayPauseToggle();
      }

      this.addThirdPartyAfterFixes();
      this.cleanUpPlayerAfter();

      if (player && this.model.has('_startVolume')) {
        player.setVolume(parseInt(this.model.get('_startVolume')) / 100);
      }

      this.setReadyStatus();
      this.setupEventListeners();
    },
    addThirdPartyAfterFixes: function () {
      var media = this.model.get('_media');

      switch (media.type) {
        case 'video/vimeo':
          this.$('.mejs-container').attr('tabindex', 0);
      }
    },
    cleanUpPlayerAfter: function () {
      this.$("[aria-valuemax='NaN']").attr('aria-valuemax', 0);
    },
    onScreenSizeChanged: function () {
      this.$('audio, video').width(this.$('.component__widget').width());
    },
    onSkipToTranscript: function () {
      _.delay(function () {
        this.$('.media__transcript-btn').a11y_focus();
      }.bind(this), 250);
    },
    onToggleInlineTranscript: function (event) {
      if (event) event.preventDefault();
      var $transcriptBodyContainer = this.$('.media__transcript-body-inline');
      var $button = this.$('.media__transcript-btn-inline');
      var $buttonText = this.$('.media__transcript-btn-inline .media__transcript-btn-text');

      if ($transcriptBodyContainer.hasClass('inline-transcript-open')) {
        $transcriptBodyContainer.stop(true, true).slideUp(function () {
          $(window).resize();
        });
        $button.attr('aria-expanded', false);
        $transcriptBodyContainer.removeClass('inline-transcript-open');
        $buttonText.html(this.model.get('_transcript').inlineTranscriptButton);
      } else {
        $transcriptBodyContainer.stop(true, true).slideDown(function () {
          $(window).resize();
        });
        $button.attr('aria-expanded', true);
        $transcriptBodyContainer.addClass('inline-transcript-open');
        $buttonText.html(this.model.get('_transcript').inlineTranscriptCloseButton);

        if (this.model.get('_transcript')._setCompletionOnView !== false) {
          this.setCompletionStatus();
        }
      }
    },
    onExternalTranscriptClicked: function (event) {
      if (this.model.get('_transcript')._setCompletionOnView !== false) {
        this.setCompletionStatus();
      }
    },
    queueGlobalEvent: function (eventType) {
      var t = Date.now();
      var lastEvent = this.lastEvent || {
        time: 0
      };
      var timeSinceLastEvent = t - lastEvent.time;
      var debounceTime = 500;
      this.lastEvent = {
        time: t,
        type: eventType
      };
      clearTimeout(this.eventTimeout);

      if (eventType === 'ended') {
        return this.triggerGlobalEvent(eventType);
      }

      if (timeSinceLastEvent > debounceTime) {
        this.eventTimeout = setTimeout(this.triggerGlobalEvent.bind(this, eventType), debounceTime);
      }
    },
    triggerGlobalEvent: function (eventType) {
      var player = this.mediaElement.player;
      var eventObj = {
        type: eventType,
        src: this.mediaElement.src,
        platform: this.mediaElement.pluginType
      };
      if (player) eventObj.isVideo = player.isVideo;
      Adapt.trigger('media', eventObj);
    }
  });
  __AMD("components/adapt-contrib-media/js/adapt-contrib-media", Adapt.register('media', {
    model: ComponentModel$1.extend({}),
    view: MediaView
  }));

  var MODE = __AMD("components/adapt-contrib-narrative/js/modeEnum", new ENUM(['SMALL', 'LARGE']));

  var NarrativeView = function (_ComponentView) {
    _inherits(NarrativeView, _ComponentView);

    var _super = _createSuper(NarrativeView);

    function NarrativeView() {
      _classCallCheck(this, NarrativeView);

      return _super.apply(this, arguments);
    }

    _createClass(NarrativeView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-narrative-strapline-open-popup': 'openPopup',
          'click .js-narrative-controls-click': 'onNavigationClicked',
          'click .js-narrative-progress-click': 'onProgressClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NarrativeView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this._isInitial = true;
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt, {
          'device:changed device:resize': this.reRender,
          'notify:closed': this.closeNotify
        });
        this.renderMode();
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.checkIfResetOnRevisit();
        this.calculateWidths();
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (!_isActive) return;
        this.setStage(item);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, _isVisited) {
        if (!_isVisited) return;
        this.$("[data-index=\"".concat(item.get('_index'), "\"]")).addClass('is-visited');
      }
    }, {
      key: "calculateMode",
      value: function calculateMode() {
        var mode = Adapt.device.screenSize === 'large' ? MODE.LARGE : MODE.SMALL;
        this.model.set('_mode', mode);
      }
    }, {
      key: "renderMode",
      value: function renderMode() {
        this.calculateMode();
        var isLargeMode = this.isLargeMode();
        this.$el.toggleClass('mode-large', isLargeMode).toggleClass('mode-small', !isLargeMode);
      }
    }, {
      key: "isLargeMode",
      value: function isLargeMode() {
        return this.model.get('_mode') === MODE.LARGE;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.renderMode();
        this.setupNarrative();
        this.$('.narrative__slider').imageready(this.setReadyStatus.bind(this));

        if (Adapt.config.get('_disableAnimation')) {
          this.$el.addClass('disable-animation');
        }
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "setupNarrative",
      value: function setupNarrative() {
        this.renderMode();
        var items = this.model.getChildren();
        if (!items || !items.length) return;
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          activeItem = this.model.getItem(0);
          activeItem.toggleActive(true);
        } else {
          items.trigger('change:_isActive', activeItem, true);
        }

        this.calculateWidths();

        if (!this.isLargeMode() && !this.model.get('_wasHotgraphic')) {
          this.replaceInstructions();
        }

        this.setupEventListeners();
        this._isInitial = false;
      }
    }, {
      key: "calculateWidths",
      value: function calculateWidths() {
        var itemCount = this.model.getChildren().length;
        this.model.set({
          _totalWidth: 100 * itemCount,
          _itemWidth: 100 / itemCount
        });
      }
    }, {
      key: "resizeControl",
      value: function resizeControl() {
        var previousMode = this.model.get('_mode');
        this.renderMode();
        if (previousMode !== this.model.get('_mode')) this.replaceInstructions();
        this.evaluateNavigation();
        var activeItem = this.model.getActiveItem();
        if (activeItem) this.setStage(activeItem);
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (this.model.get('_wasHotgraphic') && this.isLargeMode()) {
          this.replaceWithHotgraphic();
          return;
        }

        this.resizeControl();
      }
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        this.evaluateCompletion();
      }
    }, {
      key: "replaceInstructions",
      value: function replaceInstructions() {
        if (this.isLargeMode()) {
          this.$('.narrative__instruction-inner').html(this.model.get('instruction'));
          return;
        }

        if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {
          this.$('.narrative__instruction-inner').html(this.model.get('mobileInstruction'));
        }
      }
    }, {
      key: "replaceWithHotgraphic",
      value: function replaceWithHotgraphic() {
        var HotgraphicView = Adapt.getViewClass('hotgraphic');
        if (!HotgraphicView) return;
        var model = this.prepareHotgraphicModel();
        var newHotgraphic = new HotgraphicView({
          model: model
        });
        this.$el.parents('.component__container').append(newHotgraphic.$el);
        this.remove();

        _.defer(function () {
          Adapt.trigger('device:resize');
        });
      }
    }, {
      key: "prepareHotgraphicModel",
      value: function prepareHotgraphicModel() {
        var model = this.model;
        model.resetActiveItems();
        model.set({
          _isPopupOpen: false,
          _component: 'hotgraphic',
          body: model.get('originalBody'),
          instruction: model.get('originalInstruction')
        });
        return model;
      }
    }, {
      key: "moveSliderToIndex",
      value: function moveSliderToIndex(itemIndex) {
        var _this = this;

        var offset = this.model.get('_itemWidth') * itemIndex;

        if (Adapt.config.get('_defaultDirection') === 'ltr') {
          offset *= -1;
        }

        var cssValue = "translateX(".concat(offset, "%)");
        var $sliderElm = this.$('.narrative__slider');
        var $straplineHeaderElm = this.$('.narrative__strapline-header-inner');
        $sliderElm.css('transform', cssValue);
        $straplineHeaderElm.css('transform', cssValue);
        if (this._isInitial) return;
        var hasStraplineTransition = !this.isLargeMode() && $straplineHeaderElm.css('transitionDuration') !== '0s';

        if (hasStraplineTransition) {
          $straplineHeaderElm.one('transitionend', function () {
            _this.focusOnNarrativeElement(itemIndex);
          });
          return;
        }

        this.focusOnNarrativeElement(itemIndex);
      }
    }, {
      key: "focusOnNarrativeElement",
      value: function focusOnNarrativeElement(itemIndex) {
        var dataIndexAttr = "[data-index='".concat(itemIndex, "']");
        var $elementToFocus = this.isLargeMode() ? this.$(".narrative__content-item".concat(dataIndexAttr)) : this.$(".narrative__strapline-btn".concat(dataIndexAttr));
        Adapt.a11y.focusFirst($elementToFocus);
      }
    }, {
      key: "setStage",
      value: function setStage(item) {
        var index = item.get('_index');
        var indexSelector = "[data-index=\"".concat(index, "\"]");

        if (this.isLargeMode()) {
          item.toggleVisited(true);
        }

        this.$('.narrative__progress').removeClass('is-selected').filter(indexSelector).addClass('is-selected');
        var $slideGraphics = this.$('.narrative__slider-image-container');
        Adapt.a11y.toggleAccessibleEnabled($slideGraphics.children('.controls'), false);
        Adapt.a11y.toggleAccessibleEnabled($slideGraphics.filter(indexSelector).children('.controls'), true);
        var $narrativeItems = this.$('.narrative__content-item');
        $narrativeItems.addClass('u-visibility-hidden u-display-none');
        Adapt.a11y.toggleAccessible($narrativeItems, false);
        Adapt.a11y.toggleAccessible($narrativeItems.filter(indexSelector).removeClass('u-visibility-hidden u-display-none'), true);
        var $narrativeStraplineButtons = this.$('.narrative__strapline-btn');
        Adapt.a11y.toggleAccessibleEnabled($narrativeStraplineButtons, false);
        Adapt.a11y.toggleAccessibleEnabled($narrativeStraplineButtons.filter(indexSelector), true);
        this.evaluateNavigation();
        this.evaluateCompletion();
        this.moveSliderToIndex(index);
      }
    }, {
      key: "evaluateNavigation",
      value: function evaluateNavigation() {
        var active = this.model.getActiveItem();
        if (!active) return;
        var index = active.get('_index');
        var itemCount = this.model.getChildren().length;
        var isAtStart = index === 0;
        var isAtEnd = index === itemCount - 1;
        var $left = this.$('.narrative__controls-left');
        var $right = this.$('.narrative__controls-right');
        var globals = Adapt.course.get('_globals');
        var ariaLabelsGlobals = globals._accessibility._ariaLabels;
        var narrativeGlobals = globals._components._narrative;
        var ariaLabelPrevious = narrativeGlobals.previous || ariaLabelsGlobals.previous;
        var ariaLabelNext = narrativeGlobals.next || ariaLabelsGlobals.next;
        var prevTitle = isAtStart ? '' : this.model.getItem(index - 1).get('title');
        var nextTitle = isAtEnd ? '' : this.model.getItem(index + 1).get('title');
        $left.toggleClass('u-visibility-hidden', isAtStart);
        $right.toggleClass('u-visibility-hidden', isAtEnd);
        $left.attr('aria-label', Handlebars.compile(ariaLabelPrevious)({
          title: prevTitle,
          _globals: globals,
          itemNumber: isAtStart ? null : index,
          totalItems: itemCount
        }));
        $right.attr('aria-label', Handlebars.compile(ariaLabelNext)({
          title: nextTitle,
          _globals: globals,
          itemNumber: isAtEnd ? null : index + 2,
          totalItems: itemCount
        }));
      }
    }, {
      key: "evaluateCompletion",
      value: function evaluateCompletion() {
        if (this.model.areAllItemsCompleted()) {
          this.trigger('allItems');
        }
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        var currentItem = this.model.getActiveItem();
        Adapt.notify.popup({
          title: currentItem.get('title'),
          body: currentItem.get('body')
        });
        Adapt.on('popup:opened', function () {
          currentItem.toggleVisited(true);
        });
      }
    }, {
      key: "onNavigationClicked",
      value: function onNavigationClicked(event) {
        var $btn = $(event.currentTarget);
        var index = this.model.getActiveItem().get('_index');
        $btn.data('direction') === 'right' ? index++ : index--;
        this.model.setActiveItem(index);
      }
    }, {
      key: "onProgressClicked",
      value: function onProgressClicked(event) {
        var index = $(event.target).data('index');
        this.model.setActiveItem(index);
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }
      }
    }]);

    return NarrativeView;
  }(ComponentView$1);

  NarrativeView.template = 'narrative';
  var NarrativeView$1 = __AMD("components/adapt-contrib-narrative/js/narrativeView", NarrativeView);

  __AMD("components/adapt-contrib-narrative/js/adapt-contrib-narrative", Adapt.register('narrative', {
    model: ItemsComponentModel.extend({}),
    view: NarrativeView$1
  }));

  var SliderView = function (_QuestionView) {
    _inherits(SliderView, _QuestionView);

    var _super = _createSuper(SliderView);

    function SliderView() {
      _classCallCheck(this, SliderView);

      return _super.apply(this, arguments);
    }

    _createClass(SliderView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-slider-number-click': 'onNumberSelected',
          'focus .js-slider-item-input': 'onHandleFocus',
          'blur .js-slider-item-input': 'onHandleBlur'
        };
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit() {
        this.setAllItemsEnabled();
        this.model.deselectAllItems();
        this.resetQuestion();
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        if (this.model.get('_isSubmitted')) return;
        this.selectItem(this.getIndexFromValue(this.model.get('_selectedItem').value));
      }
    }, {
      key: "setupRangeslider",
      value: function setupRangeslider() {
        this.$sliderScaleMarker = this.$('.js-slider-number-selection');
        this.$slider = this.$('.js-slider-item-input');

        if (this.model.has('_scaleStep')) {
          this.$slider.attr({
            'step': this.model.get('_scaleStep')
          });
        }

        this.$slider.rangeslider({
          polyfill: false,
          onSlide: this.handleSlide.bind(this)
        });
        this.oldValue = 0;

        if (this._deferEnable) {
          this.setAllItemsEnabled();
        }
      }
    }, {
      key: "handleSlide",
      value: function handleSlide(position, value) {
        if (this.oldValue === value) {
          return;
        }

        var itemIndex = this.getIndexFromValue(value);
        var pixels = this.mapIndexToPixels(itemIndex);
        this.selectItem(itemIndex);
        this.animateToPosition(pixels);
        this.oldValue = value;
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled();
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled();
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled() {
        var isEnabled = this.model.get('_isEnabled');

        if (!this.$slider) {
          this._deferEnable = true;
          return;
        }

        this.$('.slider__widget').toggleClass('is-disabled', !isEnabled);
        this.$slider.prop('disabled', !isEnabled).rangeslider('update', true);
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setupRangeslider();
        this.setScalePositions();
        this.onScreenSizeChanged();
        this.showScaleMarker(true);
        this.listenTo(Adapt, 'device:resize', this.onScreenSizeChanged);
        this.setReadyStatus();
      }
    }, {
      key: "animateToPosition",
      value: function animateToPosition(newPosition) {
        if (!this.$sliderScaleMarker) return;
        this.$sliderScaleMarker.velocity('stop').velocity({
          left: newPosition
        }, {
          duration: 200,
          easing: 'linear',
          mobileHA: false
        });
      }
    }, {
      key: "getIndexFromValue",
      value: function getIndexFromValue(itemValue) {
        var scaleStart = this.model.get('_scaleStart');
        var scaleEnd = this.model.get('_scaleEnd');
        return Math.round(this.mapValue(itemValue, scaleStart, scaleEnd, 0, this.model.get('_items').length - 1));
      }
    }, {
      key: "mapIndexToPixels",
      value: function mapIndexToPixels(value, $widthObject) {
        var numberOfItems = this.model.get('_items').length;
        var width = $widthObject ? $widthObject.width() : this.$('.js-slider-scale').width();
        return Math.round(this.mapValue(value, 0, numberOfItems - 1, 0, width));
      }
    }, {
      key: "mapPixelsToIndex",
      value: function mapPixelsToIndex(value) {
        var numberOfItems = this.model.get('_items').length;
        var width = this.$('.slider-sliderange').width();
        return Math.round(this.mapValue(value, 0, width, 0, numberOfItems - 1));
      }
    }, {
      key: "normalise",
      value: function normalise(value, low, high) {
        var range = high - low;
        return (value - low) / range;
      }
    }, {
      key: "mapValue",
      value: function mapValue(value, inputLow, inputHigh, outputLow, outputHigh) {
        var normal = this.normalise(value, inputLow, inputHigh);
        return normal * (outputHigh - outputLow) + outputLow;
      }
    }, {
      key: "onHandleFocus",
      value: function onHandleFocus(event) {
        event.preventDefault();
        this.$slider.on('keydown', this.onKeyDown.bind(this));
      }
    }, {
      key: "onHandleBlur",
      value: function onHandleBlur(event) {
        event.preventDefault();
        this.$slider.off('keydown');
      }
    }, {
      key: "onKeyDown",
      value: function onKeyDown(event) {
        if (event.which === 9) return;
        event.preventDefault();
        var newItemIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);

        switch (event.which) {
          case 40:
          case 37:
            newItemIndex = Math.max(newItemIndex - 1, 0);
            break;

          case 38:
          case 39:
            newItemIndex = Math.min(newItemIndex + 1, this.model.get('_items').length - 1);
            break;
        }

        this.selectItem(newItemIndex);
        if (typeof newItemIndex === 'number') this.showScaleMarker(true);
        this.animateToPosition(this.mapIndexToPixels(newItemIndex));
        this.setSliderValue(this.getValueFromIndex(newItemIndex));
      }
    }, {
      key: "onNumberSelected",
      value: function onNumberSelected(event) {
        event.preventDefault();

        if (this.model.get('_isInteractionComplete')) {
          return;
        }

        if (this.$slider.prop('disabled')) {
          return;
        }

        var itemValue = parseFloat($(event.currentTarget).attr('data-id'));
        var index = this.getIndexFromValue(itemValue);
        this.selectItem(index);
        this.animateToPosition(this.mapIndexToPixels(index));
        this.setSliderValue(itemValue);
      }
    }, {
      key: "getValueFromIndex",
      value: function getValueFromIndex(index) {
        return this.model.get('_items')[index].value;
      }
    }, {
      key: "resetControlStyles",
      value: function resetControlStyles() {
        this.$('.slider-handle').empty();
        this.showScaleMarker(false);
        this.$('.slider-bar').animate({
          width: '0'
        });
        this.setSliderValue(this.model.get('_items')[0].value);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "setSliderValue",
      value: function setSliderValue(value) {
        if (!this.$slider) return;
        this.$slider.val(value).change();
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.get('_canShowMarking')) return;
        this.$('.slider__widget').removeClass('is-correct is-incorrect').addClass(this.model.get('_selectedItem').correct ? 'is-correct' : 'is-incorrect');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.selectItem(0);
        this.animateToPosition(0);
        this.resetControlStyles();
        this.showScaleMarker(true);
      }
    }, {
      key: "setScalePositions",
      value: function setScalePositions() {
        var _this = this;

        var numberOfItems = this.model.get('_items').length;
        this.model.get('_items').forEach(function (item, index) {
          var normalisedPosition = _this.normalise(index, 0, numberOfItems - 1);

          _this.$('.js-slider-number').eq(index).data('normalisedPosition', normalisedPosition);
        });
      }
    }, {
      key: "showScale",
      value: function showScale() {
        var $markers = this.$('.js-slider-scale-notch-container').empty();

        if (this.model.get('_showScale') === false) {
          $markers.eq(0).addClass('u-display-none');
          this.$('.js-slider-number').addClass(this.model.get('_showScaleIndicator') ? 'u-visibility-hidden' : 'u-display-none');
          return;
        }

        var $scaler = this.$('.js-slider-scale');

        for (var i = 1, count = this.model.get('_items').length - 1; i < count; i++) {
          $markers.append("<div class=\"slider__scale-notch\" style=\"left: ".concat(this.mapIndexToPixels(i, $scaler), "px\">"));
        }

        this.showScaleNumbers();
      }
    }, {
      key: "showScaleNumbers",
      value: function showScaleNumbers() {
        var $scaler = this.$('.js-slider-scale');
        var $numbers = this.$('.js-slider-number');

        if (this.model.get('_showScaleNumbers') === false) {
          $numbers.addClass('u-display-none');
          return;
        }

        var scaleWidth = $scaler.width();
        this.model.get('_items').forEach(function (item, index) {
          var $number = $numbers.eq(index);
          var newLeft = Math.round($number.data('normalisedPosition') * scaleWidth);
          $number.css({
            left: newLeft
          });
        });
      }
    }, {
      key: "showLabels",
      value: function showLabels() {
        if (this.model.get('labelStart') || this.model.get('labelEnd')) return;
        this.$('.js-slider-label-container').eq(0).addClass('u-display-none');
      }
    }, {
      key: "remapSliderBar",
      value: function remapSliderBar() {
        var $scaler = this.$('.js-slider-scale');
        var currentIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);
        var left = this.mapIndexToPixels(currentIndex, $scaler);
        this.$('.slider-handle').css({
          left: "".concat(left, "px")
        });
        this.$('.js-slider-number-selection').css({
          left: "".concat(left, "px")
        });
        this.$('.slider-bar').width(left);
      }
    }, {
      key: "onScreenSizeChanged",
      value: function onScreenSizeChanged() {
        this.showScale();
        this.showLabels();
        this.remapSliderBar();

        if (this.$('.slider__widget').hasClass('show-user-answer')) {
          this.hideCorrectAnswer();
        } else if (this.$('.slider__widget').hasClass('show-correct-answer')) {
          this.showCorrectAnswer();
        }
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.showScaleMarker(false);
        var answers = this.model.getCorrectAnswers();

        if (answers.length === 0) {
          console.log('adapt-contrib-slider::WARNING: no correct answer or correct range set in JSON');
          return;
        }

        var middleAnswer = answers[Math.floor(answers.length / 2)];
        this.animateToPosition(this.mapIndexToPixels(this.getIndexFromValue(middleAnswer)));
        this.showModelAnswers(answers);
        this.setSliderValue(middleAnswer);
      }
    }, {
      key: "showModelAnswers",
      value: function showModelAnswers(correctAnswerArray) {
        var _this2 = this;

        var $parentDiv = this.$('.js-slider-model-range');
        correctAnswerArray.forEach(function (correctAnswer, index) {
          $parentDiv.append($('<div class="slider__number-model-answer">'));

          var $element = _this2.$('.js-slider-model-range .slider__number-model-answer').eq(index);

          var startingLeft = _this2.mapIndexToPixels(_this2.getIndexFromValue(_this2.model.get('_selectedItem').value));

          if (_this2.model.get('_showNumber')) $element.html(correctAnswer);
          $element.css({
            left: startingLeft
          }).fadeIn(0, function () {
            $element.animate({
              left: _this2.mapIndexToPixels(_this2.getIndexFromValue(correctAnswer))
            });
          });
        });
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var userAnswerIndex = this.getIndexFromValue(this.model.get('_userAnswer'));
        this.$('.js-slider-model-range').empty();
        this.showScaleMarker(true);
        this.selectItem(userAnswerIndex);
        this.animateToPosition(this.mapIndexToPixels(userAnswerIndex));
        this.setSliderValue(this.model.get('_userAnswer'));
      }
    }, {
      key: "selectItem",
      value: function selectItem(itemIndex) {
        this.model.deselectAllItems();
        var item = this.model.get('_items')[itemIndex];
        if (!item) return;
        item.selected = true;
        this.model.set('_selectedItem', item);
        this.$('.js-slider-item-input').attr({
          'value': item.value,
          'aria-valuenow': item.value
        });
        this.showNumber(true);
      }
    }, {
      key: "showScaleMarker",
      value: function showScaleMarker(show) {
        var $scaleMarker = this.$('.js-slider-number-selection');

        if (this.model.get('_showScaleIndicator')) {
          this.showNumber(show);
          $scaleMarker.toggleClass('display-block', show);
        }
      }
    }, {
      key: "showNumber",
      value: function showNumber(show) {
        var $scaleMarker = this.$('.js-slider-number-selection');

        if (this.model.get('_showNumber')) {
          if (show) {
            $scaleMarker.html(this.model.get('_selectedItem').value);
          } else {
            $scaleMarker.html = '';
          }
        }
      }
    }]);

    return SliderView;
  }(QuestionView$1);

  var SliderView$1 = __AMD("components/adapt-contrib-slider/js/sliderView", SliderView);

  var SliderModel = function (_QuestionModel) {
    _inherits(SliderModel, _QuestionModel);

    var _super = _createSuper(SliderModel);

    function SliderModel() {
      _classCallCheck(this, SliderModel);

      return _super.apply(this, arguments);
    }

    _createClass(SliderModel, [{
      key: "init",
      value: function init() {
        QuestionModel$1.prototype.init.call(this);
        this.setupModelItems();
        this.selectDefaultItem();
      }
    }, {
      key: "selectDefaultItem",
      value: function selectDefaultItem() {
        this.set('_selectedItem', this.get('_items')[0]);
      }
    }, {
      key: "getDecimalPlaces",
      value: function getDecimalPlaces(num) {
        return (num.toString().split('.')[1] || []).length;
      }
    }, {
      key: "setupModelItems",
      value: function setupModelItems() {
        var items = [];
        var answer = this.get('_correctAnswer');
        var range = this.get('_correctRange');
        var start = this.get('_scaleStart');
        var end = this.get('_scaleEnd');
        var step = this.get('_scaleStep') || 1;
        var dp = this.getDecimalPlaces(step);

        for (var i = start; i <= end; i += step) {
          if (dp !== 0) {
            i = parseFloat(i.toFixed(dp));
          }

          items.push({
            value: i,
            selected: false,
            correct: answer ? i === Number(answer) : i >= range._bottom && i <= range._top
          });
        }

        this.set({
          '_items': items,
          '_marginDir': Adapt.config.get('_defaultDirection') === 'rtl' ? 'right' : 'left'
        });
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return true;
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) {
          this.set({
            _userAnswer: undefined
          });
          this.selectDefaultItem();
          return;
        }

        var items = this.get('_items');
        var userAnswer = this.get('_userAnswer');
        var selectedItem = items.find(function (_ref) {
          var value = _ref.value;
          return value === userAnswer;
        });

        if (selectedItem) {
          selectedItem.selected = true;
          this.set('_selectedItem', selectedItem);
        }

        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        this.set('_userAnswer', this.get('_selectedItem').value);
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set({
          _isAtLeastOneCorrectSelection: false,
          _userAnswer: undefined
        });
        this.selectDefaultItem();
      }
    }, {
      key: "deselectAllItems",
      value: function deselectAllItems() {
        this.get('_items').forEach(function (item) {
          return item.selected = false;
        });
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var numberOfCorrectAnswers = this.get('_items').filter(function (_ref2) {
          var selected = _ref2.selected,
              correct = _ref2.correct;
          return selected && correct;
        }).length;
        this.set('_isAtLeastOneCorrectSelection', numberOfCorrectAnswers > 0);
        this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var questionWeight = this.get('_questionWeight');
        var score = questionWeight * numberOfCorrectAnswers;
        this.set('_score', score);
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        return this.get('_userAnswer').toString();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'numeric';
      }
    }, {
      key: "getCorrectAnswers",
      value: function getCorrectAnswers() {
        var answerSingle = this.get('_correctAnswer');
        var answers = [];

        if (answerSingle) {
          return [answerSingle];
        }

        var answerMultiple = this.get('_correctRange');

        if (!answerMultiple) {
          return answers;
        }

        var bottom = answerMultiple._bottom;
        var top = answerMultiple._top;

        if (bottom === undefined || top === undefined) {
          return answers;
        }

        var answer = bottom;
        var step = this.get('_scaleStep') || 1;

        while (answer <= top) {
          answers.push(answer);
          answer += step;
        }

        return answers;
      }
    }]);

    return SliderModel;
  }(QuestionModel$1);

  var SliderModel$1 = __AMD("components/adapt-contrib-slider/js/sliderModel", SliderModel);

  __AMD("components/adapt-contrib-slider/js/adapt-contrib-slider", Adapt.register('slider', {
    view: SliderView$1,
    model: SliderModel$1
  }));

  var TextView = function (_ComponentView) {
    _inherits(TextView, _ComponentView);

    var _super = _createSuper(TextView);

    function TextView() {
      _classCallCheck(this, TextView);

      return _super.apply(this, arguments);
    }

    _createClass(TextView, [{
      key: "preRender",
      value: function preRender() {
        this.checkIfResetOnRevisit();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
        this.setupInview();
      }
    }, {
      key: "setupInview",
      value: function setupInview() {
        var selector = this.getInviewElementSelector();

        if (!selector) {
          this.setCompletionStatus();
          return;
        }

        this.setupInviewCompletion(selector);
      }
    }, {
      key: "getInviewElementSelector",
      value: function getInviewElementSelector() {
        if (this.model.get('body')) return '.component__body';
        if (this.model.get('instruction')) return '.component__instruction';
        if (this.model.get('displayTitle')) return '.component__title';
        return null;
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }]);

    return TextView;
  }(ComponentView$1);

  TextView.template = 'text';
  __AMD("components/adapt-contrib-text/js/adapt-contrib-text", Adapt.register('text', {
    model: ComponentModel$1.extend({}),
    view: TextView
  }));

  var TextInputView = QuestionView$1.extend({
    events: {
      'focus .js-textinput-textbox': 'clearValidationError',
      'change .js-textinput-textbox': 'onInputChanged',
      'keyup .js-textinput-textbox': 'onInputChanged'
    },
    resetQuestionOnRevisit: function () {
      this.setAllItemsEnabled(false);
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.model.setupRandomisation();
    },
    disableQuestion: function () {
      this.setAllItemsEnabled(false);
    },
    enableQuestion: function () {
      this.setAllItemsEnabled(true);
    },
    setAllItemsEnabled: function (isEnabled) {
      this.model.get('_items').forEach(function (item, index) {
        var $itemInput = this.$('.js-textinput-textbox').eq(index);
        $itemInput.prop('disabled', !isEnabled);
      }, this);
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
    },
    clearValidationError: function () {
      this.$('.js-textinput-textbox').removeClass('has-error');
    },
    onCannotSubmit: function () {
      this.showValidationError();
    },
    showValidationError: function () {
      this.$('.js-textinput-textbox').addClass('has-error');
    },
    showMarking: function () {
      if (!this.model.get('_canShowMarking')) return;
      this.model.get('_items').forEach(function (item, i) {
        var $item = this.$('.js-textinput-item').eq(i);
        $item.removeClass('is-correct is-incorrect').addClass(item._isCorrect ? 'is-correct' : 'is-incorrect');
      }, this);
    },
    resetQuestion: function () {
      this.$('.js-textinput-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');
      this.model.set({
        _isAtLeastOneCorrectSelection: false,
        _isCorrect: undefined
      });
    },
    showCorrectAnswer: function () {
      if (this.model.get('_answers')) {
        var correctAnswers = this.model.get('_answers');
        this.model.get('_items').forEach(function (item, index) {
          this.$('.js-textinput-textbox').eq(index).val(correctAnswers[index][0]);
        }, this);
      } else {
        this.model.get('_items').forEach(function (item, index) {
          this.$('.js-textinput-textbox').eq(index).val(item._answers[0]);
        }, this);
      }
    },
    hideCorrectAnswer: function () {
      this.model.get('_items').forEach(function (item, index) {
        this.$('.js-textinput-textbox').eq(index).val(item.userAnswer);
      }, this);
    },
    onInputChanged: function (e) {
      var $input = $(e.target);
      this.model.setItemUserAnswer($input.parents('.js-textinput-item').index(), $input.val());
    }
  });
  var TextInputView$1 = __AMD("components/adapt-contrib-textInput/js/textInputView", TextInputView);

  var TextInputModel = QuestionModel$1.extend({
    init: function () {
      QuestionModel$1.prototype.init.call(this);
      this.set('_genericAnswerIndexOffset', TextInputModel.genericAnswerIndexOffset);
      this.setupQuestionItemIndexes();
      this.checkCanSubmit();
    },
    setupQuestionItemIndexes: function () {
      this.get('_items').forEach(function (item, index) {
        if (item._index === undefined) item._index = index;
        if (item._answerIndex === undefined) item._answerIndex = -1;
      });
    },
    restoreUserAnswers: function () {
      if (!this.get('_isSubmitted')) return;
      var userAnswer = this.get('_userAnswer');
      var genericAnswers = this.get('_answers');
      this.get('_items').forEach(function (item) {
        var answerIndex = userAnswer[item._index];

        if (answerIndex >= TextInputModel.genericAnswerIndexOffset) {
          item.userAnswer = genericAnswers[answerIndex - TextInputModel.genericAnswerIndexOffset];
          item._answerIndex = answerIndex;
        } else if (answerIndex > -1) {
          item.userAnswer = item._answers[answerIndex];
          item._answerIndex = answerIndex;
        } else {
          if (item.userAnswer === undefined) item.userAnswer = '******';
          item._answerIndex = -1;
        }

        if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];
      });
      this.setQuestionAsSubmitted();
      this.markQuestion();
      this.setScore();
      this.setupFeedback();
    },
    setupRandomisation: function () {
      if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
      this.set('_items', _.shuffle(this.get('_items')));
    },
    canSubmit: function () {
      return this.get('_items').every(function (_ref) {
        var userAnswer = _ref.userAnswer;
        return userAnswer;
      });
    },
    setItemUserAnswer: function (itemIndex, userAnswer) {
      var item = this.get('_items')[itemIndex];
      item.userAnswer = userAnswer;
      this.checkCanSubmit();
    },
    storeUserAnswer: function () {
      var items = this.get('_items');
      this.isCorrect();
      var userAnswer = new Array(items.length);
      items.forEach(function (item, index) {
        userAnswer[item._index] = item._answerIndex;
      });
      this.set('_userAnswer', userAnswer);
    },
    isCorrect: function () {
      if (this.get('_answers')) {
        this.markGenericAnswers();
      } else {
        this.markSpecificAnswers();
      }

      return !_.contains(_.pluck(this.get('_items'), '_isCorrect'), false);
    },
    isPartlyCorrect: function () {
      return this.get('_isAtLeastOneCorrectSelection');
    },
    markGenericAnswers: function () {
      var numberOfCorrectAnswers = 0;
      var correctAnswers = this.get('_answers').slice();
      var usedAnswerIndexes = [];
      this.get('_items').forEach(function (item) {
        correctAnswers.forEach(function (answerGroup, answerIndex) {
          if (_.indexOf(usedAnswerIndexes, answerIndex) > -1) return;
          if (this.checkAnswerIsCorrect(answerGroup, item.userAnswer) == false) return;
          usedAnswerIndexes.push(answerIndex);
          item._isCorrect = true;
          item._answerIndex = answerIndex + TextInputModel.genericAnswerIndexOffset;
          this.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        }, this);
        if (!item._isCorrect) item._isCorrect = false;
      }, this);
    },
    markSpecificAnswers: function () {
      var numberOfCorrectAnswers = 0;
      this.get('_items').forEach(function (item) {
        if (!item._answers) return;
        var userAnswer = item.userAnswer || '';

        if (this.checkAnswerIsCorrect(item._answers, userAnswer)) {
          item._isCorrect = true;
          item._answerIndex = _.indexOf(item._answers, this.cleanupUserAnswer(userAnswer));
          this.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        } else {
          item._isCorrect = false;
          item._answerIndex = -1;
        }
      }, this);
    },
    checkAnswerIsCorrect: function (possibleAnswers, userAnswer) {
      var uAnswer = this.cleanupUserAnswer(userAnswer);
      var matched = possibleAnswers.filter(function (cAnswer) {
        return this.cleanupUserAnswer(cAnswer) == uAnswer;
      }, this);
      var answerIsCorrect = matched && matched.length > 0;
      if (answerIsCorrect) this.set('_hasAtLeastOneCorrectSelection', true);
      return answerIsCorrect;
    },
    cleanupUserAnswer: function (userAnswer) {
      if (this.get('_allowsAnyCase')) {
        userAnswer = userAnswer.toLowerCase();
      }

      if (this.get('_allowsPunctuation')) {
        userAnswer = userAnswer.replace(/[\.,-\/#!$£%\^&\*;:{}=\-_`~()]/g, '');
        userAnswer = userAnswer.replace(/(  +)+/g, ' ');
      }

      return $.trim(userAnswer);
    },
    setScore: function () {
      var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
      var questionWeight = this.get('_questionWeight');
      var itemLength = this.get('_items').length;
      var score = questionWeight * numberOfCorrectAnswers / itemLength;
      this.set('_score', score);
    },
    resetUserAnswer: function () {
      this.get('_items').forEach(function (item) {
        item._isCorrect = false;
        item.userAnswer = '';
      });
    },
    getResponse: function () {
      return _.pluck(this.get('_items'), 'userAnswer').join('[,]');
    },
    getResponseType: function () {
      return 'fill-in';
    }
  }, {
    genericAnswerIndexOffset: 65536
  });
  var TextInputModel$1 = __AMD("components/adapt-contrib-textInput/js/textInputModel", TextInputModel);

  __AMD("components/adapt-contrib-textInput/js/adapt-contrib-textInput", Adapt.register('textinput', {
    view: TextInputView$1,
    model: TextInputModel$1
  }));

  var AssessmentView = {
    postRender: function () {
      ArticleView$1.prototype.postRender.call(this);

      if (this.model.isAssessmentEnabled()) {
        this._setupEventListeners();

        var config = this.model.getConfig();

        if (config && config._questions && config._questions._canShowMarking === false) {
          this.$el.addClass('has-no-marking');
        }
      }

      this.$el.addClass('is-assessment');
    },
    _setupEventListeners: function () {
      this.listenTo(Adapt, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset,
        remove: this._onRemove
      });
    },
    _removeEventListeners: function () {
      this.stopListening(Adapt, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset
      });
    },
    _onAssessmentComplete: function (state, model) {
      if (state.id !== this.model.get('_assessment')._id) return;
      console.log('assessment complete', state, model);
    },
    _onAssessmentReset: function (state, model) {
      if (state.id !== this.model.get('_assessment')._id) return;
      console.log('assessment reset', state, model);
    },
    _onRemove: function () {
      this._removeEventListeners();
    }
  };
  var AdaptAssessmentArticleView = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView", AssessmentView);

  var QuestionBank = function (quizBankid, articleId, numQuestionBlocks, uniqueQuestions) {
    this._id = quizBankid;
    this._articleId = articleId;
    this._numQuestionBlocks = numQuestionBlocks;
    this._uniqueQuestions = uniqueQuestions;
    this.questionBlocks = [];
    this.unUsedQuestionBlocks = undefined;
    this.usedQuestionBlocks = [];
  };

  QuestionBank.prototype = {
    getID: function () {
      return this._id;
    },
    addBlock: function (block) {
      this.questionBlocks.push(block);
    },
    getRandomQuestionBlocks: function () {
      this.checkResetUnunsedBlocks();
      var questionBlocks = [];
      var usedQuestionBlocks = this.usedQuestionBlocks.slice(0);

      for (var i = 0; i < this._numQuestionBlocks; i++) {
        var question = this.getRandomQuestion();

        if (question !== undefined) {
          questionBlocks.push(question);
        } else {
          if (usedQuestionBlocks.length === 0) break;
          var index = Math.floor(Math.random() * (usedQuestionBlocks.length - 1));
          question = usedQuestionBlocks.splice(index, 1)[0];
          questionBlocks.push(question);
        }
      }

      return questionBlocks;
    },
    checkResetUnunsedBlocks: function () {
      if (this.unUsedQuestionBlocks !== undefined && this._uniqueQuestions) return;
      this.unUsedQuestionBlocks = this.questionBlocks.slice(0);
    },
    getRandomQuestion: function () {
      if (this.unUsedQuestionBlocks !== undefined && this.unUsedQuestionBlocks.length < 1) {
        console.warn('assessment:' + this._articleId + ' No more unique questions for _assessment._quizBankID ' + this._id);
        return undefined;
      }

      var index = Math.round(Math.random() * (this.unUsedQuestionBlocks.length - 1));
      var questionBlock = this.unUsedQuestionBlocks[index];
      this.usedQuestionBlocks.push(questionBlock);
      this.unUsedQuestionBlocks.splice(index, 1);
      return questionBlock;
    }
  };
  var QuestionBank$1 = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank", QuestionBank);

  var givenIdCount = 0;
  var assessmentConfigDefaults = {
    _isEnabled: true,
    _questions: {
      _resetType: 'soft',
      _canShowFeedback: false,
      _canShowMarking: false,
      _canShowModelAnswer: false
    },
    _suppressMarking: false,
    _isPercentageBased: true,
    _scoreToPass: 100,
    _includeInTotalScore: true,
    _assessmentWeight: 1,
    _isResetOnRevisit: true,
    _reloadPageOnReset: true,
    _attempts: 'infinite',
    _allowResetIfPassed: false
  };
  var AssessmentModel = {
    _postInitialize: function () {
      if (!this.isAssessmentEnabled()) return;
      var assessmentConfig = this.getConfig();

      _.extend(this, {
        _currentQuestionComponents: null,
        _originalChildModels: null,
        _questionBanks: null,
        _forceResetOnRevisit: false
      });

      var attemptsLeft;

      switch (assessmentConfig._attempts) {
        case 'infinite':
        case 0:
        case undefined:
        case -1:
        case null:
          attemptsLeft = 'infinite';
          break;

        default:
          attemptsLeft = assessmentConfig._attempts;
          break;
      }

      this.set({
        _currentQuestionComponentIds: [],
        _assessmentCompleteInSession: false,
        _attemptInProgress: false,
        _isAssessmentComplete: false,
        _numberOfQuestionsAnswered: 0,
        _lastAttemptScoreAsPercent: 0,
        _attempts: attemptsLeft,
        _attemptsLeft: attemptsLeft,
        _attemptsSpent: 0
      });
      this.listenToOnce(Adapt, 'app:dataReady', this._onDataReady);
      this.listenTo(Adapt, 'remove', this._onRemove);
    },
    init: function () {
      this._originalChildModels = this.getChildren().models;
      this._currentQuestionComponents = this.findDescendantModels('components', {
        where: {
          _isQuestionType: true
        }
      });
      this.set('_currentQuestionComponentIds', this._currentQuestionComponents.map(function (comp) {
        return comp.get('_id');
      }));

      this._setAssessmentOwnershipOnChildrenModels();

      this._updateQuestionsState();
    },
    _setAssessmentOwnershipOnChildrenModels: function () {
      var assessmentConfig = this.get('_assessment');
      var childConfig = {
        _isPartOfAssessment: true,
        _assessmentId: assessmentConfig._id
      };

      for (var i = 0, l = this._originalChildModels.length; i < l; i++) {
        var blockModel = this._originalChildModels[i];
        blockModel.set(childConfig);
        blockModel.setOnChildren(childConfig);
      }
    },
    _onDataReady: function () {
      Adapt.assessment.register(this);
    },
    _setupAssessmentData: function (force, callback) {
      var assessmentConfig = this.getConfig();
      var state = this.getState();
      var shouldResetAssessment = !this.get('_attemptInProgress') && !state.isPass || force === true;
      var shouldResetQuestions = assessmentConfig._isResetOnRevisit && (state.allowResetIfPassed || !state.isPass) || force === true;

      if (shouldResetAssessment || shouldResetQuestions) {
        Adapt.trigger('assessments:preReset', this.getState(), this);
      }

      var quizModels;

      if (shouldResetAssessment) {
        this.set({
          _numberOfQuestionsAnswered: 0,
          _isAssessmentComplete: false,
          _assessmentCompleteInSession: false,
          _score: 0
        });
        this.getChildren().models = this._originalChildModels;

        if (assessmentConfig._banks && assessmentConfig._banks._isEnabled && assessmentConfig._banks._split.length > 1) {
          quizModels = this._setupBankedAssessment();
        } else if (assessmentConfig._randomisation && assessmentConfig._randomisation._isEnabled) {
          quizModels = this._setupRandomisedAssessment();
        }
      }

      if (!quizModels) {
        quizModels = this.getChildren().models;
      } else if (quizModels.length === 0) {
        quizModels = this.getChildren().models;
        console.warn('assessment: Not enough unique questions to create a fresh assessment, using last selection');
      }

      this.getChildren().models = quizModels;
      this._currentQuestionComponents = this.findDescendantModels('components', {
        where: {
          _isQuestionType: true
        }
      });
      this.set('_currentQuestionComponentIds', this._currentQuestionComponents.map(function (comp) {
        return comp.get('_id');
      }));

      if (shouldResetAssessment || shouldResetQuestions) {
        this._resetQuestions(function () {
          this.set('_attemptInProgress', true);
          Adapt.trigger('assessments:reset', this.getState(), this);
          finalise.apply(this);
        }.bind(this));
      } else {
        finalise.apply(this);
      }

      function finalise() {
        if (!state.isComplete) {
          this.set('_attemptInProgress', true);
        }

        this._overrideQuestionComponentSettings();

        this._setupQuestionListeners();

        this._checkNumberOfQuestionsAnswered();

        this._updateQuestionsState();

        Adapt.assessment.saveState();
        if (typeof callback === 'function') callback.apply(this);

        if (shouldResetAssessment || shouldResetQuestions) {
          Adapt.trigger('assessments:postReset', this.getState(), this);
        }
      }
    },
    _setupBankedAssessment: function () {
      var assessmentConfig = this.getConfig();

      this._setupBanks();

      var questionModels = [];

      for (var bankId in this._questionBanks) {
        if (this._questionBanks.hasOwnProperty(bankId)) {
          var questionBank = this._questionBanks[bankId];
          var questions = questionBank.getRandomQuestionBlocks();
          questionModels = questionModels.concat(questions);
        }
      }

      if (assessmentConfig._banks._randomisation) {
        questionModels = _.shuffle(questionModels);
      }

      return questionModels;
    },
    _setupBanks: function () {
      var assessmentConfig = this.getConfig();

      var banks = assessmentConfig._banks._split.split(',');

      var bankId;
      this._questionBanks = [];

      for (var i = 0, l = banks.length; i < l; i++) {
        var bank = banks[i];
        bankId = i + 1;
        var questionBank = new QuestionBank$1(bankId, this.get('_id'), bank, true);
        this._questionBanks[bankId] = questionBank;
      }

      var children = this.getChildren().models;

      for (var j = 0, count = children.length; j < count; j++) {
        var blockModel = children[j];
        var blockAssessmentConfig = blockModel.get('_assessment');
        if (!blockAssessmentConfig) continue;
        bankId = blockAssessmentConfig._quizBankID;

        this._questionBanks[bankId].addBlock(blockModel);
      }
    },
    _setupRandomisedAssessment: function () {
      var assessmentConfig = this.getConfig();
      var randomisationModel = assessmentConfig._randomisation;
      var blockModels = this.getChildren().models;

      var questionModels = _.shuffle(blockModels);

      if (randomisationModel._blockCount > 0) {
        questionModels = questionModels.slice(0, randomisationModel._blockCount);
      }

      return questionModels;
    },
    _overrideQuestionComponentSettings: function () {
      var newSettings = this._getMarkingSettings();

      var questionConfig = this.getConfig()._questions;

      if (questionConfig.hasOwnProperty('_canShowFeedback')) {
        newSettings._canShowFeedback = questionConfig._canShowFeedback;
      }

      if (!_.isEmpty(newSettings)) {
        for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {
          this._currentQuestionComponents[i].set(newSettings, {
            pluginName: '_assessment'
          });
        }
      }
    },
    _setupQuestionListeners: function () {
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];
        if (question.get('_isInteractionComplete')) continue;
        this.listenTo(question, 'change:_isInteractionComplete', this._onQuestionCompleted);
      }
    },
    _checkNumberOfQuestionsAnswered: function () {
      var questionComponents = this._currentQuestionComponents;
      var numberOfQuestionsAnswered = 0;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];

        if (question.get('_isInteractionComplete')) {
          numberOfQuestionsAnswered++;
        }
      }

      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);
    },
    _removeQuestionListeners: function () {
      var questionComponents = this._currentQuestionComponents;
      if (!questionComponents) return;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];
        this.stopListening(question, 'change:_isInteractionComplete', this._onQuestionCompleted);
      }
    },
    _onQuestionCompleted: function (questionModel, value) {
      if (value === false) return;
      if (!questionModel.get('_isInteractionComplete')) return;
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');
      numberOfQuestionsAnswered++;
      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);

      this._updateQuestionsState();

      Adapt.assessment.saveState();

      this._checkAssessmentComplete();
    },
    _checkAssessmentComplete: function () {
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');
      var allQuestionsAnswered = numberOfQuestionsAnswered >= this._currentQuestionComponents.length;
      if (!allQuestionsAnswered) return;

      this._onAssessmentComplete();
    },
    _onAssessmentComplete: function () {
      this.set('_attemptInProgress', false);

      this._spendAttempt();

      var scoreAsPercent = this._getScoreAsPercent();

      var score = this._getScore();

      var maxScore = this._getMaxScore();

      this.set({
        _scoreAsPercent: scoreAsPercent,
        _score: score,
        _maxScore: maxScore,
        _lastAttemptScoreAsPercent: scoreAsPercent,
        _assessmentCompleteInSession: true,
        _isAssessmentComplete: true
      });

      this._updateQuestionsState();

      this._checkIsPass();

      this._removeQuestionListeners();

      if (this._isMarkingSuppressionEnabled() && !this._isAttemptsLeft()) {
        _.defer(function () {
          this._overrideMarkingSettings();

          this._refreshQuestions();
        }.bind(this));
      }

      Adapt.trigger('assessments:complete', this.getState(), this);
    },
    _updateQuestionsState: function () {
      var questions = [];
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var questionComponent = questionComponents[i];
        var questionModel = {
          _id: questionComponent.get('_id'),
          _isCorrect: questionComponent.get('_isCorrect') === undefined ? null : questionComponent.get('_isCorrect')
        };
        questions.push(questionModel);
      }

      this.set('_questions', questions);
    },
    _checkIsPass: function () {
      var assessmentConfig = this.getConfig();
      var isPercentageBased = assessmentConfig._isPercentageBased;
      var scoreToPass = assessmentConfig._scoreToPass;
      var scoreAsPercent = this.get('_scoreAsPercent');
      var score = this.get('_score');
      var isPass = isPercentageBased ? scoreAsPercent >= scoreToPass : score >= scoreToPass;
      this.set('_isPass', isPass);
    },
    _getMarkingSettings: function () {
      var markingSettings = {};

      if (this._shouldSuppressMarking()) {
        markingSettings = {
          _canShowMarking: false,
          _canShowModelAnswer: false
        };
      } else {
        var questionConfig = this.getConfig()._questions;

        if (questionConfig.hasOwnProperty('_canShowModelAnswer')) {
          markingSettings._canShowModelAnswer = questionConfig._canShowModelAnswer;
        }

        if (questionConfig.hasOwnProperty('_canShowMarking')) {
          markingSettings._canShowMarking = questionConfig._canShowMarking;
        }
      }

      return markingSettings;
    },
    _overrideMarkingSettings: function () {
      var newMarkingSettings = this._getMarkingSettings();

      for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {
        this._currentQuestionComponents[i].set(newMarkingSettings, {
          pluginName: '_assessment'
        });
      }
    },
    _refreshQuestions: function () {
      for (var a = 0, b = this._currentQuestionComponents.length; a < b; a++) {
        var question = this._currentQuestionComponents[a];
        question.refresh();
      }
    },
    _shouldSuppressMarking: function () {
      return this._isMarkingSuppressionEnabled() && this._isAttemptsLeft();
    },
    _isMarkingSuppressionEnabled: function () {
      var assessmentConfig = this.getConfig();
      return assessmentConfig._suppressMarking;
    },
    _isAttemptsLeft: function () {
      if (this.get('_isAssessmentComplete') && this.get('_isPass')) return false;
      if (this.get('_attemptsLeft') === 0) return false;
      return true;
    },
    _spendAttempt: function () {
      if (!this._isAttemptsLeft()) return false;
      var attemptsSpent = this.get('_attemptsSpent');
      this.set('_attemptsSpent', ++attemptsSpent);
      if (this.get('_attempts') === 'infinite') return true;
      var attemptsLeft = this.get('_attemptsLeft');
      this.set('_attemptsLeft', --attemptsLeft);
      return true;
    },
    _getScore: function () {
      var score = 0;
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];

        if (question.get('_isCorrect') && question.get('_questionWeight')) {
          score += question.get('_questionWeight');
        }
      }

      return score;
    },
    _getMaxScore: function () {
      var maxScore = 0;
      var questionComponents = this._currentQuestionComponents;

      for (var i = 0, l = questionComponents.length; i < l; i++) {
        var question = questionComponents[i];

        if (question.get('_questionWeight')) {
          maxScore += question.get('_questionWeight');
        }
      }

      return maxScore;
    },
    _getScoreAsPercent: function () {
      if (this._getMaxScore() === 0) return 0;
      return Math.round(this._getScore() / this._getMaxScore() * 100);
    },
    _getLastAttemptScoreAsPercent: function () {
      return this.get('_lastAttemptScoreAsPercent');
    },
    _checkReloadPage: function () {
      if (!this.canResetInPage()) return false;
      var parentId = this.getParent().get('_id');
      var currentLocation = Adapt.location._currentId;
      if (currentLocation !== parentId) return false;
      if (!this.get('_isReady')) return false;
      return true;
    },
    _reloadPage: function (callback) {
      this._forceResetOnRevisit = true;
      this.listenToOnce(Adapt, 'pageView:ready', callback);

      _.delay(function () {
        Backbone.history.navigate('#/id/' + Adapt.location._currentId, {
          replace: true,
          trigger: true
        });
      }, 250);
    },
    _resetQuestions: function (callback) {
      var assessmentConfig = this.getConfig();
      var syncIterations = 1;
      var i = 0;
      var qs = this._currentQuestionComponents;
      var len = qs.length;

      function step() {
        for (var j = 0, count = Math.min(syncIterations, len - i); j < count; i++, j++) {
          var question = qs[i];
          question.reset(assessmentConfig._questions._resetType, true);
        }

        i === len ? callback() : setTimeout(step);
      }

      step();
    },
    _onRemove: function () {
      this._removeQuestionListeners();
    },
    _setCompletionStatus: function () {
      this.set({
        _isComplete: true,
        _isInteractionComplete: true
      });
    },
    _checkIfQuestionsWereRestored: function () {
      if (this.get('_assessmentCompleteInSession')) return;
      if (!this.get('_isAssessmentComplete')) return;
      var wereQuestionsRestored = true;
      var questions = this.get('_questions');

      for (var i = 0, l = questions.length; i < l; i++) {
        var question = questions[i];
        var questionModel = Adapt.findById(question._id);

        if (!questionModel.get('_isSubmitted')) {
          wereQuestionsRestored = false;
          break;
        }
      }

      if (!wereQuestionsRestored) {
        this.set('_assessmentCompleteInSession', true);
        return true;
      }

      return false;
    },
    isAssessmentEnabled: function () {
      if (this.get('_assessment') && this.get('_assessment')._isEnabled) return true;
      return false;
    },
    canResetInPage: function () {
      var assessmentConfig = this.getConfig();
      if (assessmentConfig._reloadPageOnReset === false) return false;
      return true;
    },
    reset: function (force, callback) {
      if (this._isResetInProgress) {
        this.once('reset', function () {
          this._isResetInProgress = false;

          if (typeof callback === 'function') {
            callback(true);
          }
        });
        return;
      }

      var assessmentConfig = this.getConfig();
      force = this._forceResetOnRevisit || force === true;
      this._forceResetOnRevisit = false;

      var isPageReload = this._checkReloadPage();

      if (this.get('_assessmentCompleteInSession') && !assessmentConfig._isResetOnRevisit && !isPageReload && !force) {
        if (typeof callback === 'function') {
          callback(false);
        }

        return false;
      }

      var wereQuestionsRestored = this._checkIfQuestionsWereRestored();

      force = force || wereQuestionsRestored;

      if (force && !this._isAttemptsLeft()) {
        this.set({
          _attemptsLeft: this.get('_attempts'),
          _attemptsSpent: 0
        });
      }

      var allowResetIfPassed = this.get('_assessment')._allowResetIfPassed;

      if (!this._isAttemptsLeft() && !force && !allowResetIfPassed) {
        if (typeof callback === 'function') callback(false);
        return false;
      }

      if (!isPageReload) {
        this.once('reset', function () {
          this._isResetInProgress = false;

          if (typeof callback === 'function') {
            callback(true);
          }
        });
        this._isResetInProgress = true;

        this._setupAssessmentData(force, function () {
          this.trigger('reset');
        });
      } else {
        this._reloadPage(function () {
          if (typeof callback === 'function') {
            callback(true);
          }
        });
      }

      return true;
    },
    getSaveState: function () {
      var state = this.getState();
      var blocks;
      var cfg = this.getConfig();
      var banksActive = cfg._banks && cfg._banks._isEnabled && cfg._banks._split.length > 1;
      var randomisationActive = cfg._randomisation && cfg._randomisation._isEnabled;

      if (!banksActive && !randomisationActive) {
        blocks = this.findDescendantModels('block');
      } else {
        blocks = state.questions.map(function (question) {
          return Adapt.findById(question._id).getParent();
        });
      }

      blocks = blocks.filter(function (block) {
        var trackingId = block.get('_trackingId');
        return Number.isInteger(trackingId) && trackingId >= 0;
      });
      var blockTrackingIds = blocks.map(function (block) {
        return block.get('_trackingId');
      });
      var blockCompletion = blocks.map(function (block) {
        var questions = block.findDescendantModels('question');
        return questions.map(function (question) {
          return question.get('_isCorrect') || false;
        });
      });
      var blockData = [blockTrackingIds, blockCompletion];
      var saveState = [state.isComplete ? 1 : 0, state.attemptsSpent, state.maxScore || 0, state.score, state.attemptInProgress ? 1 : 0];
      var dataPackage = [saveState, blockData];
      return dataPackage;
    },
    setRestoreState: function (dataPackage) {
      var restoreState = dataPackage[0];
      var blockData = dataPackage[1];
      var isComplete = restoreState[0] === 1;
      var attempts = this.get('_attempts');
      var attemptsSpent = restoreState[1];
      var maxScore = restoreState[2];
      var score = restoreState[3];
      var scoreAsPercent = score ? Math.round(score / maxScore * 100) : 0;
      var attemptInProgress = restoreState[4] === 1;
      var blocks = blockData[0].map(function (trackingId) {
        return Adapt.data.findWhere({
          _trackingId: trackingId
        });
      });

      if (blocks.length) {
        this.getChildren().models = blocks;
      }

      this.set({
        _isAssessmentComplete: isComplete,
        _assessmentCompleteInSession: false,
        _attemptsSpent: attemptsSpent,
        _attemptInProgress: attemptInProgress,
        _attemptsLeft: attempts === 'infinite' ? attempts : attempts - attemptsSpent,
        _maxScore: maxScore || this._getMaxScore(),
        _score: score || 0,
        _scoreAsPercent: scoreAsPercent,
        _lastAttemptScoreAsPercent: scoreAsPercent
      });
      var questions = [];
      blocks.forEach(function (block, blockIndex) {
        var blockQuestions = block.findDescendantModels('question');
        blockQuestions.forEach(function (question, questionIndex) {
          questions.push({
            _id: question.get('_id'),
            _isCorrect: blockData[1][blockIndex][questionIndex]
          });
        });
      });
      this.set('_questions', questions);
      if (isComplete) this._checkIsPass();
      Adapt.trigger('assessments:restored', this.getState(), this);
    },
    getState: function () {
      var assessmentConfig = this.getConfig();
      var state = {
        id: assessmentConfig._id,
        type: 'article-assessment',
        pageId: this.getParent().get('_id'),
        articleId: this.get('_id'),
        isEnabled: assessmentConfig._isEnabled,
        isComplete: this.get('_isAssessmentComplete'),
        isPercentageBased: assessmentConfig._isPercentageBased,
        scoreToPass: assessmentConfig._scoreToPass,
        score: this.get('_score'),
        scoreAsPercent: this.get('_scoreAsPercent'),
        maxScore: this.get('_maxScore'),
        isPass: this.get('_isPass'),
        includeInTotalScore: assessmentConfig._includeInTotalScore,
        assessmentWeight: assessmentConfig._assessmentWeight,
        attempts: this.get('_attempts'),
        attemptsSpent: this.get('_attemptsSpent'),
        attemptsLeft: this.get('_attemptsLeft'),
        attemptInProgress: this.get('_attemptInProgress'),
        lastAttemptScoreAsPercent: this.get('_lastAttemptScoreAsPercent'),
        questions: this.get('_questions'),
        resetType: assessmentConfig._questions._resetType,
        allowResetIfPassed: assessmentConfig._allowResetIfPassed,
        questionModels: new Backbone.Collection(this._currentQuestionComponents)
      };
      return state;
    },
    getConfig: function () {
      var assessmentConfig = this.get('_assessment');

      if (!assessmentConfig) {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults);
      } else {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults, assessmentConfig);
      }

      if (assessmentConfig._id === undefined) {
        assessmentConfig._id = 'givenId' + givenIdCount++;
      }

      this.set('_assessment', assessmentConfig);
      return assessmentConfig;
    }
  };
  var AdaptAssessmentArticleModel = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel", AssessmentModel);

  var assessmentsConfigDefaults = {
    _isPercentageBased: true,
    _scoreToPass: 100,
    _isDefaultsLoaded: true
  };
  Adapt.assessment = _.extend({
    _assessments: _.extend([], {
      _byPageId: {},
      _byAssessmentId: {}
    }),
    initialize: function () {
      this.listenTo(Adapt, {
        'assessments:complete': this._onAssessmentsComplete,
        'router:location': this._checkResetAssessmentsOnRevisit,
        'router:plugin': this._handleRoute,
        'app:dataReady': this._onDataReady
      });
    },
    _onAssessmentsComplete: function (state) {
      var assessmentId = state.id;
      state.isComplete = true;
      if (assessmentId === undefined) return;

      if (!this._getStateByAssessmentId(assessmentId)) {
        Adapt.log.warn('assessments: state was not registered when assessment was created');
      }

      this.saveState();

      this._setPageProgress();

      this._checkAssessmentsComplete();
    },
    _restoreModelState: function (assessmentModel) {
      if (!this._saveStateModel) {
        this._saveStateModel = Adapt.offlineStorage.get('a');
      }

      if (this._saveStateModel) {
        var state = assessmentModel.getState();

        if (this._saveStateModel[state.id]) {
          assessmentModel.setRestoreState(Adapt.offlineStorage.deserialize(this._saveStateModel[state.id]));
        }
      }
    },
    _handleRoute: function (plugin, id) {
      if (plugin !== 'assessment' && plugin !== 'article-assessment' || id === undefined) {
        return;
      }

      if (!Adapt.findById(id)) {
        var assessment = Adapt.assessment._assessments._byAssessmentId[id];

        if (assessment) {
          id = assessment.get('_id');
        } else {
          Adapt.log.warn('Assessment not found with _id: ' + id);
          return;
        }
      }

      _.defer(function () {
        Backbone.history.navigate('#/id/' + id, {
          trigger: true,
          replace: true
        });
      });
    },
    _checkResetAssessmentsOnRevisit: function (toObject) {
      if (toObject._contentType !== 'page') return;

      var pageAssessmentModels = this._getAssessmentByPageId(toObject._currentId);

      if (pageAssessmentModels === undefined) return;
      Adapt.wait.for(function resetAllAssessments(allAssessmentHaveReset) {
        var numberOfAssessments = pageAssessmentModels.length;
        var numberOfResetAssessments = 0;
        var forceAssessmentReset = false;
        pageAssessmentModels.forEach(function (model) {
          model.reset(forceAssessmentReset, function () {
            numberOfResetAssessments++;
            var haveAllModelsReset = numberOfResetAssessments === numberOfAssessments;

            if (!haveAllModelsReset) {
              return;
            }

            allAssessmentHaveReset();
          });
        });
      });

      this._setPageProgress();
    },
    _onDataReady: function () {
      this._assessments = _.extend([], {
        _byPageId: {},
        _byAssessmentId: {}
      });
      this._restoredCount = 0;
    },
    _checkAssessmentsComplete: function () {
      var allAssessmentsComplete = true;
      var assessmentToPostBack = 0;

      var states = this._getStatesByAssessmentId();

      var assessmentStates = [];

      for (var id in states) {
        var state = states[id];
        if (!state.includeInTotalScore) continue;

        if (!state.isComplete) {
          allAssessmentsComplete = false;
          break;
        }

        assessmentToPostBack++;
        assessmentStates.push(state);
      }

      if (!allAssessmentsComplete || assessmentToPostBack === 0) return false;

      if (assessmentToPostBack === 1) {
        this._setupSingleAssessmentConfiguration(assessmentStates[0]);
      }

      _.defer(function () {
        Adapt.trigger('assessment:complete', this.getState());
      }.bind(this));

      return true;
    },
    _setupSingleAssessmentConfiguration: function (assessmentState) {
      var assessmentsConfig = Adapt.course.get('_assessment');
      $.extend(true, assessmentsConfig, {
        _isPercentageBased: assessmentState.isPercentageBased,
        _scoreToPass: assessmentState.scoreToPass
      });
      Adapt.course.set('_assessment', assessmentsConfig);
    },
    _getAssessmentByPageId: function (pageId) {
      return this._assessments._byPageId[pageId];
    },
    _getStateByAssessmentId: function (assessmentId) {
      if (assessmentId === undefined) {
        return null;
      }

      return this._assessments._byAssessmentId[assessmentId].getState();
    },
    _getStatesByAssessmentId: function () {
      var states = {};

      for (var i = 0, l = this._assessments.length; i < l; i++) {
        var assessmentModel = this._assessments[i];
        if (!assessmentModel.get('_isAvailable')) continue;
        var state = assessmentModel.getState();
        states[state.id] = state;
      }

      return states;
    },
    _setPageProgress: function () {
      for (var k in this._assessments._byPageId) {
        var assessments = this._assessments._byPageId[k];
        var assessmentsTotal = assessments.length;
        var assessmentsPassed = 0;

        for (var i = 0, l = assessments.length; i < l; i++) {
          var assessmentState = assessments[i].getState();
          if (assessmentState.includeInTotalScore && !assessmentState.isPass) continue;

          if (assessmentState.isComplete) {
            assessmentsPassed++;
          }
        }

        try {
          var pageModel = Adapt.findById(k);
          pageModel.set({
            _subProgressTotal: assessmentsTotal,
            _subProgressComplete: assessmentsPassed
          });
        } catch (e) {}
      }
    },
    _addToAssessmentIdMap: function (id, model) {
      if (id === undefined) {
        Adapt.log.warn('An assessment has been registered with an undefined value for "_id"');
        return;
      }

      if (id === '') {
        Adapt.log.warn('An assessment has been registered with an empty value for "_id"');
      }

      if (!this._assessments._byAssessmentId[id]) {
        this._assessments._byAssessmentId[id] = model;
      } else {
        Adapt.log.warn('An assessment with an _id of "' + id + '" already exists!');
      }
    },
    _setupQuestionNumbering: function () {
      var getRelatedQuestions = function (data) {
        var currentAssessmentId = data._assessmentId;
        var currentAssessment = Adapt.assessment.get(currentAssessmentId);
        return currentAssessment.getState().questions;
      };

      Handlebars.registerHelper('questionNumber', function getQuestionNumber() {
        var data = this.view ? this.view.model.toJSON() : this;
        if (!data._isPartOfAssessment) return;

        var related = _.pluck(getRelatedQuestions(data), '_id');

        return related.indexOf(data._id) + 1;
      });
      Handlebars.registerHelper('questionCount', function getTotalQuestions() {
        var data = this.view ? this.view.model.toJSON() : this;
        if (!data._isPartOfAssessment) return;
        return getRelatedQuestions(data).length;
      });
    },
    register: function (assessmentModel) {
      var state = assessmentModel.getState();
      var assessmentId = state.id;
      var pageId = state.pageId;

      if (this._assessments._byPageId[pageId] === undefined) {
        this._assessments._byPageId[pageId] = [];
      }

      this._assessments._byPageId[pageId].push(assessmentModel);

      this._addToAssessmentIdMap(assessmentId, assessmentModel);

      this._assessments.push(assessmentModel);

      this._restoreModelState(assessmentModel);

      this._restoredCount++;
      Adapt.trigger('assessments:register', state, assessmentModel);

      this._setPageProgress();

      this._setupQuestionNumbering();

      if (this._restoredCount === this._assessments.length) {
        Adapt.trigger('assessment:restored', this.getState());
      }
    },
    get: function (id) {
      if (id === undefined) {
        return this._assessments.slice(0);
      } else {
        return this._assessments._byAssessmentId[id];
      }
    },
    saveState: function () {
      this._saveStateModel = {};

      for (var i = 0, assessmentModel; assessmentModel = this._assessments[i++];) {
        var state = assessmentModel.getState();
        this._saveStateModel[state.id] = Adapt.offlineStorage.serialize(assessmentModel.getSaveState());
      }

      Adapt.offlineStorage.set('a', this._saveStateModel);
    },
    getConfig: function () {
      var assessmentsConfig = Adapt.course.get('_assessment');

      if (assessmentsConfig && assessmentsConfig._isDefaultsLoaded) {
        return assessmentsConfig;
      }

      if (assessmentsConfig === undefined) {
        assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults);
      } else {
        assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults, assessmentsConfig);
      }

      Adapt.course.set('_assessment', assessmentsConfig);
      return assessmentsConfig;
    },
    getState: function () {
      var assessmentsConfig = this.getConfig();
      var score = 0;
      var maxScore = 0;
      var isPass = false;
      var totalAssessments = 0;

      var states = this._getStatesByAssessmentId();

      var assessmentsComplete = 0;

      for (var id in states) {
        var state = states[id];
        if (!state.includeInTotalScore) continue;
        if (state.isComplete) assessmentsComplete++;
        totalAssessments++;
        maxScore += state.maxScore / state.assessmentWeight;
        score += state.score / state.assessmentWeight;
      }

      var isComplete = assessmentsComplete === totalAssessments;
      var scoreAsPercent = Math.round(score / maxScore * 100);

      if ((assessmentsConfig._scoreToPass || 100) && isComplete) {
        if (assessmentsConfig._isPercentageBased !== false) {
          if (scoreAsPercent >= assessmentsConfig._scoreToPass) isPass = true;
        } else {
          if (score >= assessmentsConfig._scoreToPass) isPass = true;
        }
      }

      return {
        isComplete: isComplete,
        isPercentageBased: assessmentsConfig._isPercentageBased,
        isPass: isPass,
        scoreAsPercent: scoreAsPercent,
        maxScore: maxScore,
        score: score,
        scoreToPass: assessmentsConfig._scoreToPass,
        assessmentsComplete: assessmentsComplete,
        assessments: totalAssessments
      };
    }
  }, Backbone.Events);
  Adapt.assessment.initialize();

  var ArticleViewInitialize = ArticleView$1.prototype.initialize;

  ArticleView$1.prototype.initialize = function (options) {
    if (this.model.get('_assessment') && this.model.get('_assessment')._isEnabled === true) {
      _.extend(this, AdaptAssessmentArticleView);
    }

    return ArticleViewInitialize.apply(this, arguments);
  };

  var ArticleModelInitialize = ArticleModel$1.prototype.initialize;

  ArticleModel$1.prototype.initialize = function (options) {
    if (this.get('_assessment') && this.get('_assessment')._isEnabled === true) {
      _.extend(this, AdaptAssessmentArticleModel);

      var returnValue = ArticleModelInitialize.apply(this, arguments);

      this._postInitialize();

      return returnValue;
    }

    return ArticleModelInitialize.apply(this, arguments);
  };

  var Bookmarking = Backbone.Controller.extend({
    bookmarkLevel: null,
    watchViewIds: null,
    watchViews: [],
    restoredLocationID: null,
    currentLocationID: null,
    initialize: function () {
      this.listenToOnce(Adapt, 'router:location', this.onAdaptInitialize);
    },
    onAdaptInitialize: function () {
      if (!this.checkIsEnabled()) return;
      this.setupEventListeners();
      this.checkRestoreLocation();
    },
    checkIsEnabled: function () {
      var courseBookmarkModel = Adapt.course.get('_bookmarking');
      if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;
      if (!Adapt.offlineStorage) return false;
      return true;
    },
    setupEventListeners: function () {
      this._onScroll = _.debounce(this.checkLocation.bind(this), 1000);
      this.listenTo(Adapt, {
        'menuView:ready': this.setupMenu,
        'pageView:preRender': this.setupPage
      });
    },
    checkRestoreLocation: function () {
      this.restoredLocationID = Adapt.offlineStorage.get('location');
      if (!this.restoredLocationID || this.restoredLocationID === 'undefined') return;
      this.listenToOnce(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);
    },
    restoreLocation: function () {
      _.defer(function () {
        this.stopListening(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);

        if (this.restoredLocationID === Adapt.location._currentId || !Adapt.findById(this.restoredLocationID)) {
          return;
        }

        var locationOnscreen = $('.' + this.restoredLocationID).onscreen();
        var isLocationOnscreen = locationOnscreen && locationOnscreen.percentInview > 0;
        var isLocationFullyInview = locationOnscreen && locationOnscreen.percentInview === 100;

        if (isLocationOnscreen && isLocationFullyInview) {
          return;
        }

        if (Adapt.course.get('_bookmarking')._showPrompt === false) {
          this.navigateToPrevious();
          return;
        }

        this.showPrompt();
      }.bind(this));
    },
    showPrompt: function () {
      var courseBookmarkModel = Adapt.course.get('_bookmarking');
      var buttons = courseBookmarkModel._buttons || {
        yes: 'Yes',
        no: 'No'
      };
      this.listenToOnce(Adapt, {
        'bookmarking:continue': this.navigateToPrevious,
        'bookmarking:cancel': this.navigateCancel
      });
      var promptObject = {
        title: courseBookmarkModel.title,
        body: courseBookmarkModel.body,
        _classes: 'is-bookmarking',
        _prompts: [{
          promptText: buttons.yes || 'Yes',
          _callbackEvent: 'bookmarking:continue'
        }, {
          promptText: buttons.no || 'No',
          _callbackEvent: 'bookmarking:cancel'
        }],
        _showIcon: true
      };
      var accessibility = Adapt.config.get('_accessibility');

      if (!accessibility || !accessibility._isActive) {
        Adapt.trigger('notify:prompt', promptObject);
        return;
      }

      $('.js-loading').show();
      $('#a11y-focuser').focus();
      $('body').attr('aria-hidden', true);

      _.delay(function () {
        $('.js-loading').hide();
        $('body').removeAttr('aria-hidden');
        Adapt.trigger('notify:prompt', promptObject);
      }, 3000);
    },
    navigateToPrevious: function () {
      _.defer(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var isSinglePage;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                isSinglePage = Adapt.contentObjects.models.length == 1;
                _context.next = 3;
                return Adapt.navigateToElement('.' + this.restoredLocationID, {
                  trigger: true,
                  replace: isSinglePage,
                  duration: 400
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })).bind(this));

      this.stopListening(Adapt, 'bookmarking:cancel');
    },
    navigateCancel: function () {
      this.stopListening(Adapt, 'bookmarking:continue');
    },
    resetLocationID: function () {
      this.setLocationID('');
    },
    setupMenu: function (menuView) {
      var menuModel = menuView.model;

      if (!menuModel.get('_parentId')) {
        this.resetLocationID();
        return;
      }

      this.setLocationID(menuModel.get('_id'));
    },
    getBookmarkLevel: function (pageModel) {
      var defaultLevel = Adapt.course.get('_bookmarking')._level || 'component';
      var bookmarkModel = pageModel.get('_bookmarking');
      var isInherit = !bookmarkModel || !bookmarkModel._level || bookmarkModel._level === 'inherit';
      return isInherit ? defaultLevel : bookmarkModel._level;
    },
    setupPage: function (pageView) {
      var pageBookmarkModel = pageView.model.get('_bookmarking');

      if (pageBookmarkModel && pageBookmarkModel._isEnabled === false) {
        this.resetLocationID();
        return;
      }

      this.setLocationID(pageView.model.get('_id'));
      this.bookmarkLevel = this.getBookmarkLevel(pageView.model);

      if (this.bookmarkLevel === 'page') {
        return;
      }

      this.watchViewIds = pageView.model.findDescendantModels(this.bookmarkLevel + 's').map(function (desc) {
        return desc.get('_id');
      });
      this.listenTo(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);
      this.listenToOnce(Adapt, 'remove', this.releaseViews);
      $(window).on('scroll', this._onScroll);
    },
    captureViews: function (view) {
      this.watchViews.push(view);
    },
    setLocationID: function (id) {
      if (!Adapt.offlineStorage) return;
      if (this.currentLocationID == id) return;
      Adapt.offlineStorage.set('location', id);
      this.currentLocationID = id;
    },
    releaseViews: function () {
      this.watchViews.length = 0;
      this.watchViewIds.length = 0;
      this.stopListening(Adapt, 'remove', this.releaseViews);
      this.stopListening(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);
      $(window).off('scroll', this._onScroll);
    },
    checkLocation: function () {
      var highestOnscreen = 0;
      var highestOnscreenLocation = '';

      for (var i = 0, l = this.watchViews.length; i < l; i++) {
        var view = this.watchViews[i];
        var isViewAPageChild = this.watchViewIds.indexOf(view.model.get('_id')) > -1;
        if (!isViewAPageChild) continue;
        var element = $('.' + view.model.get('_id'));
        var measurements = element.onscreen();
        if (!measurements.onscreen) continue;

        if (measurements.percentInview > highestOnscreen) {
          highestOnscreen = measurements.percentInview;
          highestOnscreenLocation = view.model.get('_id');
        }
      }

      if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);
    }
  });
  __AMD("extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking", new Bookmarking());

  var NavigationView$2 = Backbone.View.extend({
    className: 'nav',
    attributes: {
      role: 'navigation'
    },
    initialize: function () {
      this.template = 'languagePickerNavigation';
      this.setupHelpers();
      this.preRender();
    },
    preRender: function () {
      Adapt.trigger('navigationView:preRender', this);
      this.render();
    },
    render: function () {
      var _this = this;

      var template = Handlebars.templates[this.template];
      this.$el.html(template({
        _config: this.model.get('_accessibility'),
        _accessibility: Adapt.config.get('_accessibility')
      })).insertBefore('#app');

      _.defer(function () {
        return Adapt.trigger('navigationView:postRender', _this);
      });

      return this;
    },
    setupHelpers: function () {
      Handlebars.registerHelper('a11y_aria_label', function (text) {
        return "<div class=\"aria-label\">".concat(text, "</div>");
      });
    }
  });
  var NavigationView$3 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavigationView", NavigationView$2);

  var LanguagePickerView = Backbone.View.extend({
    events: {
      'click .js-languagepicker-btn-click': 'onLanguageClick'
    },
    className: 'languagepicker',
    initialize: function () {
      this.initializeNavigation();
      $('html').addClass('in-languagepicker');
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
    },
    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
      this.$el.addClass(data._classes);
      document.title = this.model.get('title') || '';

      _.defer(this.postRender.bind(this));
    },
    postRender: function () {
      $('.js-loading').hide();
    },
    onLanguageClick: function (event) {
      this.destroyNavigation();
      var lang = event.currentTarget.value;
      this.model.setLanguage(lang);
    },
    initializeNavigation: function () {
      this.navigationView = new NavigationView$3({
        model: this.model
      });
    },
    destroyNavigation: function () {
      this.navigationView.remove();
    },
    remove: function () {
      $('html').removeClass('in-languagepicker');
      Backbone.View.prototype.remove.apply(this, arguments);
    }
  }, {
    template: 'languagePickerView'
  });
  var LanguagePickerView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerView", LanguagePickerView);

  var LanguagePickerDrawerView = Backbone.View.extend({
    events: {
      'click .js-languagepicker-item-btn': 'onButtonClick'
    },
    initialize: function () {
      this.listenTo(Adapt, {
        remove: this.remove,
        'languagepicker:changelanguage:yes': this.onDoChangeLanguage,
        'languagepicker:changelanguage:no': this.onDontChangeLanguage
      });
      this.render();
    },
    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
    },
    onButtonClick: function (event) {
      var newLanguage = $(event.currentTarget).attr('data-language');
      this.model.set('newLanguage', newLanguage);
      var data = this.model.getLanguageDetails(newLanguage);
      var promptObject = {
        _attributes: {
          lang: newLanguage
        },
        _classes: "is-lang-".concat(newLanguage, " ").concat(data._direction === 'rtl' ? 'is-rtl' : 'is-ltr'),
        title: data.warningTitle,
        body: data.warningMessage,
        _prompts: [{
          promptText: data._buttons.yes,
          _callbackEvent: 'languagepicker:changelanguage:yes'
        }, {
          promptText: data._buttons.no,
          _callbackEvent: 'languagepicker:changelanguage:no'
        }],
        _showIcon: true
      };
      this.$finishFocus = Adapt.a11y._popup._focusStack.pop();

      Adapt.a11y._popup._focusStack.push($('#a11y-focuser'));

      Adapt.once('drawer:closed', function () {
        _.delay(function () {
          Adapt.once('popup:opened', function () {
            Adapt.a11y._popup._focusStack.pop();

            Adapt.a11y._popup._focusStack.push($('#a11y-focuser'));
          });
          Adapt.notify.prompt(promptObject);
        }, 250);
      });
      Adapt.trigger('drawer:closeDrawer');
    },
    onDoChangeLanguage: function () {
      var newLanguage = this.model.get('newLanguage');
      this.model.setTrackedData();
      this.model.setLanguage(newLanguage);
      this.remove();
    },
    onDontChangeLanguage: function () {
      var _this = this;

      this.remove();

      _.delay(function () {
        return Adapt.a11y.focusFirst(_this.$finishFocus);
      }, 500);
    }
  }, {
    template: 'languagePickerDrawerView'
  });
  var LanguagePickerDrawerView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView", LanguagePickerDrawerView);

  var LanguagePickerNavView = Backbone.View.extend({
    tagName: 'button',
    className: function () {
      var classNames = 'btn-icon nav__btn nav__languagepicker-btn js-languagepicker-nav-btn icon';
      var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';
      return classNames + ' ' + customClass;
    },
    events: {
      'click': 'onClick'
    },
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
    },
    onClick: function (event) {
      Adapt.drawer.triggerCustomView(new LanguagePickerDrawerView$1({
        model: this.model
      }).$el, false);
    }
  });
  var LanguagePickerNavView$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavView", LanguagePickerNavView);

  var LanguagePickerModel = Backbone.Model.extend({
    defaults: {
      _isEnabled: false,
      displayTitle: '',
      body: '',
      _languages: []
    },
    trackedData: {
      components: [],
      blocks: []
    },
    locationId: null,
    initialize: function () {
      this.listenTo(Adapt.config, 'change:_activeLanguage', this.markLanguageAsSelected);
      this.listenTo(Adapt, 'app:dataLoaded', this.onDataLoaded);
    },
    getLanguageDetails: function (language) {
      var _languages = this.get('_languages');

      return _.find(_languages, function (item) {
        return item._language === language;
      });
    },
    setLanguage: function (language) {
      Adapt.config.set({
        _activeLanguage: language,
        _defaultDirection: this.getLanguageDetails(language)._direction
      });
    },
    markLanguageAsSelected: function (model, language) {
      this.get('_languages').forEach(function (item) {
        item._isSelected = item._language === language;
      });
    },
    onDataLoaded: function () {
      var _this = this;

      if (!this.get('_restoreStateOnLanguageChange')) {
        return;
      }

      _.defer(function () {
        _this.locationId = Adapt.offlineStorage.get('location') || null;

        _this.restoreState();
      });
    },
    restoreLocation: function () {
      var _this2 = this;

      if (!Adapt.findById(this.locationId)) return;

      _.defer(function () {
        return Adapt.navigateToElement('.' + _this2.locationId);
      });
    },
    restoreState: function () {
      if (this.isTrackedDataEmpty()) return;

      if (this.trackedData.components) {
        this.trackedData.components.forEach(this.setTrackableState);
      }

      if (this.trackedData.blocks) {
        this.trackedData.blocks.forEach(this.setTrackableState);
      }
    },
    isTrackedDataEmpty: function () {
      return _.isEqual(this.trackedData, {
        components: [],
        blocks: []
      });
    },
    getTrackableState: function () {
      var components = this.getState(Adapt.components.models);
      var blocks = this.getState(Adapt.blocks.models);
      return {
        components: _.compact(components),
        blocks: _.compact(blocks)
      };
    },
    getState: function (models) {
      return models.map(function (model) {
        if (model.get('_isComplete')) {
          return model.getTrackableState();
        }
      });
    },
    setTrackedData: function () {
      if (!this.get('_restoreStateOnLanguageChange')) {
        return;
      }

      this.listenToOnce(Adapt, 'menuView:ready', this.restoreLocation);
      this.trackedData = this.getTrackableState();
    },
    setTrackableState: function (stateObject) {
      var restoreModel = Adapt.findById(stateObject._id);

      if (!restoreModel) {
        Adapt.log.warn('LanguagePicker unable to restore state for: ' + stateObject._id);
        return;
      }

      restoreModel.setTrackableState(stateObject);
    }
  });
  var LanguagePickerModel$1 = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerModel", LanguagePickerModel);

  var languagePickerModel;
  Adapt.once('configModel:dataLoaded', onConfigLoaded);

  function onConfigLoaded() {
    if (!Adapt.config.has('_languagePicker')) return;
    if (!Adapt.config.get('_languagePicker')._isEnabled) return;
    Adapt.config.set('_canLoadData', false);
    languagePickerModel = new LanguagePickerModel$1(Adapt.config.get('_languagePicker'));
    Adapt.on('router:menu router:page', setupNavigationView);

    if (Adapt.offlineStorage.ready) {
      onOfflineStorageReady();
      return;
    }

    Adapt.once('offlineStorage:ready', onOfflineStorageReady);
  }

  function onOfflineStorageReady() {
    var storedLanguage = Adapt.offlineStorage.get('lang');

    if (storedLanguage) {
      languagePickerModel.setLanguage(storedLanguage);
      return;
    }

    if (languagePickerModel.get('_showOnCourseLoad') === false) {
      languagePickerModel.setLanguage(Adapt.config.get('_defaultLanguage'));
      return;
    }

    showLanguagePickerView();
  }

  function showLanguagePickerView() {
    var languagePickerView = new LanguagePickerView$1({
      model: languagePickerModel
    });
    languagePickerView.$el.appendTo('#wrapper');
  }

  function setupNavigationView() {
    var courseGlobals = Adapt.course.get('_globals')._extensions;

    var navigationBarLabel = '';

    if (courseGlobals._languagePicker) {
      navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;
    }

    var languagePickerNavView = new LanguagePickerNavView$1({
      model: languagePickerModel,
      attributes: {
        'aria-label': navigationBarLabel
      }
    });
    languagePickerNavView.$el.appendTo('.nav__inner');
  }

  var Completion = Backbone.Controller.extend({
    subProgressCompleted: 0,
    subProgressTotal: 0,
    nonAssessmentCompleted: 0,
    nonAssessmentTotal: 0,
    assessmentCompleted: 0,
    assessmentTotal: 0
  });

  function calculateCompletion(contentObjectModel) {
    var completion = new Completion();
    var viewType = contentObjectModel.get('_type');
    var isComplete = contentObjectModel.get('_isComplete') ? 1 : 0;
    var children;

    switch (viewType) {
      case 'page':
        children = contentObjectModel.getAllDescendantModels().filter(function (model) {
          return model.get('_isAvailable') && !model.get('_isOptional');
        });
        var availableChildren = filterAvailableChildren(children);
        var components = getPageLevelProgressEnabledModels(availableChildren);
        var nonAssessmentComponents = getNonAssessmentComponents(components);
        completion.nonAssessmentTotal = nonAssessmentComponents.length;
        completion.nonAssessmentCompleted = getComponentsCompleted(nonAssessmentComponents).length;
        var assessmentComponents = getAssessmentComponents(components);
        completion.assessmentTotal = assessmentComponents.length;
        completion.assessmentCompleted = getComponentsInteractionCompleted(assessmentComponents).length;

        if (contentObjectModel.get('_pageLevelProgress')._excludeAssessments !== true) {
          completion.subProgressCompleted = contentObjectModel.get('_subProgressComplete') || 0;
          completion.subProgressTotal = contentObjectModel.get('_subProgressTotal') || 0;
        }

        var showPageCompletionCourse = Adapt.course.get('_pageLevelProgress') && Adapt.course.get('_pageLevelProgress')._showPageCompletion !== false;
        var showPageCompletionPage = contentObjectModel.get('_pageLevelProgress') && contentObjectModel.get('_pageLevelProgress')._showPageCompletion !== false;

        if (showPageCompletionCourse && showPageCompletionPage) {
          completion.nonAssessmentCompleted += isComplete;
          completion.nonAssessmentTotal += 1;
        }

        break;

      case 'menu':
      case 'course':
        children = contentObjectModel.get('_children').models;
        children.forEach(function (contentObject) {
          var completionObject = calculateCompletion(contentObject);
          completion.subProgressCompleted += completionObject.subProgressCompleted || 0;
          completion.subProgressTotal += completionObject.subProgressTotal || 0;
          completion.nonAssessmentTotal += completionObject.nonAssessmentTotal;
          completion.nonAssessmentCompleted += completionObject.nonAssessmentCompleted;
          completion.assessmentTotal += completionObject.assessmentTotal;
          completion.assessmentCompleted += completionObject.assessmentCompleted;
        });
        break;
    }

    return completion;
  }

  function getNonAssessmentComponents(models) {
    return models.filter(function (model) {
      return !model.get('_isPartOfAssessment');
    });
  }

  function getAssessmentComponents(models) {
    return models.filter(function (model) {
      return model.get('_isPartOfAssessment');
    });
  }

  function getComponentsCompleted(models) {
    return models.filter(function (item) {
      return item.get('_isComplete');
    });
  }

  function getComponentsInteractionCompleted(models) {
    return models.filter(function (item) {
      return item.get('_isComplete');
    });
  }

  function getPageLevelProgressEnabledModels(models) {
    return models.filter(function (model) {
      var config = model.get('_pageLevelProgress');
      return config && config._isEnabled;
    });
  }

  function unavailableInHierarchy(parents) {
    if (!parents) return;
    return parents.some(function (parent) {
      return !parent.get('_isAvailable');
    });
  }

  function filterAvailableChildren(children) {
    var availableChildren = [];

    for (var i = 0, count = children.length; i < count; i++) {
      var parents = children[i].getAncestorModels();
      if (unavailableInHierarchy(parents)) continue;
      availableChildren.push(children[i]);
    }

    return availableChildren;
  }

  function calculatePercentageComplete(model) {
    var completionObject = calculateCompletion(model);
    var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;
    var total = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;
    var percentageComplete = Math.floor(completed / total * 100);
    return percentageComplete;
  }

  var completionCalculations = __AMD("extensions/adapt-contrib-pageLevelProgress/js/completionCalculations", {
    calculateCompletion: calculateCompletion,
    calculatePercentageComplete: calculatePercentageComplete,
    getPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,
    filterAvailableChildren: filterAvailableChildren
  });

  var PageLevelProgressIndicatorView = Backbone.View.extend({
    initialize: function (options) {
      options = options || {};
      this.parent = options.parent;
      this.calculatePercentage = options.calculatePercentage || this.calculatePercentage;
      this.ariaLabel = options.ariaLabel || '';
      this.type = options.type || this.model.get('_type');
      this.addClasses();
      this.setUpEventListeners();
      this.setPercentageComplete();
      this.render();
      this.refresh();
    },
    addClasses: function () {
      this.$el.addClass(['pagelevelprogress__indicator', 'is-' + this.type].join(' '));
    },
    checkAria: function () {
      if (!this.ariaLabel) {
        this.$el.attr('aria-hidden', true);
        return;
      }

      var data = this.getRenderData();
      this.$('.js-indicator-aria-label').html(Handlebars.compile(this.ariaLabel)(data));
    },
    setUpEventListeners: function () {
      if (this.parent) {
        this.listenToOnce(this.parent, 'postRemove', this.remove);
      } else {
        this.listenTo(Adapt, 'remove', this.remove);
      }

      this.listenTo(this.model, 'change:_isComplete', this.refresh);
      if (!this.collection) return;
      this.listenTo(this.collection, 'change:_isComplete', this.refresh);
    },
    setPercentageComplete: function () {
      var percentage = this.calculatePercentage();
      this.model.set('percentageComplete', percentage);
      return percentage;
    },
    calculatePercentage: function () {
      return this.model.get('_isComplete') ? 100 : 0;
    },
    render: function () {
      var data = this.getRenderData();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
    },
    getRenderData: function () {
      var data = this.model.toJSON();
      data.ariaLabel = this.ariaLabel;
      data.type = this.type;
      return data;
    },
    refresh: function () {
      this.checkCompletion();
      this.checkAria();
      this.$('.js-indicator-bar').css({
        width: this.calculatePercentage() + '%'
      });
    },
    checkCompletion: function () {
      var percentage = this.setPercentageComplete();
      this.$el.toggleClass('is-complete', percentage === 100).toggleClass('is-incomplete', percentage !== 100);
    }
  }, {
    template: 'pageLevelProgressIndicator'
  });
  var PageLevelProgressIndicatorView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView", PageLevelProgressIndicatorView);

  var PageLevelProgressItemView = Backbone.View.extend({
    className: function () {
      return ['pagelevelprogress__item drawer__item', this.model.get('_type') + '__indicator'].join(' ');
    },
    attributes: {
      'role': 'listitem'
    },
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
      this.addIndicator();
    },
    render: function () {
      var data = this.model.toJSON();
      var template = Handlebars.templates[this.constructor.template];
      this.$el.html(template(data));
    },
    addIndicator: function () {
      if (this.model.get('_isOptional')) return;
      var item = new PageLevelProgressIndicatorView$1({
        model: this.model
      });
      this.$('.js-indicator').append(item.$el);
    }
  }, {
    template: 'pageLevelProgressItem'
  });
  var PageLevelProgressItemView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView", PageLevelProgressItemView);

  var PageLevelProgressView = Backbone.View.extend({
    className: 'pagelevelprogress',
    events: {
      'click .js-pagelevelprogress-item-click': 'scrollToPageElement'
    },
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
      this.addChildren();
    },
    scrollToPageElement: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
        var $target, id, model, currentComponentSelector;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (event && event.preventDefault) event.preventDefault();
                $target = $(event.currentTarget);

                if (!$target.is('.is-disabled')) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return");

              case 4:
                id = $target.attr('data-pagelevelprogress-id');
                model = Adapt.findById(id);

                if (model.get('_isRendered')) {
                  _context.next = 15;
                  break;
                }

                _context.prev = 7;
                _context.next = 10;
                return Adapt.parentView.renderTo(id);

              case 10:
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](7);
                return _context.abrupt("return");

              case 15:
                currentComponentSelector = '.' + id;
                Adapt.once('drawer:closed', function () {
                  Adapt.scrollTo(currentComponentSelector, {
                    duration: 400
                  });
                }).trigger('drawer:closeDrawer', $(currentComponentSelector));

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[7, 12]]);
      }));

      return function scrollToPageElement(_x) {
        return _ref.apply(this, arguments);
      };
    }(),
    render: function () {
      var template = Handlebars.templates['pageLevelProgress'];
      this.$el.html(template({}));
    },
    addChildren: function () {
      var $children = this.$('.js-children');
      this.collection.each(function (model) {
        $children.append(new PageLevelProgressItemView$1({
          model: model
        }).$el);
      }.bind(this));
    }
  });
  var PageLevelProgressView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView", PageLevelProgressView);

  var PageLevelProgressNavigationView = Backbone.View.extend({
    tagName: 'button',
    className: 'btn-icon nav__btn nav__pagelevelprogress-btn pagelevelprogress__nav-btn',
    events: {
      'click': 'onProgressClicked'
    },
    initialize: function () {
      _.bindAll(this, 'updateProgressBar');

      this.setUpEventListeners();
      this.render();
      this.addIndicator();
      this.deferredUpdate();
    },
    setUpEventListeners: function () {
      this.listenTo(Adapt, {
        'remove': this.remove,
        'router:location': this.updateProgressBar,
        'view:childAdded pageLevelProgress:update': this.refreshProgressBar
      });
    },
    render: function () {
      var template = Handlebars.templates['pageLevelProgressNavigation'];
      this.$el.html(template({}));
    },
    addIndicator: function () {
      this.indicatorView = new PageLevelProgressIndicatorView$1({
        model: this.model,
        collection: this.collection,
        calculatePercentage: this._getPageCompletionPercentage,
        ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar
      });
      this.$el.prepend(this.indicatorView.$el);
    },
    _getPageCompletionPercentage: function () {
      return completionCalculations.calculatePercentageComplete(this.model);
    },
    deferredUpdate: function () {
      _.defer(this.updateProgressBar);
    },
    updateProgressBar: function () {
      this.indicatorView.refresh();
    },
    refreshProgressBar: function () {
      this.collection.repopulate();
      this.updateProgressBar();
    },
    onProgressClicked: function (event) {
      if (event && event.preventDefault) event.preventDefault();
      Adapt.drawer.triggerCustomView(new PageLevelProgressView$1({
        collection: this.collection
      }).$el, false);
    },
    remove: function () {
      Backbone.View.prototype.remove.call(this);
      this.collection.reset();
    }
  });
  var PageLevelProgressNavigationView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView", PageLevelProgressNavigationView);

  var PageLevelProgressCollection = Backbone.Collection.extend({
    initialize: function (models, options) {
      this.listenTo(Adapt, 'remove', this.reset);
      if (!options || !options.pageModel) return;
      this._pageModel = options.pageModel;
      this.repopulate();
    },
    repopulate: function () {
      this.reset();
      if (!this._pageModel) return;

      var allDescendants = this._pageModel.getAllDescendantModels(true);

      var currentPageItems = allDescendants.filter(function (item) {
        return item.get('_isAvailable') === true;
      });
      var availableItems = completionCalculations.filterAvailableChildren(currentPageItems);
      var enabledProgressItems = completionCalculations.getPageLevelProgressEnabledModels(availableItems);
      this.add(enabledProgressItems);
    }
  });
  var PageLevelProgressCollection$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection", PageLevelProgressCollection);

  var PageLevelProgress = Backbone.Controller.extend({
    initialize: function () {
      Adapt.on({
        'app:dataReady': this.onDataReady.bind(this),
        'app:languageChanged': function () {
          this.stopListening();
        }.bind(this)
      });
    },
    getCourseConfig: function () {
      return Adapt.course.get('_pageLevelProgress');
    },
    onDataReady: function () {
      var coursePLPConfig = this.getCourseConfig();

      if (!coursePLPConfig || !coursePLPConfig._isEnabled) {
        return;
      }

      this.setUpEventListeners();
    },
    setUpEventListeners: function () {
      var headerIndicatorTypes = ['menu', 'menuItem', 'page', 'article', 'block', 'component'];
      var headerIndicatorEventNames = headerIndicatorTypes.concat(['']).join('View:render ');
      this.listenTo(Adapt, headerIndicatorEventNames, this.renderHeaderIndicatorView);
      this.listenTo(Adapt, {
        'menuItemView:postRender': this.renderMenuItemIndicatorView,
        'router:page': this.renderNavigationView
      });
      this.listenTo(Adapt.course, 'bubble:change:_isComplete', this.onCompletionChange);
    },
    onCompletionChange: function (event) {
      if (!Adapt.location._currentId) return;
      var currentModel = Adapt.findById(Adapt.location._currentId);
      var completionState = {
        currentLocation: completionCalculations.calculatePercentageComplete(currentModel),
        course: completionCalculations.calculatePercentageComplete(Adapt.course)
      };
      var hasChanged = !_.isMatch(this._previousCompletionState, completionState);
      if (!hasChanged) return;
      this._previousCompletionState = completionState;
      Adapt.trigger('pageLevelProgress:percentageCompleteChange', completionState);
    },
    renderHeaderIndicatorView: function (view) {
      var model = view.model;
      var config = model.get('_pageLevelProgress');

      if (!config || !config._isEnabled || !config._isCompletionIndicatorEnabled) {
        return;
      }

      var pageModel = model.findAncestor('contentObjects');
      var pageConfig = pageModel && pageModel.get('_pageLevelProgress');

      if (pageConfig && !pageConfig._isEnabled) {
        return;
      }

      var $headings = view.$('.js-heading');
      $headings.each(function (index, el) {
        var $el = $(el);
        var indicatorView = new PageLevelProgressIndicatorView$1({
          parent: view,
          model: model
        });
        indicatorView.$el.insertAfter($el);
      });
    },
    renderMenuItemIndicatorView: function (view) {
      if (view.model.get('_id') === Adapt.location._currentId) {
        return;
      }

      var viewType = view.model.get('_type');

      if (viewType === 'course') {
        return;
      }

      var pageLevelProgress = view.model.get('_pageLevelProgress');

      if (!pageLevelProgress || !pageLevelProgress._isEnabled) {
        return;
      }

      view.$el.find('.js-menu-item-progress').append(new PageLevelProgressIndicatorView$1({
        parent: view,
        model: view.model,
        type: 'menu-item',
        calculatePercentage: this._getMenuItemCompletionPercentage.bind(view),
        ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar
      }).$el);
    },
    _getMenuItemCompletionPercentage: function () {
      return completionCalculations.calculatePercentageComplete(this.model);
    },
    renderNavigationView: function (pageModel) {
      var coursePLPConfig = this.getCourseConfig();

      if (coursePLPConfig && coursePLPConfig._isShownInNavigationBar === false) {
        return;
      }

      var pagePLPConfig = pageModel.get('_pageLevelProgress');

      if (!pagePLPConfig || !pagePLPConfig._isEnabled) {
        return;
      }

      var collection = new PageLevelProgressCollection$1(null, {
        pageModel: pageModel
      });

      if (collection.length === 0) {
        return;
      }

      $('.nav__drawer-btn').after(new PageLevelProgressNavigationView$1({
        model: pageModel,
        collection: collection
      }).$el);
    }
  });
  Adapt.pageLevelProgress = new PageLevelProgress();

  var ResourcesView = Backbone.View.extend({
    className: 'resources',
    initialize: function () {
      this.listenTo(Adapt, 'remove', this.remove);
      this.render();
    },
    events: {
      'click .js-resources-filter-btn-click': 'onFilterClicked'
    },
    render: function () {
      this.$el.html(Handlebars.templates.resources({
        model: this.model.toJSON(),
        resources: this.collection.toJSON()
      }));

      _.defer(function () {
        this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);
      }.bind(this));

      return this;
    },
    onFilterClicked: function (e) {
      if (e && e.preventDefault) e.preventDefault();
      this.$('.js-resources-filter-btn-click').removeClass('is-selected');
      var items;
      var filter = $(e.currentTarget).addClass('is-selected').attr('data-filter');

      if (filter === 'all') {
        items = this.$('.js-resources-item').removeClass('u-display-none');
      } else {
        this.$('.js-resources-item').removeClass('u-display-none').not('.is-' + filter).addClass('u-display-none');
        items = this.$('.js-resources-item.is-' + filter);
      }

      if (items.length > 0) $(items[0]).a11y_focus();
    }
  });
  var ResourcesView$1 = __AMD("extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView", ResourcesView);

  var helpers$1 = {
    resources_has_type: function (resources, type, block) {
      var hasType = resources.some(_.matcher({
        _type: type
      }));
      return hasType ? block.fn(this) : block.inverse(this);
    },
    resources_has_multiple_types: function (resources, block) {
      if (resources.length === 1) return block.inverse(this);
      var allSameType = resources.every(_.matcher({
        _type: resources[0]._type
      }));
      return allSameType ? block.inverse(this) : block.fn(this);
    },
    resources_get_column_count: function (resources) {
      return _.uniq(_.pluck(resources, '_type')).length + 1;
    },
    resources_force_download: function (resource, block) {
      if (Adapt.device.browser === 'internet explorer' || Adapt.device.OS === 'ios') {
        return block.inverse(this);
      }

      return resource._forceDownload || resource.filename ? block.fn(this) : block.inverse(this);
    }
  };

  for (var name$1 in helpers$1) {
    Handlebars__default['default'].registerHelper(name$1, helpers$1[name$1]);
  }

  __AMD("extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers", helpers$1);

  function setupResources(resourcesData) {
    var resourcesModel = new Backbone.Model(resourcesData);
    var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));
    Adapt.on('resources:showResources', function () {
      Adapt.drawer.triggerCustomView(new ResourcesView$1({
        model: resourcesModel,
        collection: resourcesCollection
      }).$el);
    });
  }

  function initResources() {
    var courseResources = Adapt.course.get('_resources');
    if (!courseResources || courseResources._isEnabled === false) return;
    var drawerObject = {
      title: courseResources.title,
      description: courseResources.description,
      className: 'is-resources',
      drawerOrder: courseResources._drawerOrder || 0
    };
    Adapt.drawer.addItem(drawerObject, 'resources:showResources');
    setupResources(courseResources);
  }

  Adapt.on('adapt:start', initResources);

  var TrickleView = Backbone.View.extend({
    isSteplocked: false,
    completionAttribute: null,
    initialize: function (options) {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      var AdaptEvents = {
        "trickle:kill": this.onKill,
        "remove": this.onRemove
      };
      this.onPreRender(this);
      AdaptEvents[this.model.get("_type") + "View:postRender"] = this.onPostRender;
      this.listenTo(Adapt, AdaptEvents);
      this.on("steplock", this.onStepLock);
      this.on("stepunlock", this.onStepUnlock);
    },
    onPreRender: function (view) {
      this.completionAttribute = Adapt.trickle.getCompletionAttribute();
      if (!this.isElementEnabled()) return;
      Adapt.trigger("trickle:preRender", this);
    },
    onPostRender: function (view) {
      if (view.model.get("_id") !== this.model.get("_id")) return;
      if (!this.isElementEnabled()) return;
      Adapt.trigger("trickle:postRender", this);
    },
    isElementEnabled: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!trickle) return false;
      if (this.model.get(this.completionAttribute)) return false;

      var isArticleWithOnChildren = this.model.get("_type") === "article" && trickle._onChildren;

      if (isArticleWithOnChildren) {
        return false;
      }

      if (trickle._isEnabled === true) return true;
      return false;
    },
    onStepLock: function () {
      if (!this.isElementEnabled()) {
        this.continueToNext();
        return;
      }

      var trickle = Adapt.trickle.getModelConfig(this.model);
      var isSteplocking = trickle._stepLocking && trickle._stepLocking._isEnabled;

      if (!isSteplocking) {
        this.continueToNext();
        return;
      }

      Adapt.trigger("trickle:steplock", this);
      this.isSteplocked = true;
    },
    continueToNext: function () {
      Adapt.trigger("trickle:continue", this);
    },
    onStepUnlock: function () {
      if (!this.isSteplocked) return;
      this.isSteplocked = false;
      Adapt.trigger("trickle:stepunlock", this);
    },
    onKill: function () {
      this.detachFromElement();
    },
    onRemove: function () {
      this.detachFromElement();
    },
    detachFromElement: function () {
      this.undelegateEvents();
      this.stopListening();
      this.model = null;
      this.articleModel = null;
      this.$el = null;
      this.el = null;
    }
  });
  var TrickleView$1 = __AMD("extensions/adapt-contrib-trickle/js/trickleView", TrickleView);

  var PageView$1 = Backbone.View.extend({
    currentDescendantIndex: 0,
    currentLocksOnDescendant: 0,
    currentDescendant: null,
    initialize: function (options) {
      if (!this.isPageEnabled()) {
        return this.detachFromPage();
      }

      this.setupDescendants();

      if (!this.haveDescendantsGotTrickle()) {
        return this.detachFromPage();
      }

      this.addClassToHtml();
      this.setupEventListeners();
    },
    isPageEnabled: function () {
      var trickleConfig = Adapt.trickle.getModelConfig(this.model);
      if (trickleConfig && trickleConfig._isEnabled === false) return false;
      return true;
    },
    setupDescendants: function () {
      this.currentDescendant = null;
      this.descendantViews = {};
      this.getDescendants();
      Adapt.trigger("trickle:descendants", this);
    },
    descendantsChildFirst: null,
    descendantsParentFirst: null,
    descendantViews: null,
    getDescendants: function () {
      this.descendantsChildFirst = this.model.getAllDescendantModels();
      this.descendantsParentFirst = this.model.getAllDescendantModels(true);
      this.setDescendantsTrickleDefaults();
      this.descendantsChildFirst = this.filterComponents(this.descendantsChildFirst);
      this.descendantsParentFirst = this.filterComponents(this.descendantsParentFirst);
    },
    filterComponents: function (descendants) {
      return descendants.filter(function (descendant) {
        if (descendant.get("_type") === "component") return false;
        if (!descendant.get("_isAvailable")) return false;
        return true;
      });
    },
    setDescendantsTrickleDefaults: function () {
      this.descendantsParentFirst.forEach(function (descendant) {
        var trickle = Adapt.trickle.getModelConfig(descendant);

        if (!trickle) {
          return;
        }

        trickle._stepLocking = _.extend({
          "_isEnabled": true,
          "_isCompletionRequired": true,
          "_isLockedOnRevisit": false
        }, trickle._stepLocking);
        trickle = _.extend({
          "_isEnabled": true,
          "_autoScroll": true,
          "_scrollDuration": 500,
          "_onChildren": true,
          "_scrollTo": "@block +1"
        }, trickle);
        Adapt.trickle.setModelConfig(descendant, trickle);

        if (trickle._onChildren && descendant.get("_type") === "article") {
          this.setupArticleOnChildren(descendant, trickle);
        }

        descendant.set("_isTrickleConfigured", true);
      }.bind(this));
    },
    setupArticleOnChildren: function (articleModel, articleTrickleConfig) {
      var articleBlocks = articleModel.getChildren();
      articleBlocks.each(function (blockModel, index) {
        var blockTrickleConfig = Adapt.trickle.getModelConfig(blockModel);

        for (var k in blockTrickleConfig) {
          if (_typeof(blockTrickleConfig[k]) === "object") {
            blockTrickleConfig[k] = _.extend({}, articleTrickleConfig[k], blockTrickleConfig[k]);
          }
        }

        blockTrickleConfig = _.extend({}, articleTrickleConfig, blockTrickleConfig);

        if (articleBlocks.length === index + 1) {
          blockTrickleConfig._isFinal = true;
        }

        if (index === 0) {
          blockTrickleConfig._isStart = true;
        }

        Adapt.trickle.setModelConfig(blockModel, blockTrickleConfig);
      });
    },
    haveDescendantsGotTrickle: function () {
      return this.descendantsChildFirst.some(function (descendant) {
        var trickle = Adapt.trickle.getModelConfig(descendant);
        return trickle && trickle._isEnabled === true;
      });
    },
    addClassToHtml: function () {
      $("html").addClass("trickle");
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "remove": this.onRemove,
        "articleView:preRender": this.onDescendantPreRender,
        "blockView:preRender": this.onDescendantPreRender,
        "trickle:unwait": this.onUnwait,
        "trickle:wait": this.onWait,
        "trickle:continue": this.onContinue,
        "trickle:skip": this.onSkip,
        "trickle:kill": this.onKill
      });
      this.listenToOnce(this.model, "change:_isReady", this.onPageReady);
    },
    onDescendantPreRender: function (view) {
      if (view.model.get("_type") === "component") return;
      var descendantView = new TrickleView$1({
        model: view.model,
        el: view.el
      });
      this.descendantViews[view.model.get("_id")] = descendantView;
    },
    onPageReady: function (model, value) {
      if (!value) return;
      this.currentDescendant = null;
      Adapt.trigger("trickle:started");
      this.gotoNextDescendant();
    },
    gotoNextDescendant: function () {
      this.getDescendants();

      if (this.currentDescendant) {
        this.currentDescendant.trigger("stepunlock");
        this.currentDescendant = null;
      }

      for (var index = this.currentDescendantIndex || 0, l = this.descendantsChildFirst.length; index < l; index++) {
        var descendant = this.descendantsChildFirst[index];

        switch (descendant.get("_type")) {
          case "block":
          case "article":
            this.currentLocksOnDescendant = 0;
            this.currentDescendantIndex = index;
            var currentId = descendant.get("_id");
            this.currentDescendant = this.descendantViews[currentId];
            this.currentDescendant.trigger("steplock");
            return;
        }
      }

      this.finished();
    },
    onContinue: function (view) {
      if (!this.currentDescendant) return;
      if (view.model.get("_id") !== this.currentDescendant.model.get("_id")) return;
      this.onSkip();
    },
    onWait: function () {
      this.currentLocksOnDescendant++;
    },
    onUnwait: function () {
      this.currentLocksOnDescendant--;
      if (this.currentLocksOnDescendant > 0) return;
      var lastDescendant = this.currentDescendant.model;
      this.currentDescendantIndex++;
      this.gotoNextDescendant();
      Adapt.trickle.scroll(lastDescendant);
    },
    onSkip: function () {
      this.currentDescendantIndex++;
      this.gotoNextDescendant();
    },
    onKill: function () {
      this.finished();
      this.detachFromPage();
    },
    finished: function () {
      Adapt.trigger("trickle:finished");
      this.detachFromPage();
    },
    onRemove: function () {
      this.finished();
    },
    detachFromPage: function () {
      $("html").removeClass("trickle");
      this.undelegateEvents();
      this.stopListening();
      this.model = null;
      this.$el = null;
      this.el = null;
      this.currentDescendant = null;
      this.descendantViews = null;
      this.descendantsChildFirst = null;
      this.descendantsParentFirst = null;
      Adapt.trickle.pageView = null;
    }
  });
  var PageView$2 = __AMD("extensions/adapt-contrib-trickle/js/pageView", PageView$1);

  var completionAttribute = "_isComplete";
  var TrickleButtonView = Backbone.View.extend({
    isStepLocking: false,
    hasStepLocked: false,
    isStepLocked: false,
    isStepLockFinished: false,
    hasStepPreCompleted: false,
    isWaitingForClick: false,
    allowVisible: false,
    allowEnabled: true,
    overlayShownCount: 0,
    el: function () {
      this.setupPreRender();
      return Handlebars.templates['trickle-button'](this.model.toJSON());
    },
    setupPreRender: function () {
      this.setupButtonVisible();
      this.setupButtonEnabled();
    },
    setupButtonVisible: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      this.allowVisible = false;
      trickle._button._isVisible = false;

      if (trickle._button._styleBeforeCompletion === "visible") {
        this.allowVisible = true;

        if (trickle._button._autoHide && trickle._button._isFullWidth) {
          trickle._button._isVisible = false;
        } else {
          trickle._button._isVisible = true;
        }
      }
    },
    setupButtonEnabled: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);

      if (trickle._stepLocking._isCompletionRequired === false) {
        this.allowEnabled = true;
        trickle._button._isDisabled = false;
      } else if (trickle._button._styleBeforeCompletion === "visible") {
        this.allowEnabled = false;
        trickle._button._isDisabled = true;
      } else {
        trickle._button._isDisabled = false;
        this.allowEnabled = true;
      }
    },
    events: {
      "click .js-trickle-btn": "onButtonClick"
    },
    initialize: function (options) {
      this.getCompletionAttribute();
      this.debounceCheckAutoHide();
      this.setupStepLocking();
      this.setupEventListeners();
    },
    getCompletionAttribute: function () {
      var trickle = Adapt.trickle.getModelConfig(Adapt.config);
      if (!trickle) return;
      if (!trickle._completionAttribute) return;
      completionAttribute = trickle._completionAttribute;
    },
    setupStepLocking: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      this.isStepLocked = Boolean(trickle._stepLocking._isEnabled);
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:overlay": this.onOverlay,
        "trickle:unoverlay": this.onUnoverlay,
        "trickle:steplock": this.onStepLock,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:skip": this.onSkip,
        "trickle:kill": this.onKill,
        "trickle:update": this.onUpdate,
        "remove": this.onRemove
      });
      this.listenTo(this.model, "change:" + completionAttribute, this.onCompletion);
    },
    debounceCheckAutoHide: function () {
      this.checkButtonAutoHideSync = this.checkButtonAutoHide.bind(this);
      this.checkButtonAutoHide = _.debounce(this.checkButtonAutoHideSync, 100);
    },
    checkButtonAutoHide: function () {
      if (!this.allowVisible) {
        this.setButtonVisible(false);
        return;
      }

      var trickle = Adapt.trickle.getModelConfig(this.model);

      if (!trickle._button._autoHide) {
        this.setButtonVisible(true);
        return;
      } else if (this.overlayShownCount > 0) {
        this.setButtonVisible(false);
        return;
      }

      var measurements = this.$el.onscreen();
      var isJustOffscreen = measurements.bottom > -100;

      if (measurements.onscreen || isJustOffscreen) {
        this.setButtonVisible(true);
      } else {
        this.setButtonVisible(false);
      }
    },
    setButtonVisible: function (isVisible) {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      trickle._button._isVisible = Boolean(isVisible);
      this.$(".js-trickle-btn-container").toggleClass("u-display-none", !trickle._button._isVisible);
    },
    checkButtonEnabled: function () {
      this.setButtonEnabled(this.allowEnabled);
    },
    setButtonEnabled: function (isEnabled) {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      var $button = this.$(".js-trickle-btn");

      if (isEnabled) {
        $button.removeClass("is-disabled").removeAttr("disabled");
        trickle._button._isDisabled = true;

        if (document.activeElement instanceof HTMLElement && document.activeElement.isSameNode(this.$('.aria-label')[0])) {
          this.$('.aria-label').focusNext();
        }

        this.$('.aria-label').a11y_cntrl(false);
      } else {
        $button.addClass("is-disabled").attr("disabled", "disabled");
        trickle._button._isDisabled = false;
      }
    },
    onStepLock: function (view) {
      if (!this.isViewMatch(view)) return;
      this.hasStepLocked = true;
      this.isStepLocking = true;
      this.overlayShownCount = 0;
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!this.isButtonEnabled()) return;
      var isCompleteAndShouldRelock = trickle._stepLocking._isLockedOnRevisit && this.model.get(completionAttribute);

      if (isCompleteAndShouldRelock) {
        this.isStepLocked = true;
        this.model.set("_isTrickleAutoScrollComplete", false);
        Adapt.trigger("trickle:wait");
        this.allowVisible = true;
        this.checkButtonAutoHide();
      } else if (this.hasStepPreCompleted) {
        this.isStepLocked = true;
        this.model.set("_isTrickleAutoScrollComplete", false);
        this.allowVisible = true;
        this.stepCompleted();
      }

      this.setupOnScreenListener();
    },
    onOverlay: function () {
      this.overlayShownCount++;
    },
    onUnoverlay: function () {
      this.overlayShownCount--;
      this.checkButtonAutoHide();
    },
    setupOnScreenListener: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!trickle._button._autoHide) return;
      this.$el.on("onscreen", this.checkButtonAutoHideSync);
    },
    isViewMatch: function (view) {
      return view.model.get("_id") === this.model.get("_id");
    },
    isButtonEnabled: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);
      if (!trickle._isEnabled || !trickle._button._isEnabled) return false;
      return true;
    },
    onCompletion: function (model, value) {
      if (value === false) return;
      this.hasStepPreCompleted = true;
      if (!this.hasStepLocked) return;
      this.stepCompleted();
    },
    stepCompleted: function () {
      if (this.isStepLockFinished) return;
      this.isStepLocked = false;
      this.allowVisible = false;
      this.allowEnabled = false;

      if (this.isButtonEnabled()) {
        if (this.isStepLocking) {
          this.isStepLocked = true;
          this.isWaitingForClick = true;
          Adapt.trigger("trickle:wait");
        } else {
          this.isStepLockFinished = true;
        }

        this.allowVisible = true;
        this.allowEnabled = true;
      }

      this.model.set("_isTrickleAutoScrollComplete", false);
      this.checkButtonAutoHideSync();
      this.checkButtonEnabled();
    },
    onButtonClick: function () {
      if (this.isStepLocked) {
        Adapt.trigger("trickle:unwait");
        this.isStepLocked = false;
        this.isStepLockFinished = true;
      } else {
        this.model.set("_isTrickleAutoScrollComplete", false);
        Adapt.trickle.scroll(this.model);
      }

      var trickle = this.model.get("_trickle");

      switch (trickle._button._styleAfterClick) {
        case "hidden":
          this.allowVisible = false;
          this.checkButtonAutoHideSync();
          break;

        case "disabled":
          this.allowEnabled = false;
          this.checkButtonAutoHideSync();
      }
    },
    onUpdate: function () {
      var trickle = Adapt.trickle.getModelConfig(this.model);

      if (trickle._button._autoHide && this.isStepLocking) {
        this.$el.off("onscreen", this.checkButtonAutoHideSync);
      }

      var $original = this.$el;
      var $newEl = $(Handlebars.templates['trickle-button'](this.model.toJSON()));
      $original.replaceWith($newEl);
      this.setElement($newEl);

      if (trickle._button._autoHide && this.isStepLocking) {
        this.$el.on("onscreen", this.checkButtonAutoHideSync);
      }
    },
    onStepUnlock: function (view) {
      if (!this.isViewMatch(view)) return;
      this.$el.off("onscreen", this.checkButtonAutoHideSync);
      this.isStepLocking = false;
      this.overlayShownCount = 0;

      if (document.activeElement instanceof HTMLElement && document.activeElement.isSameNode(this.$('.aria-label')[0])) {
        this.$('.aria-label').focusNext();
      }

      this.$('.aria-label').a11y_cntrl(false);
    },
    onSkip: function () {
      if (!this.isStepLocking) return;
      this.onKill();
    },
    onKill: function () {
      this.$el.off("onscreen", this.checkButtonAutoHideSync);

      if (this.isWaitingForClick) {
        this.model.set("_isTrickleAutoScrollComplete", true);
      }

      this.isWaitingForClick = false;
      this.isStepLocked = false;
      this.isStepLocking = false;
      this.allowVisible = false;
      this.allowEnabled = false;
      this.isStepLockFinished = true;
      this.model.set("_isTrickleAutoScrollComplete", false);
      this.checkButtonAutoHide();
      this.checkButtonEnabled();
    },
    onRemove: function () {
      if (this.isWaitingForClick) {
        this.model.set("_isTrickleAutoScrollComplete", true);
      }

      this.isWaitingForClick = false;
      this.$el.off("onscreen", this.checkButtonAutoHideSync);
      this.isStepLocking = true;
      this.remove();
    }
  });
  var ButtonView = __AMD("extensions/adapt-contrib-trickle/js/handlers/buttonView", TrickleButtonView);

  var TrickleButtonHandler = Backbone.Controller.extend({
    buttonViews: null,
    initialize: function () {
      this.listenToOnce(Adapt, {
        'app:dataReady': this.onAppDataReady,
        remove: this.onRemove
      });
    },
    onAppDataReady: function () {
      this.buttonViews = {};
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        'trickle:preRender': this.onPreRender,
        'trickle:postRender': this.onPostRender
      });
    },
    onPreRender: function (view) {
      if (!this.isTrickleEnabled(view.model)) return;
      this.setupConfigDefaults(view.model);
      this.buttonViews[view.model.get('_id')] = new ButtonView({
        model: view.model
      });
    },
    onPostRender: function (view) {
      if (!this.isTrickleEnabled(view.model)) return;
      view.$el.append(this.buttonViews[view.model.get('_id')].$el);
    },
    isTrickleEnabled: function (model) {
      var trickle = Adapt.trickle.getModelConfig(model);
      if (!trickle || !trickle._isEnabled) return false;
      if (trickle._onChildren && model.get('_type') === 'article') return false;
      return true;
    },
    setupConfigDefaults: function (model) {
      if (model.get('_isTrickleButtonConfigured')) return;
      var defaults = {
        _isEnabled: true,
        _styleBeforeCompletion: 'hidden',
        _styleAfterClick: 'hidden',
        _isFullWidth: true,
        _autoHide: false,
        _className: '',
        _hasIcon: false,
        text: 'Continue',
        startText: 'Begin',
        finalText: 'Finish',
        _component: 'trickle-button',
        _isLocking: true,
        _isVisible: false,
        _isDisabled: false
      };
      var trickle = Adapt.trickle.getModelConfig(model);
      trickle._button = _.extend(defaults, trickle._button);

      if (trickle._button._isFullWidth) {
        trickle._stepLocking._isEnabled = true;
        trickle._button._styleAfterClick = 'hidden';
      } else {
        trickle._button._autoHide = false;
      }

      Adapt.trickle.setModelConfig(model, trickle);
      model.set('_isTrickleButtonConfigured', true);
    },
    onRemove: function () {
      this.buttonViews = {};
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/button", new TrickleButtonHandler());

  var completionAttribute$1 = "_isComplete";
  var TrickleCompletionHandler = Backbone.Controller.extend({
    isStepLocking: false,
    isCompleted: false,
    stepModel: null,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.getCompletionAttribute();
      this.setupEventListeners();
    },
    getCompletionAttribute: function () {
      var trickle = Adapt.trickle.getModelConfig(Adapt.config);
      if (!trickle) return;
      if (!trickle._completionAttribute) return;
      completionAttribute$1 = trickle._completionAttribute;
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:descendants": this.onDescendants,
        "trickle:steplock": this.onStepLock,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:kill": this.onKill,
        "remove": this.onRemove
      });
    },
    onDescendants: function (view) {
      view.descendantsParentFirst.forEach(function (descendant) {
        var trickle = Adapt.trickle.getModelConfig(descendant);
        if (!trickle) return;
        trickle._wasCompletedPreRender = descendant.get(completionAttribute$1);
      });
    },
    onStepLock: function (view) {
      var isModelComplete = view.model.get(completionAttribute$1);
      var trickle = Adapt.trickle.getModelConfig(view.model);

      if (!trickle._stepLocking._isCompletionRequired && !trickle._stepLocking._isLockedOnRevisit) {
        if (!isModelComplete) return;
        Adapt.trigger("trickle:continue", view);
        return;
      }

      if (trickle._stepLocking._isCompletionRequired && isModelComplete && trickle._wasCompletedPreRender) {
        Adapt.trigger("trickle:continue", view);
        return;
      }

      Adapt.trigger("trickle:wait");

      if (isModelComplete) {
        Adapt.trigger("trickle:unwait");
        return;
      }

      view.model.set("_isTrickleAutoScrollComplete", false);
      this.isCompleted = false;
      this.isStepLocking = true;
      this.stepModel = view.model;
      this.listenTo(this.stepModel, "change:" + completionAttribute$1, this.onCompletion);
    },
    onCompletion: function (model, value) {
      if (value === false) return;
      this.stepCompleted();
    },
    stepCompleted: function () {
      if (!this.isStepLocking) return;
      if (this.isCompleted) return;
      this.isCompleted = true;
      this.stopListening(this.stepModel, "change:" + completionAttribute$1, this.onCompletion);
      Adapt.trigger("trickle:unwait");
    },
    onKill: function () {
      this.onStepUnlock();
    },
    onRemove: function () {
      this.onStepUnlock();
    },
    onStepUnlock: function () {
      this.stopListening(this.stepModel, "change:" + completionAttribute$1, this.onCompletion);
      this.isStepLocking = false;
      this.stepModel = null;
      this.isCompleted = false;
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/completion", new TrickleCompletionHandler());

  var TrickleNotifyHandler = Backbone.Controller.extend({
    isStepLocking: false,
    isNotifyOpen: false,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "notify:opened": this.onNotifyOpened,
        "notify:closed": this.onNotifyClosed,
        "trickle:stepunlock": this.onStepUnlock,
        "remove": this.onRemove
      });
    },
    onStepLock: function (view) {
      this.isStepLocking = true;
    },
    onNotifyOpened: function () {
      if (!this.isStepLocking) return;
      this.isNotifyOpen = true;
      Adapt.trigger("trickle:overlay");
      Adapt.trigger("trickle:wait");
    },
    onNotifyClosed: function () {
      if (!this.isStepLocking) return;
      if (!this.isNotifyOpen) return;
      this.isNotifyOpen = false;
      Adapt.trigger("trickle:unoverlay");
      Adapt.trigger("trickle:unwait");
    },
    onStepUnlock: function () {
      this.isStepLocking = false;
    },
    onRemove: function () {
      this.onStepUnlock();
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/notify", new TrickleNotifyHandler());

  var TrickleBodyResizeHandler = Backbone.Controller.extend({
    isStepLocking: false,
    stepView: null,
    initialize: function () {
      this.listenToOnce(Adapt, {
        "app:dataReady": this.onAppDataReady,
        "adapt:initialize": this.onAdaptInitialized
      });
    },
    onAppDataReady: function () {
      this.onResize = this.onResize.bind(this);
      this.preventWrapperScroll = this.preventWrapperScroll.bind(this);
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "trickle:resize": this.onTrickleResize,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:kill": this.onKill,
        "trickle:finished": this.onFinished,
        "remove": this.onRemove
      });
    },
    onAdaptInitialized: function () {
      this.wrapper = document.getElementById('wrapper');
      this.wrapper.addEventListener("scroll", this.preventWrapperScroll);
    },
    onStepLock: function (view) {
      this.isStepLocking = true;
      this.stepView = view;
      $(window).on("resize", this.onResize);
      $(".page").on("resize", this.onResize);
      Adapt.trigger("trickle:resize");
    },
    preventWrapperScroll: function (event) {
      if (!this.isStepLocking) return;
      var top = this.wrapper.scrollTop;
      if (top === 0) return;
      this.wrapper.scrollTop = 0;
      window.scrollTo(0, window.pageYOffset + top);
    },
    onResize: function () {
      if (!this.isStepLocking) return;
      Adapt.trigger("trickle:resize");
    },
    onTrickleResize: function () {
      if (!this.isStepLocking) return;
      var offset = this.stepView.$el.offset();
      var height = this.stepView.$el.height();
      var $wrapper = $(this.wrapper);
      var bottom = offset['top'] + height;
      $wrapper.css("height", bottom);
    },
    onStepUnlock: function (view) {
      this.isStepLocking = false;
      this.stepView = null;
      $(window).off("resize", this.onResize);
      $(".page").off("resize", this.onResize);
    },
    onKill: function () {
      this.onFinished();
      this.onStepUnlock();
    },
    onFinished: function () {
      this.wrapper.removeEventListener("scroll", this.preventWrapperScroll);
      $(this.wrapper).css("height", "");
    },
    onRemove: function () {
      this.onStepUnlock();
      this.stepView = null;
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/resize", new TrickleBodyResizeHandler());

  var TrickleTutorHandler = Backbone.Controller.extend({
    stepLockedId: null,
    isStepLocking: false,
    isTutorOpen: false,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "tutor:opened": this.onTutorOpened,
        "tutor:closed": this.onTutorClosed,
        "trickle:stepunlock": this.onStepUnlock,
        "remove": this.onRemove
      });
    },
    onStepLock: function (view) {
      if (view) {
        this.stepLockedId = view.model.get("_id");
      }

      this.isStepLocking = true;
    },
    onTutorOpened: function (view, alertObject) {
      if (!this.isStepLocking) return;
      if (!this.isOriginStepLocked(view)) return;
      this.isTutorOpen = true;
      Adapt.trigger("trickle:overlay");
      Adapt.trigger("trickle:wait");
    },
    isOriginStepLocked: function (view) {
      if (!view || !this.stepLockedId) return true;
      var parents = view.model.getAncestorModels();

      var hasStepLockedParent = _.find(parents, function (ancestor) {
        return ancestor.get('_id') === this.stepLockedId;
      }, this);

      if (!hasStepLockedParent) return false;
      return true;
    },
    onTutorClosed: function (view, alertObject) {
      if (!this.isStepLocking) return;
      if (!this.isTutorOpen) return;
      if (!this.isOriginStepLocked(view)) return;
      this.isTutorOpen = false;
      Adapt.trigger("trickle:unoverlay");
      Adapt.trigger("trickle:unwait");
    },
    onStepUnlock: function () {
      this.isStepLocking = false;
      this.stepLockedId = null;
    },
    onRemove: function () {
      this.onStepUnlock();
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/tutor", new TrickleTutorHandler());

  var TrickleVisibilityHandler = Backbone.Controller.extend({
    isStepLocking: false,
    trickleModel: null,
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.listenTo(Adapt, {
        "trickle:steplock": this.onStepLock,
        "trickle:visibility": this.onVisibility,
        "trickle:stepunlock": this.onStepUnlock,
        "trickle:kill": this.onKill,
        "trickle:finished": this.onFinished,
        "remove": this.onRemove
      });
    },
    onStepLock: function (view) {
      this.isStepLocking = true;
      this.trickleModel = view.model;
      Adapt.trigger("trickle:visibility");
    },
    onVisibility: function () {
      if (!this.isStepLocking) return;
      if (!Adapt.trickle.pageView) return;
      var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;
      var trickleModelId = this.trickleModel.get("_id");
      var trickleType = this.trickleModel.get("_type");

      var atIndex = _.findIndex(descendantsParentFirst, function (descendant) {
        if (descendant.get("_id") === trickleModelId) return true;
      });

      descendantsParentFirst.forEach(function (descendant, index) {
        var components = descendant.findDescendantModels("components");

        if (index <= atIndex) {
          descendant.set("_isVisible", true, {
            pluginName: "trickle"
          });
          components.forEach(function (componentModel) {
            componentModel.set("_isVisible", true, {
              pluginName: "trickle"
            });
          });
          return;
        }

        if (trickleType === "article" && descendant.get("_type") === "block") {
          if (descendant.get("_parentId") === trickleModelId) {
            descendant.set("_isVisible", true, {
              pluginName: "trickle"
            });
            components.forEach(function (componentModel) {
              componentModel.set("_isVisible", true, {
                pluginName: "trickle"
              });
            });
            return;
          }
        }

        descendant.set("_isVisible", false, {
          pluginName: "trickle"
        });
        components.forEach(function (componentModel) {
          componentModel.set("_isVisible", false, {
            pluginName: "trickle"
          });
        });
      });
    },
    onStepUnlock: function (view) {
      this.isStepLocking = false;
      this.trickleModel = null;
    },
    onKill: function () {
      this.onFinished();
      this.onStepUnlock();
    },
    onFinished: function () {
      var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;
      descendantsParentFirst.forEach(function (descendant) {
        descendant.set("_isVisible", true, {
          pluginName: "trickle"
        });
        var components = descendant.findDescendantModels("components");
        components.forEach(function (componentModel) {
          componentModel.set("_isVisible", true, {
            pluginName: "trickle"
          });
        });
      });
    },
    onRemove: function () {
      this.onStepUnlock();
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/visibility", new TrickleVisibilityHandler());

  var TrickleDone = Backbone.Controller.extend({
    initialize: function () {
      this.listenToOnce(Adapt, "app:dataReady", this.onAppDataReady);
    },
    onAppDataReady: function () {
      this.setupEventListeners();
    },
    setupEventListeners: function () {
      this.onDone = _.debounce(this.onDone.bind(this), 50);
      this.listenTo(Adapt, {
        "trickle:steplock": this.onDone,
        "trickle:stepunlock": this.onDone,
        "trickle:continue": this.onDone,
        "trickle:finished": this.onDone
      });
    },
    onDone: function () {
      Adapt.trigger("trickle:done");
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/handlers/done", new TrickleDone());

  var Trickle = Backbone.Controller.extend({
    model: null,
    pageView: null,
    initialize: function () {
      this.listenToOnce(Adapt, {
        'app:dataReady': this.onAppDataReady
      });
    },
    onAppDataReady: function () {
      this.getCourseModel();
      if (!this.isCourseEnabled()) return;
      this.setupListeners();
    },
    getCourseModel: function () {
      this.model = Adapt.course;
    },
    isCourseEnabled: function () {
      var trickleConfig = this.getModelConfig(this.model);
      if (trickleConfig && trickleConfig._isEnabled === false) return false;
      return true;
    },
    getModelConfig: function (model) {
      return model.get('_trickle');
    },
    getCompletionAttribute: function () {
      var trickle = this.getModelConfig(Adapt.config);
      if (!trickle) return '_isComplete';
      return trickle._completionAttribute || '_isComplete';
    },
    setModelConfig: function (model, config) {
      return model.set('_trickle', config);
    },
    setupListeners: function () {
      this.listenTo(Adapt, 'pageView:preRender', this.onPagePreRender);
    },
    onPagePreRender: function (view) {
      this.pageView = new PageView$2({
        model: view.model,
        el: view.el
      });
    },
    scroll: function (fromModel) {
      if (!this.shouldScrollPage(fromModel)) return;
      fromModel.set('_isTrickleAutoScrollComplete', true);
      var trickle = Adapt.trickle.getModelConfig(fromModel);
      var isAutoScrollOff = !trickle._autoScroll;
      var hasTrickleButton = trickle._button._isEnabled;

      if (isAutoScrollOff && !hasTrickleButton) {
        return;
      }

      var scrollTo = trickle._scrollTo;
      if (scrollTo === undefined) scrollTo = '@block +1';
      var scrollToId = '';

      switch (scrollTo.substr(0, 1)) {
        case '@':
          var relativeModel = fromModel.findRelativeModel(scrollTo, {
            filter: function (model) {
              return model.get('_isAvailable');
            }
          });
          if (relativeModel === undefined) return;
          scrollToId = relativeModel.get('_id');
          break;

        case '.':
          scrollToId = scrollTo.substr(1, scrollTo.length - 1);
          break;

        default:
          scrollToId = scrollTo;
      }

      if (scrollToId === '') return;

      if (hasTrickleButton) {
        Adapt.a11y.focusFirst($('.' + scrollToId));
      }

      if (isAutoScrollOff) return;
      var duration = fromModel.get('_trickle')._scrollDuration || 500;
      Adapt.scrollTo('.' + scrollToId, {
        duration: duration
      });
    },
    shouldScrollPage: function (fromModel) {
      var trickle = Adapt.trickle.getModelConfig(fromModel);
      if (!trickle || !trickle._isEnabled) return false;
      var hasScrolled = fromModel.get('_isTrickleAutoScrollComplete');
      if (hasScrolled) return false;

      var isArticleWithOnChildren = fromModel.get('_type') === 'article' && trickle._onChildren;

      if (isArticleWithOnChildren) return false;
      return true;
    }
  });
  __AMD("extensions/adapt-contrib-trickle/js/adapt-contrib-trickle", Adapt.trickle = new Trickle());

  Adapt.on('questionView:showFeedback', function (view) {
    var alertObject = {
      title: view.model.get('feedbackTitle'),
      body: view.model.get('feedbackMessage')
    };
    var attributes = {};
    var classes = [];

    if (view.model.has('_isCorrect')) {
      if (view.model.get('_isCorrect')) {
        classes.push('is-correct');
      } else {
        if (view.model.has('_isAtLeastOneCorrectSelection')) {
          if (view.model.get('_isAtLeastOneCorrectSelection')) {
            classes.push('is-partially-correct');
          } else {
            classes.push('is-incorrect');
          }
        } else {
          classes.push('is-incorrect');
        }
      }
    }

    if (view.model.has('_component')) {
      classes.push('is-component is-' + view.model.get('_component').toLowerCase());
    } else if (view.model.has('_extension')) {
      classes.push('is-extension is-' + view.model.get('_extension').toLowerCase());
    }

    attributes['data-adapt-id'] = view.model.get('_id');
    alertObject._classes = classes.join(' ');
    alertObject._attributes = attributes;
    Adapt.once('notify:closed', function () {
      Adapt.trigger('tutor:closed', view, alertObject);
    });
    Adapt.trigger('notify:popup', alertObject);
    Adapt.trigger('tutor:opened', view, alertObject);
  });

  var MenuItemView = function (_AdaptView) {
    _inherits(MenuItemView, _AdaptView);

    var _super = _createSuper(MenuItemView);

    function MenuItemView() {
      _classCallCheck(this, MenuItemView);

      return _super.apply(this, arguments);
    }

    _createClass(MenuItemView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'listitem',
          'aria-labelledby': this.model.get('_id') + '-heading'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['menu-item', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isVisited') ? 'is-visited' : '', this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isLocked') ? 'is-locked' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.model.checkCompletionStatus();
        this.model.checkInteractionCompletionStatus();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.imageready(this.setReadyStatus.bind(this));
      }
    }]);

    return MenuItemView;
  }(AdaptView$1);

  MenuItemView.type = 'menuItem';
  var MenuItemView$1 = __AMD("core/js/views/menuItemView", MenuItemView);

  var MenuView = function (_ContentObjectView) {
    _inherits(MenuView, _ContentObjectView);

    var _super = _createSuper(MenuView);

    function MenuView() {
      _classCallCheck(this, MenuView);

      return _super.apply(this, arguments);
    }

    return MenuView;
  }(ContentObjectView);

  Object.assign(MenuView, {
    childContainer: '.js-children',
    childView: MenuItemView$1,
    type: 'menu',
    template: 'menu'
  });
  var MenuView$1 = __AMD("core/js/views/menuView", MenuView);

  var BoxMenuItemView = MenuItemView$1.extend({
    events: {
      'click .js-btn-click': 'onClickMenuItemButton'
    },
    onClickMenuItemButton: function (event) {
      if (event && event.preventDefault) event.preventDefault();
      if (this.model.get('_isLocked')) return;
      Backbone.history.navigate('#/id/' + this.model.get('_id'), {
        trigger: true
      });
    }
  }, {
    className: 'boxmenu-item',
    template: 'boxMenuItem'
  });
  var BoxMenuItemView$1 = __AMD("menu/adapt-contrib-boxMenu/js/adapt-contrib-boxMenuItemView", BoxMenuItemView);

  var BoxMenuGroupView = MenuItemView$1.extend({
    postRender: function () {
      _.defer(this.addChildren.bind(this));

      this.$el.imageready(this.setReadyStatus.bind(this));
      this.$el.parents('.boxmenu__item-container').addClass('has-groups');
    }
  }, {
    childContainer: '.js-group-children',
    childView: BoxMenuItemView$1,
    className: 'boxmenu-group',
    template: 'boxMenuGroup'
  });
  var BoxMenuGroupView$1 = __AMD("menu/adapt-contrib-boxMenu/js/adapt-contrib-boxMenuGroupView", BoxMenuGroupView);

  var BoxMenuView = MenuView$1.extend({
    initialize: function () {
      MenuView$1.prototype.initialize.apply(this);
      this.setStyles();
      this.listenTo(Adapt, {
        'device:changed': this.onDeviceResize
      });
    },
    onDeviceResize: function () {
      this.setStyles();
    },
    addChildren: function () {
      var nthChild = 0;
      var models = this.model.getChildren().models;
      var childViews = [];
      models.forEach(function (model) {
        if (!model.get('_isAvailable')) return;
        nthChild++;
        model.set('_nthChild', nthChild);
        var ChildView = model.get('_type') === 'menu' && model.get('_boxMenu') && model.get('_boxMenu')._renderAsGroup ? BoxMenuGroupView$1 : BoxMenuItemView$1;
        var $parentContainer = this.$(this.constructor.childContainer);
        var childView = new ChildView({
          model: model
        });
        childViews.push(childView);
        $parentContainer.append(childView.$el);
      }.bind(this));
      this.setChildViews(childViews);
    },
    setStyles: function () {
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.processHeader();
    },
    setBackgroundImage: function () {
      var config = this.model.get('_boxMenu');
      var backgroundImages = config && config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case 'large':
          backgroundImage = backgroundImages._large;
          break;

        case 'medium':
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el.addClass('has-bg-image').css('background-image', 'url(' + backgroundImage + ')');
      } else {
        this.$el.removeClass('has-bg-image').css('background-image', '');
      }
    },
    setBackgroundStyles: function () {
      var config = this.model.get('_boxMenu');
      var styles = config && config._backgroundStyles;
      if (!styles) return;
      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    processHeader: function () {
      var config = this.model.get('_boxMenu');
      var header = config && config._menuHeader;
      if (!header) return;
      var $header = this.$('.menu__header');
      this.setHeaderBackgroundImage(header, $header);
      this.setHeaderBackgroundStyles(header, $header);
      this.setHeaderMinimumHeight(header, $header);
    },
    setHeaderBackgroundImage: function (config, $header) {
      var backgroundImages = config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case 'large':
          backgroundImage = backgroundImages._large;
          break;

        case 'medium':
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header.addClass('has-bg-image').css('background-image', 'url(' + backgroundImage + ')');
      } else {
        $header.removeClass('has-bg-image').css('background-image', '');
      }
    },
    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;
      if (!styles) return;
      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setHeaderMinimumHeight: function (config, $header) {
      var minimumHeights = config._minimumHeights;
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case 'large':
          minimumHeight = minimumHeights._large;
          break;

        case 'medium':
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header.addClass('has-min-height').css('min-height', minimumHeight + 'px');
      } else {
        $header.removeClass('has-min-height').css('min-height', '');
      }
    }
  }, {
    className: 'boxmenu',
    template: 'boxMenu'
  });
  Adapt.register('course menu', {
    view: BoxMenuView
  });
  Adapt.register('boxMenu', {
    view: BoxMenuView,
    model: MenuModel$1.extend({})
  });

  var ThemeView = Backbone.View.extend({
    className: function () {},
    initialize: function () {
      this.setStyles();
      this.listenTo(Adapt, {
        'device:changed': this.onDeviceResize,
        'remove': this.remove
      });
    },
    onDeviceResize: function () {
      this.setStyles();
    },
    remove: function () {
      Backbone.View.prototype.remove.call(this);
      this.onRemove();
    },
    setStyles: function () {
      this.setClasses();
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.setMinimumHeight();
      this.setCustomStyles();
    },
    setClasses: function () {
      this.$el.addClass(this.className());
    },
    setBackgroundImage: function () {
      var backgroundImages = this.model.get('_backgroundImage');
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case 'large':
          backgroundImage = backgroundImages._large;
          break;

        case 'medium':
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el.addClass('has-bg-image').css('background-image', 'url(' + backgroundImage + ')');
      } else {
        this.$el.removeClass('has-bg-image').css('background-image', '');
      }
    },
    setBackgroundStyles: function () {
      var styles = this.model.get('_backgroundStyles');
      if (!styles) return;
      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setMinimumHeight: function () {
      var minimumHeights = this.model.get('_minimumHeights');
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case 'large':
          minimumHeight = minimumHeights._large;
          break;

        case 'medium':
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        this.$el.addClass('has-min-height').css('min-height', minimumHeight + 'px');
      } else {
        this.$el.removeClass('has-min-height').css('min-height', '');
      }
    },
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeView$1 = __AMD("theme/adapt-contrib-vanilla/js/themeView", ThemeView);

  var ThemePageView = ThemeView$1.extend({
    className: function () {},
    setCustomStyles: function () {
      this.processHeader();
    },
    processHeader: function () {
      var header = this.model.get('_pageHeader');
      if (!header) return;
      var $header = this.$('.page__header');
      this.setHeaderBackgroundImage(header, $header);
      this.setHeaderBackgroundStyles(header, $header);
      this.setHeaderMinimumHeight(header, $header);
    },
    setHeaderBackgroundImage: function (config, $header) {
      var backgroundImages = config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case 'large':
          backgroundImage = backgroundImages._large;
          break;

        case 'medium':
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header.addClass('has-bg-image').css('background-image', 'url(' + backgroundImage + ')');
      } else {
        $header.removeClass('has-bg-image').css('background-image', '');
      }
    },
    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;
      if (!styles) return;
      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setHeaderMinimumHeight: function (config, $header) {
      var minimumHeights = config._minimumHeights;
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case 'large':
          minimumHeight = minimumHeights._large;
          break;

        case 'medium':
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header.addClass('has-min-height').css('min-height', minimumHeight + 'px');
      } else {
        $header.removeClass('has-min-height').css('min-height', '');
      }
    },
    onRemove: function () {}
  });
  var ThemePageView$1 = __AMD("theme/adapt-contrib-vanilla/js/themePageView", ThemePageView);

  var ThemeArticleView = ThemeView$1.extend({
    className: function () {},
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeArticleView$1 = __AMD("theme/adapt-contrib-vanilla/js/themeArticleView", ThemeArticleView);

  var ThemeBlockView = ThemeView$1.extend({
    className: function () {
      return this.model.get('_isDividerBlock') ? 'is-divider-block' : '';
    },
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeBlockView$1 = __AMD("theme/adapt-contrib-vanilla/js/themeBlockView", ThemeBlockView);

  function onDataReady() {
    $('html').addClass(Adapt.course.get('_courseStyle'));
  }

  function onPostRender(view) {
    var model = view.model;
    var theme = model.get('_vanilla');
    if (!theme) return;

    switch (model.get('_type')) {
      case 'page':
        new ThemePageView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case 'article':
        new ThemeArticleView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case 'block':
        new ThemeBlockView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      default:
        new ThemeView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
    }
  }

  Adapt.on({
    'app:dataReady': onDataReady,
    'pageView:postRender articleView:postRender blockView:postRender': onPostRender
  });

  $('body').append(Handlebars.templates.loading());
  Adapt.data.on('ready', function triggerInit() {
    Adapt.log.debug('Calling Adapt.init');
    Adapt.init();
    Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');
  }).init();

});
// Allow ES export default to be exported as amd modules
window.__AMD = function(id, value) {
  window.define(id, function() { return value; }); // define for external use
  window.require([id]); // force module to load
  return value; // return for export
};
//# sourceMappingURL=adapt.min.js.map
